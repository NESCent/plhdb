<?xml version="1.0"?>
<api><resource provides="dijit.ColorPalette" project="dijit" file="ColorPalette.js"><requires><require environment="common" resource="dijit.util.place"/><require environment="common" resource="dijit.util.typematic"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.ColorPalette" type="Function"><summary>Grid showing various colors, so the user can pick a certain color</summary></var><var name="dijit.ColorPalette.defaultTimeout" type="Number" prototype="dijit.ColorPalette"><summary>number of milliseconds before a held key or button becomes typematic</summary></var><var name="dijit.ColorPalette.timeoutChangeRate" prototype="dijit.ColorPalette"/><var name="dijit.ColorPalette.palette" type="String" prototype="dijit.ColorPalette"><summary>Size of grid, either "7x10" or "3x4". _selectedColor: String The value of the selected color.</summary></var><var name="dijit.ColorPalette.selectedColor" prototype="dijit.ColorPalette" instance="dijit.ColorPalette"/><var name="dijit.ColorPalette._currentFocus" type="Integer" prototype="dijit.ColorPalette" instance="dijit.ColorPalette" private="1"><summary>Index of the currently focused color.</summary></var><var name="dijit.ColorPalette._xDim" type="Integer" prototype="dijit.ColorPalette" instance="dijit.ColorPalette" private="1"><summary>This is the number of colors horizontally across.</summary></var><var name="dijit.ColorPalette._yDim" type="Integer" prototype="dijit.ColorPalette" instance="dijit.ColorPalette" private="1"><summary>/ This is the number of colors vertically down. _palettes: Map This represents the value of the colors. The first level is a hashmap of the different arrays available The next two dimensions represent the columns and rows of colors. _imagePaths: Map This is stores the path to the palette images _paletteCoords: Map This is a map that is used to calculate the coordinates of the images that make up the palette.</summary></var><var name="dijit.ColorPalette.templatePath" type="String" prototype="dijit.ColorPalette"><summary>Path to the template of this widget.</summary></var><var name="dijit.ColorPalette._palettes.7x10"/><var name="dijit.ColorPalette._palettes.3x4"/><var name="dijit.ColorPalette._imagePaths.7x10"/><var name="dijit.ColorPalette._imagePaths.3x4"/><var name="dijit.ColorPalette._paletteCoords.leftOffset"/><var name="dijit.ColorPalette._paletteCoords.topOffset"/><var name="dijit.ColorPalette._paletteCoords.cWidth"/><var name="dijit.ColorPalette._paletteCoords.cHeight"/><var name="dijit.ColorPalette.postCreate" type="Function" prototype="dijit.ColorPalette"/><var name="dijit.ColorPalette.domNode.style.position" instance="dijit.ColorPalette"/><var name="dijit.ColorPalette._highlightNodes" instance="dijit.ColorPalette" private="1"/><var name="dijit.ColorPalette.onColorSelect" type="Function" prototype="dijit.ColorPalette"><summary>Callback when a color is selected.</summary></var><var name="dijit.ColorPalette.onClick" type="Function" prototype="dijit.ColorPalette"><summary>Handler when a mouse click occurs. This causes the color that is clicked to be selected.</summary></var><var name="dijit.ColorPalette.onMouseOver" type="Function" prototype="dijit.ColorPalette"><summary>Handler for onMouseOver. This changes the color being highlighted.</summary></var><var name="dijit.ColorPalette.onBlur" type="Function" prototype="dijit.ColorPalette"><summary>Handler for the onBlur event. Causes the highlight Div to be destroyed.</summary></var><var name="dijit.ColorPalette.onFocus" type="Function" prototype="dijit.ColorPalette"><summary>Handler for onFocus. This highlights the first color in the palette if it is the first time the palette is focused. Otherwise the last color highlighted is focused.</summary></var><var name="dijit.ColorPalette.onKeyDown" type="Function" prototype="dijit.ColorPalette"><summary>Handler for the onKeyDown event. It handles space and tab being pressed. Space selects the color currently highlighted. Tab blurs the area currently highlighted.</summary></var><var name="dijit.ColorPalette._selectColor" type="Function" prototype="dijit.ColorPalette" private="1"><summary>This selects a color. It triggers the onColorSelect event area: The area node that covers the color being selected.</summary></var><var name="dijit.ColorPalette._navigateByKey" type="Function" prototype="dijit.ColorPalette" private="1"><summary>This is the callback for typematic. It changes the focus and the highlighed color.</summary></var><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.Menu" project="dijit" file="Menu.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Container"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.bidi"/><require environment="common" resource="dijit.util.PopupManager"/><require environment="common" resource="dijit.util.scroll"/><require environment="common" resource="dijit.util.window"/></requires><vars><var name="dijit.PopupMenu" type="Function"/><var name="dijit.PopupMenu.templateString" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.targetNodeIds" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.submenuOverlap" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.contextMenuForWindow" type="Boolean" prototype="dijit.PopupMenu"><summary>if true, right clicking anywhere on the window will cause this context menu to open; if false, must specify targetNodeIds</summary></var><var name="dijit.PopupMenu.parentMenu" prototype="dijit.PopupMenu" instance="dijit.PopupMenu"/><var name="dijit.PopupMenu.isMenu" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.submenuDelay" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.postCreate" type="Function" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu._getTopMenu" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._moveToParentMenu" returns="do not pass to parent menu" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._moveToChildMenu" returns="do not pass to parent menu" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._selectCurrentItem" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu.processKey" returns="do not pass to parent menu" type="Function" prototype="dijit.PopupMenu"><summary>callback to process key strokes return true to stop the event being processed by the parent popupmenu</summary></var><var name="dijit.PopupMenu._findValidItem" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._highlightOption" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu.onItemClick" type="Function" prototype="dijit.PopupMenu"><summary>user defined function to handle clicks on an item</summary></var><var name="dijit.PopupMenu.closeSubmenu" type="Function" prototype="dijit.PopupMenu"><summary>close the currently displayed submenu</summary></var><var name="dijit.PopupMenu.currentSubmenu" instance="dijit.PopupMenu"/><var name="dijit.PopupMenu.currentSubmenuTrigger.is_open" instance="dijit.PopupMenu"/><var name="dijit.PopupMenu.currentSubmenuTrigger" instance="dijit.PopupMenu"/><var name="dijit.PopupMenu._iframeContentWindow" returns="Window" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._iframeContentDocument" returns="HTMLDocument" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu.bindDomNode" type="Function" prototype="dijit.PopupMenu"><summary>attach menu to given node</summary></var><var name="dijit.PopupMenu.unBindDomNode" type="Function" prototype="dijit.PopupMenu"><summary>detach menu from given node</summary></var><var name="dijit.PopupMenu._contextKey" type="Function" prototype="dijit.PopupMenu" private="1"/><var name="dijit.PopupMenu._openAsSubmenu" type="Function" prototype="dijit.PopupMenu" private="1"><summary>Open this menu as a child to specified parent, which is a Menu or Button</summary></var><var name="dijit.PopupMenu.open" type="Function" prototype="dijit.PopupMenu"><summary>Open menu relative to the mouse</summary></var><var name="dijit.PopupMenu.close" type="Function" prototype="dijit.PopupMenu"><summary>close this menu</summary></var><var name="dijit.PopupMenu.closeAll" type="Function" prototype="dijit.PopupMenu"><summary>close all popups in the chain</summary></var><var name="dijit.PopupMenu._openSubmenu" type="Function" prototype="dijit.PopupMenu" private="1"><summary>open the submenu to the side of the current menu item</summary></var><var name="dijit.PopupMenu.focus" type="Function" prototype="dijit.PopupMenu"/><var name="dijit.PopupMenu.onOpen" type="Function" prototype="dijit.PopupMenu"><summary>callback when menu is opened</summary></var><var name="dijit.MenuItem" type="Function"><summary>A line item in a Menu2</summary></var><var name="dijit.MenuItem.templateString" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.is_hovering" prototype="dijit.MenuItem" instance="dijit.MenuItem"/><var name="dijit.MenuItem.hover_timer" prototype="dijit.MenuItem" instance="dijit.MenuItem"/><var name="dijit.MenuItem.is_open" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.topPosition" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.iconSrc" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.caption" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.submenuId" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.postMixInProperties" type="Function" prototype="dijit.MenuItem"><chains><chain type="call" parent="dijit.MenuItem.superclass.postMixInProperties"/></chains></var><var name="dijit.MenuItem.iconStyle" instance="dijit.MenuItem"/><var name="dijit.MenuItem.postCreate" type="Function" prototype="dijit.MenuItem"/><var name="dijit.MenuItem.containerNode.innerHTML" instance="dijit.MenuItem"/><var name="dijit.MenuItem.onHover" type="Function" prototype="dijit.MenuItem"><summary>callback when mouse is moved onto menu item</summary></var><var name="dijit.MenuItem._onUnhover" type="Function" prototype="dijit.MenuItem" private="1"><summary>internal function for unhover</summary></var><var name="dijit.MenuItem.onUnhover" type="Function" prototype="dijit.MenuItem"><summary>callback when mouse is moved off of menu item if we are unhovering the currently highlighted option then unhighlight it</summary></var><var name="dijit.MenuItem._onClick" type="Function" prototype="dijit.MenuItem" private="1"><summary>internal function for clicks</summary></var><var name="dijit.MenuItem.onClick" type="Function" prototype="dijit.MenuItem"><summary>User defined function to handle clicks this default function call the parent menu's onItemClick</summary></var><var name="dijit.MenuItem._highlightItem" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem._unhighlightItem" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem._startSubmenuTimer" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem._stopSubmenuTimer" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem._openSubmenu" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem._closedSubmenu" type="Function" prototype="dijit.MenuItem" private="1"/><var name="dijit.MenuItem.setDisabled" type="Function" prototype="dijit.MenuItem"><summary>enable or disable this menu item</summary></var><var name="dijit.MenuItem.disabled" instance="dijit.MenuItem"/><var name="dijit.MenuItem.menuOpen" type="Function" prototype="dijit.MenuItem"><summary>callback when menu is opened TODO: I don't see anyone calling this menu item</summary></var><var name="dijit.MenuSeparator" type="Function"><summary>A line between two menu items</summary></var><var name="dijit.MenuSeparator.templateString" prototype="dijit.MenuSeparator"/><var name="dijit.MenuSeparator.postCreate" type="Function" prototype="dijit.MenuSeparator"/><var name="dijit.Menu" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.ProgressBar" project="dijit" file="ProgressBar.js"><requires><require environment="common" resource="dojo.fx"/><require environment="common" resource="dojo.number"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.sniff"/></requires><vars><var name="dijit.ProgressBar" type="Function"><summary>a progress widget, with some calculation and server polling capabilities</summary><description>(implementation) four overlapped divs: (1) lower z-index (4) higher z-index back and front percent label have the same content: when the vertical line (*) partially hides the backLabel, the frontLabel becomes visible ___________________________(1)_domNode____________________________________ |__(3)_internalProgress____________ | | | &lt;--- (*) | | (4) frontLabel | (2) backLabel | |__________________________________| | |__________________________________________________________________________| usage: &lt;div dojoType="ProgressBar"</description></var><var name="dijit.ProgressBar.progress" type="String" prototype="dijit.ProgressBar" instance="dijit.ProgressBar"><summary>(Percentage or Number) initial progress value. with "%": percentual value, 0% &lt;= progress &lt;= 100% or without "%": absolute value, 0 &lt;= progress &lt;= maximum</summary></var><var name="dijit.ProgressBar.maximum" prototype="dijit.ProgressBar"/><var name="dijit.ProgressBar.orientation" prototype="dijit.ProgressBar" instance="dijit.ProgressBar"/><var name="dijit.ProgressBar.annotate" type="true|false" prototype="dijit.ProgressBar"><summary>orientation="vertical"</summary></var><var name="dijit.ProgressBar.places" prototype="dijit.ProgressBar"/><var name="dijit.ProgressBar.duration" prototype="dijit.ProgressBar"/><var name="dijit.ProgressBar.templatePath" prototype="dijit.ProgressBar"/><var name="dijit.ProgressBar._animationStopped" prototype="dijit.ProgressBar" instance="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar.postCreate" type="Function" prototype="dijit.ProgressBar"><chains><chain type="call" parent="dijit.ProgressBar.superclass.postCreate"/></chains></var><var name="dijit.ProgressBar._dimension" instance="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar.frontLabel.style.width" instance="dijit.ProgressBar"/><var name="dijit.ProgressBar.update" type="Function" prototype="dijit.ProgressBar"><summary>update progress information</summary></var><var name="dijit.ProgressBar.report" type="Function" prototype="dijit.ProgressBar"/><var name="dijit.ProgressBar._setupAnimation" type="Function" prototype="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar._animation" instance="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar.startAnimation" type="Function" prototype="dijit.ProgressBar"><summary>starts the left-right animation, useful when the user doesn't know how much time the operation will last</summary></var><var name="dijit.ProgressBar._backup" instance="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar.internalProgress.style.height" instance="dijit.ProgressBar"/><var name="dijit.ProgressBar.stopAnimation" type="Function" prototype="dijit.ProgressBar"><summary>stops the left-right animation</summary></var><var name="dijit.ProgressBar.internalProgress.style.left" instance="dijit.ProgressBar"/><var name="dijit.ProgressBar._setWaiValueNow" type="Function" prototype="dijit.ProgressBar" private="1"/><var name="dijit.ProgressBar.onChange" type="Function" prototype="dijit.ProgressBar"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.TitlePane" project="dijit" file="TitlePane.js"><requires><require environment="common" resource="dojo.fx"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.TitlePane" type="Function"><summary>A pane with a title on top, that can be opened or collapsed.</summary></var><var name="dijit.TitlePane.label" type="String" prototype="dijit.TitlePane"><summary>Title of the pane</summary></var><var name="dijit.TitlePane.open" type="Boolean" prototype="dijit.TitlePane" instance="dijit.TitlePane"><summary>Whether pane is opened or closed.</summary></var><var name="dijit.TitlePane.duration" prototype="dijit.TitlePane"/><var name="dijit.TitlePane.templatePath" prototype="dijit.TitlePane"/><var name="dijit.TitlePane.postCreate" type="Function" prototype="dijit.TitlePane"><chains><chain type="call" parent="dijit.TitlePane.superclass.postCreate"/></chains></var><var name="dijit.TitlePane._slideIn" instance="dijit.TitlePane" private="1"/><var name="dijit.TitlePane._slideOut" instance="dijit.TitlePane" private="1"/><var name="dijit.TitlePane.onLabelClick" type="Function" prototype="dijit.TitlePane"><summary>callback when label is clicked</summary></var><var name="dijit.TitlePane._setCss" type="Function" prototype="dijit.TitlePane" private="1"/><var name="dijit.TitlePane.onLabelKey" type="Function" prototype="dijit.TitlePane"><summary>callback when user hits a key</summary></var><var name="dijit.TitlePane.setLabel" type="Function" prototype="dijit.TitlePane"><summary>sets the text of the label</summary></var><var name="dijit.TitlePane.labelNode.innerHTML" instance="dijit.TitlePane"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.Tooltip" project="dijit" file="Tooltip.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.place"/><require environment="common" resource="dijit.util.BackgroundIframe"/></requires><vars><var name="dijit._MasterTooltip" type="Function" private="1"><summary>Internal widget that holds the actual tooltip markup, which occurs once per page. Called by Tooltip widgets which are just containers to hold the markup</summary></var><var name="dijit._MasterTooltip.duration" prototype="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.opacity" prototype="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.templatePath" prototype="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.postCreate" type="Function" prototype="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.bgIframe" instance="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.fadeIn" instance="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.fadeOut" instance="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.show" type="Function" prototype="dijit._MasterTooltip"><summary>display tooltip w/specified contents underneath specified node</summary></var><var name="dijit._MasterTooltip._onDeck" instance="dijit._MasterTooltip" private="1"/><var name="dijit._MasterTooltip.containerNode.innerHTML" instance="dijit._MasterTooltip"/><var name="dijit._MasterTooltip.isShowingNow" instance="dijit._MasterTooltip"/><var name="dijit._MasterTooltip._onShow" type="Function" prototype="dijit._MasterTooltip" private="1"/><var name="dijit._MasterTooltip.hide" type="Function" prototype="dijit._MasterTooltip"><summary>hide the tooltip</summary></var><var name="dijit._MasterTooltip._onHide" type="Function" prototype="dijit._MasterTooltip" private="1"><chains><chain type="call" parent="this.show"/></chains></var><var name="dijit._MasterTooltip.domNode.style.cssText" instance="dijit._MasterTooltip"/><var name="dijit.Tooltip" type="Function"><summary>Pops up a tooltip (a help message) when you hover over a node.</summary><chains><chain type="prototype" parent="dijit.base.Widget"/><chain type="call" parent="dijit.base.Widget"/></chains></var><var name="dijit.Tooltip.caption" prototype="dijit.Tooltip"/><var name="dijit.Tooltip.showDelay" type="Integer" prototype="dijit.Tooltip"><summary>Number of milliseconds to wait after hovering over/focusing on the object, before the tooltip is displayed.</summary></var><var name="dijit.Tooltip.connectId" type="String" prototype="dijit.Tooltip"><summary>Id of domNode to attach the tooltip to. (When user hovers over specified dom node, the tooltip will appear.)</summary></var><var name="dijit.Tooltip.postCreate" type="Function" prototype="dijit.Tooltip"/><var name="dijit.Tooltip._connectNode" instance="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._isDescendantOf" returns="boolean" type="Function" prototype="dijit.Tooltip" private="1"><summary>Returns boolean if node is a descendant of ancestor guaranteeDescendant allows us to be a "true" isDescendantOf function</summary></var><var name="dijit.Tooltip._onMouseOver" type="Function" prototype="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._onMouseOut" type="Function" prototype="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._onHover" type="Function" prototype="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._hover" instance="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._showTimer" instance="dijit.Tooltip" private="1"/><var name="dijit.Tooltip._onUnHover" type="Function" prototype="dijit.Tooltip" private="1"/><var name="dijit.Tooltip.open" type="Function" prototype="dijit.Tooltip"><summary>display the tooltip; usually not called directly.</summary></var><var name="dijit.Tooltip.isShowingNow" instance="dijit.Tooltip"/><var name="dijit.Tooltip.close" type="Function" prototype="dijit.Tooltip"><summary>hide the tooltip; usually not called directly.</summary></var><var name="dijit.Tooltip.uninitialize" type="Function" prototype="dijit.Tooltip"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.Tree" project="dijit" file="Tree.js"><requires><require environment="common" resource="dojo.fx"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.base.Container"/><require environment="common" resource="dijit._tree.Controller"/></requires><vars><var name="dijit._TreeBase" type="Function" private="1"><summary>Base class for Tree and _TreeNode</summary></var><var name="dijit._TreeBase.state" prototype="dijit._TreeBase" instance="dijit._TreeBase"/><var name="dijit._TreeBase.locked" prototype="dijit._TreeBase" instance="dijit._TreeBase"/><var name="dijit._TreeBase.lock" type="Function" prototype="dijit._TreeBase"><summary>lock this node (and it's descendants) while a delete is taking place?</summary></var><var name="dijit._TreeBase.unlock" type="Function" prototype="dijit._TreeBase"/><var name="dijit._TreeBase.isLocked" returns="false if this node or any of it's ancestors are locked" type="Function" prototype="dijit._TreeBase"><summary>can this node be modified?</summary></var><var name="dijit._TreeBase.setChildren" type="Function" prototype="dijit._TreeBase"><summary>Sets the children of this node. Sets this.isFolder based on whether or not there are children Takes array of objects like: {label: ..., type: ... } See parameters of _TreeNode for details.</summary></var><var name="dijit._TreeBase.isFolder" instance="dijit._TreeBase"/><var name="dijit._TreeBase.containerNode" instance="dijit._TreeBase"/><var name="dijit.Tree" type="Function"><summary>Tree view does all the drawing, visual node management etc. Throws events about clicks on it, so someone may catch them and process Events: afterTreeCreate, beforeTreeDestroy, execute : for clicking the label, or hitting the enter key when focused on the label, toggleOpen : for clicking the expando key (toggles hide/collapse), previous : go to previous visible node, next : go to next visible node, zoomIn : go to child nodes, zoomOut : go to parent node consider this "root node" to be always expanded TODO: make sure that if a node is deleted tabIndex goes to another node, and also that if you programatically create a tree with no data, when the first row is added tabIndex will go to that node</summary><chains><chain type="prototype" parent="dijit._TreeBase"/><chain type="call" parent="dijit._TreeBase"/></chains></var><var name="dijit.Tree.store" prototype="dijit.Tree"/><var name="dijit.Tree.query" prototype="dijit.Tree"/><var name="dijit.Tree.labelAttr" prototype="dijit.Tree"/><var name="dijit.Tree.typeAttr" prototype="dijit.Tree"/><var name="dijit.Tree.childrenAttr" prototype="dijit.Tree"/><var name="dijit.Tree.templatePath" prototype="dijit.Tree"/><var name="dijit.Tree.isExpanded" prototype="dijit.Tree"/><var name="dijit.Tree.isTree" prototype="dijit.Tree"/><var name="dijit.Tree._publish" type="Function" prototype="dijit.Tree" private="1"><summary>Publish a message for this widget/topic</summary></var><var name="dijit.Tree.postMixInProperties" type="Function" prototype="dijit.Tree"/><var name="dijit.Tree.tree" instance="dijit.Tree"/><var name="dijit.Tree._keyTopicMap" instance="dijit.Tree" private="1"/><var name="dijit.Tree.postCreate" type="Function" prototype="dijit.Tree"/><var name="dijit.Tree.containerNode" instance="dijit.Tree"/><var name="dijit.Tree.containerNodeTemplate" instance="dijit.Tree"/><var name="dijit.Tree._controller" instance="dijit.Tree" private="1"/><var name="dijit.Tree.destroy" type="Function" prototype="dijit.Tree"><chains><chain type="call" parent="dijit.base.Widget.prototype.destroy"/></chains></var><var name="dijit.Tree.toString" type="Function" prototype="dijit.Tree"/><var name="dijit.Tree._domElement2TreeNode" type="Function" prototype="dijit.Tree" private="1"/><var name="dijit.Tree._onClick" type="Function" prototype="dijit.Tree" private="1"><summary>translates click events into commands for the controller to process</summary></var><var name="dijit.Tree._onKeyPress" type="Function" prototype="dijit.Tree" private="1"><summary>translates key events into commands for the controller to process</summary></var><var name="dijit.Tree.blurNode" type="Function" prototype="dijit.Tree"><summary>Removes focus from the currently focused node (which must be visible). Usually not called directly (just call focusNode() on another node instead)</summary></var><var name="dijit.Tree.lastFocused" instance="dijit.Tree"/><var name="dijit.Tree.focusNode" type="Function" prototype="dijit.Tree"><summary>Focus on the specified node (which must be visible)</summary></var><var name="dijit._TreeNode" type="Function" private="1"><summary>Single node within a tree</summary><chains><chain type="prototype" parent="dijit._TreeBase"/><chain type="call" parent="dijit._TreeBase"/></chains></var><var name="dijit._TreeNode.templatePath" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.nodeType" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.item" type="dojo.data.Item" prototype="dijit._TreeNode"><summary>the dojo.data entry this tree represents set by widget depending on children/args</summary></var><var name="dijit._TreeNode.isTreeNode" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.label" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.isFolder" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.isExpanded" prototype="dijit._TreeNode" instance="dijit._TreeNode"/><var name="dijit._TreeNode.postCreate" type="Function" prototype="dijit._TreeNode"/><var name="dijit._TreeNode.labelNode.innerHTML" instance="dijit._TreeNode"/><var name="dijit._TreeNode.markProcessing" type="Function" prototype="dijit._TreeNode"><summary>visually denote that tree is loading data, etc.</summary></var><var name="dijit._TreeNode.state" instance="dijit._TreeNode"/><var name="dijit._TreeNode.unmarkProcessing" type="Function" prototype="dijit._TreeNode"><summary>clear markup from markProcessing() call</summary></var><var name="dijit._TreeNode._updateLayout" type="Function" prototype="dijit._TreeNode" private="1"><summary>set appropriate CSS classes for this.domNode</summary></var><var name="dijit._TreeNode._setExpando" type="Function" prototype="dijit._TreeNode" private="1"><summary>set the right image for the expando node</summary></var><var name="dijit._TreeNode.expandoNode.src" instance="dijit._TreeNode"/><var name="dijit._TreeNode.setChildren" type="Function" prototype="dijit._TreeNode"><chains><chain type="call" parent="dijit.Tree.superclass.setChildren"/></chains></var><var name="dijit._TreeNode._slideIn" instance="dijit._TreeNode" private="1"/><var name="dijit._TreeNode._slideOut" instance="dijit._TreeNode" private="1"/><var name="dijit._TreeNode.expand" type="Function" prototype="dijit._TreeNode"><summary>show my children</summary></var><var name="dijit._TreeNode._afterExpand" type="Function" prototype="dijit._TreeNode" private="1"/><var name="dijit._TreeNode.collapse" type="Function" prototype="dijit._TreeNode"/><var name="dijit._TreeNode._afterCollapse" type="Function" prototype="dijit._TreeNode" private="1"/><var name="dijit._TreeNode.toString" type="Function" prototype="dijit._TreeNode"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit._Calendar" project="dijit" file="_Calendar.js"><requires><require environment="common" resource="dojo.cldr.supplemental"/><require environment="common" resource="dojo.date"/><require environment="common" resource="dojo.date.locale"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.base.FormElement"/></requires><vars><var name="dijit._Calendar" type="Function" private="1"/><var name="dijit._Calendar.templatePath" prototype="dijit._Calendar"/><var name="dijit._Calendar.value" prototype="dijit._Calendar" instance="dijit._Calendar"/><var name="dijit._Calendar.dayWidth" prototype="dijit._Calendar"/><var name="dijit._Calendar.setValue" type="Function" prototype="dijit._Calendar"><summary>set the current date and update the UI</summary></var><var name="dijit._Calendar.displayMonth" instance="dijit._Calendar"/><var name="dijit._Calendar._populateGrid" type="Function" prototype="dijit._Calendar" private="1"/><var name="dijit._Calendar.monthLabelNode.innerHTML" instance="dijit._Calendar"/><var name="dijit._Calendar.postCreate" type="Function" prototype="dijit._Calendar"><chains><chain type="call" parent="dijit._Calendar.superclass.postCreate"/></chains></var><var name="dijit._Calendar._adjustDate" type="Function" prototype="dijit._Calendar" private="1"/><var name="dijit._Calendar._onIncrementMonth" type="Function" prototype="dijit._Calendar" private="1"><summary>handler for increment month event</summary></var><var name="dijit._Calendar._onDecrementMonth" type="Function" prototype="dijit._Calendar" private="1"><summary>handler for increment month event</summary></var><var name="dijit._Calendar._onIncrementYear" type="Function" prototype="dijit._Calendar" private="1"><summary>handler for increment year event</summary></var><var name="dijit._Calendar._onDecrementYear" type="Function" prototype="dijit._Calendar" private="1"><summary>handler for increment year event</summary></var><var name="dijit._Calendar._onDayClick" type="Function" prototype="dijit._Calendar" private="1"/><var name="dijit._Calendar.onValueChanged" type="Function" prototype="dijit._Calendar"><summary>the set date event handler</summary></var><var name="dijit" type="Object"/></vars></resource><resource provides="dijit._tree.Controller" project="dijit" file="_tree/Controller.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.Tree"/></requires><vars><var name="dijit._tree.Controller" type="Function"/><var name="dijit._tree.Controller.treeId" prototype="dijit._tree.Controller"/><var name="dijit._tree.Controller.postMixInProperties" type="Function" prototype="dijit._tree.Controller"/><var name="dijit._tree.Controller._listener" type="Function" prototype="dijit._tree.Controller" private="1"><summary>dispatcher to handle events from tree</summary></var><var name="dijit._tree.Controller.onBeforeTreeDestroy" type="Function" prototype="dijit._tree.Controller"/><var name="dijit._tree.Controller.onNext" type="Function" prototype="dijit._tree.Controller"><summary>down arrow pressed; move to next visible node</summary></var><var name="dijit._tree.Controller.onPrevious" type="Function" prototype="dijit._tree.Controller"><summary>up arrow pressed; move to previous visible node</summary></var><var name="dijit._tree.Controller.onZoomIn" type="Function" prototype="dijit._tree.Controller"><summary>right arrow pressed; go to child node</summary></var><var name="dijit._tree.Controller.onZoomOut" type="Function" prototype="dijit._tree.Controller"><summary>left arrow pressed; go to parent</summary></var><var name="dijit._tree.Controller.onToggleOpen" type="Function" prototype="dijit._tree.Controller"><summary>user clicked the +/- icon; expand or collapse my children.</summary></var><var name="dijit._tree.Controller._expand" type="Function" prototype="dijit._tree.Controller" private="1"/><var name="dijit._tree.Controller._collapse" type="Function" prototype="dijit._tree.Controller" private="1"/><var name="dijit._tree.DataController" type="Function"><summary>Controller for tree that hooks up to dojo.data</summary><chains><chain type="prototype" parent="dijit._tree.Controller"/><chain type="call" parent="dijit._tree.Controller"/></chains></var><var name="dijit._tree.DataController.onAfterTreeCreate" type="Function" prototype="dijit._tree.DataController"/><var name="dijit._tree.DataController._expand" type="Function" prototype="dijit._tree.DataController" private="1"><chains><chain type="call" parent="dijit._tree.Controller.prototype._expand"/></chains></var><var name="dijit._tree.DataController._onLoadAllItems" type="Function" prototype="dijit._tree.DataController" private="1"><chains><chain type="call" parent="dijit._tree.Controller.prototype._expand"/></chains></var><var name="dijit._tree.DataController._collapse" type="Function" prototype="dijit._tree.DataController" private="1"><chains><chain type="call" parent="dijit._tree.Controller.prototype._collapse"/></chains></var><var name="dijit._tree" type="Object" private="1"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.Container" project="dijit" file="base/Container.js"><requires><require environment="common" resource="dijit.util.manager"/></requires><vars><var name="dijit.base.Contained" type="Function"><summary>Mixin for widgets that are children of a container widget</summary></var><var name="dijit.base.Contained.getParent" returns="parent widget" type="Function" prototype="dijit.base.Contained"/><var name="dijit.base.Contained._getSibling" returns="null" type="Function" prototype="dijit.base.Contained" private="1"/><var name="dijit.base.Contained.getPreviousSibling" returns="null if this is the first child of the parent, otherwise returns the next element sibling to the &quot;left&quot;." type="Function" prototype="dijit.base.Contained"/><var name="dijit.base.Contained.getNextSibling" returns="null if this is the last child of the parent, otherwise returns the next element sibling to the &quot;right&quot;." type="Function" prototype="dijit.base.Contained"/><var name="dijit.base.Container" type="Function"><summary>Mixin for widgets that contain a list of children like SplitContainer</summary></var><var name="dijit.base.Container.isContainer" prototype="dijit.base.Container"/><var name="dijit.base.Container.addChild" type="Function" prototype="dijit.base.Container"><summary>Process the given child widget, inserting it's dom node as a child of our dom node</summary></var><var name="dijit.base.Container.removeChild" type="Function" prototype="dijit.base.Container"><summary>removes the passed widget instance from this widget but does not destroy it</summary></var><var name="dijit.base.Container._nextElement" type="Function" prototype="dijit.base.Container" private="1"/><var name="dijit.base.Container._firstElement" type="Function" prototype="dijit.base.Container" private="1"/><var name="dijit.base.Container.getChildren" returns="array of children widgets" type="Function" prototype="dijit.base.Container"/><var name="dijit.base.Container.hasChildren" returns="true if widget has children" type="Function" prototype="dijit.base.Container"/><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.FormElement" project="dijit" file="base/FormElement.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.util.wai"/></requires><vars><var name="dijit.base.FormElement" type="Function"><chains><chain type="prototype" parent="dijit.base.Widget"/><chain type="call" parent="dijit.base.Widget"/></chains></var><var name="dijit.base.FormElement.baseClass" type="String" prototype="dijit.base.FormElement"><summary>Used to add CSS classes like FormElementDisabled</summary></var><var name="dijit.base.FormElement.value" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.name" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.id" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.alt" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.type" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.tabIndex" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.disabled" prototype="dijit.base.FormElement" instance="dijit.base.FormElement"/><var name="dijit.base.FormElement._lastValueReported" prototype="dijit.base.FormElement" instance="dijit.base.FormElement" private="1"/><var name="dijit.base.FormElement.enable" type="Function" prototype="dijit.base.FormElement"><summary>enables the widget, usually involving unmasking inputs and turning on event handlers. Not implemented here.</summary></var><var name="dijit.base.FormElement.disable" type="Function" prototype="dijit.base.FormElement"><summary>disables the widget, usually involves masking inputs and unsetting event handlers. Not implemented here.</summary></var><var name="dijit.base.FormElement._setDisabled" type="Function" prototype="dijit.base.FormElement" private="1"><summary>Set disabled state of widget. TODO: not sure which parts of disabling a widget should be here; not sure which code is common to many widgets and which is specific to a particular widget.</summary></var><var name="dijit.base.FormElement.domNode.disabled" instance="dijit.base.FormElement"/><var name="dijit.base.FormElement.onValueChanged" type="Function" prototype="dijit.base.FormElement"><summary>callback when value is changed</summary></var><var name="dijit.base.FormElement.postCreate" type="Function" prototype="dijit.base.FormElement"/><var name="dijit.base.FormElement.setValue" type="Function" prototype="dijit.base.FormElement"><summary>set the value of the widget.</summary></var><var name="dijit.base.FormElement.getValue" type="Function" prototype="dijit.base.FormElement"><summary>get the value of the widget.</summary></var><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.Layout" project="dijit" file="base/Layout.js"><requires><require environment="common" resource="dijit.base.Container"/></requires><vars><var name="dijit.base.Sizable" type="Function"><summary>Helper mixin for widgets that can have their size adjusted, and that need to do some processing when their size changes (like SplitContainer)</summary></var><var name="dijit.base.Sizable.resize" type="Function" prototype="dijit.base.Sizable"><summary>explicitly set this widget's size (in pixels). called if our parent is a layout widget.</summary></var><var name="dijit.base.Sizable.onResized" type="Function" prototype="dijit.base.Sizable"><summary>Layout widgets will override this method to size &amp; position their children</summary></var><var name="dijit.base.Sizable.startup" type="Function" prototype="dijit.base.Sizable"><summary>Called after all the widgets have been instantiated and their dom nodes have been inserted somewhere under document.body</summary></var><var name="dijit.base.Sizable._onWindowResize" type="Function" prototype="dijit.base.Sizable" private="1"><summary>Called when my size has been changed to an unknown value. If the size is explicitly changed by calling resize() this function is not called. Size my children based on my size</summary></var><var name="dijit.base.Layout" type="Function"><summary>Mixin for widgets that contain a list of children like SplitContainer. Widgets which mixin this code must define onResized() to lay out the children</summary></var><var name="dijit.base.Layout.isLayoutContainer" prototype="dijit.base.Layout"/><var name="dijit.base.Layout.layoutChildren" type="Function"/><var name="dijit.base.Layout._sizeChild" type="Function" private="1"/><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.Showable" project="dijit" file="base/Showable.js"><vars><var name="dijit.base.Showable" type="Function"/><var name="dijit.base.Showable.isShowing" returns="Boolean" type="Function" prototype="dijit.base.Showable"><summary>Tests whether widget is set to show-mode or hide-mode (see show() and hide() methods) This function is poorly named. Even if widget is in show-mode, if it's inside a container that's hidden (either a container widget, or just a domnode with display:none), then it won't be displayed</summary></var><var name="dijit.base.Showable.toggleShowing" type="Function" prototype="dijit.base.Showable"><summary>show or hide the widget, to switch it's state</summary></var><var name="dijit.base.Showable.show" type="Function" prototype="dijit.base.Showable"><summary>show the widget</summary></var><var name="dijit.base.Showable.domNode.style.display" instance="dijit.base.Showable"/><var name="dijit.base.Showable.onShow" type="Function" prototype="dijit.base.Showable"><summary>callback for when widget is shown</summary></var><var name="dijit.base.Showable.hide" type="Function" prototype="dijit.base.Showable"><summary>hide the widget (ending up with display:none)</summary></var><var name="dijit.base.Showable.onHide" type="Function" prototype="dijit.base.Showable"><summary>callback for when widget is hidden</summary></var><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.TemplatedWidget" project="dijit" file="base/TemplatedWidget.js"><requires><require environment="common" resource="dijit.util.wai"/><require environment="common" resource="dijit.util.parser"/></requires><vars><var name="dijit.base.TemplatedWidget" type="Function"><summary>mixin for widgets that are instantiated from a template</summary></var><var name="dijit.base.TemplatedWidget.templateNode" type="DomNode" prototype="dijit.base.TemplatedWidget"><summary>a node that represents the widget template. Pre-empts both templateString and templatePath.</summary></var><var name="dijit.base.TemplatedWidget.templateString" prototype="dijit.base.TemplatedWidget"/><var name="dijit.base.TemplatedWidget.templatePath" prototype="dijit.base.TemplatedWidget"/><var name="dijit.base.TemplatedWidget.widgetsInTemplate" prototype="dijit.base.TemplatedWidget"/><var name="dijit.base.TemplatedWidget.containerNode" type="DomNode" prototype="dijit.base.TemplatedWidget"><summary>holds child elements. "containerNode" is generally set via a dojoAttachPoint assignment and it designates where children of the src dom node will be placed</summary></var><var name="dijit.base.TemplatedWidget.buildRendering" type="Function" prototype="dijit.base.TemplatedWidget"><summary>Construct the UI for this widget from a template.</summary><description>Lookup cached version of template, and download to cache if it isn't there already. Returns either a DomNode or a string, depending on whether or not the template contains ${foo} replacement parameters.</description></var><var name="dijit.base.TemplatedWidget.domNode" instance="dijit.base.TemplatedWidget"/><var name="dijit.base.TemplatedWidget._attachTemplateNodes" type="Function" prototype="dijit.base.TemplatedWidget" private="1"><summary>map widget properties and functions to the handlers specified in the dom node and it's descendants. This function iterates over all nodes and looks for these properties: * dojoAttachPoint * dojoAttachEvent * waiRole * waiState</summary></var><var name="dijit.base.getCachedTemplate" returns="mixed" type="Function"><summary>static method to get a template based on the templatePath or</summary></var><var name="dijit.base._sanitizeTemplateString" returns="String" type="Function" private="1"><summary>Strips &lt;?xml ...?&gt; declarations so that external SVG and XML documents can be added to a document without worry. Also, if the string is an HTML document, only the part inside the body tag is returned.</summary></var><var name="dijit.base._createNodesFromText" returns="Array" type="Function" private="1"><summary>Attempts to create a set of nodes based on the structure of the passed text.</summary></var><var name="dijit.base.defaultStrings.dojoRoot"/><var name="dijit.base.defaultStrings.dojoModuleUri"/><var name="dijit.base.defaultStrings.dijitModuleUri"/><var name="dijit.base.defaultStrings.baseScriptUri"/><var name="dijit.base.defaultStrings"><summary>a mapping of strings that are used in template variable replacement</summary></var><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.base.Widget" project="dijit" file="base/Widget.js"><requires><require environment="common" resource="dijit.util.manager"/></requires><vars><var name="dijit.base.Widget" type="Function"><summary>To understand the process by which widgets are instantiated, it is critical to understand what other methods the constructor calls and which of them you'll want to over-ride. Of course, adventurous developers could over-ride the constructor entirely, but this should only be done as a last resort. Below is a list of the methods that are called, in the order they are fired, along with notes about what they do and if/when you should over-ride them in your widget: postMixInProperties: a stub function that you can over-ride to modify variables that may have been naively assigned by mixInProperties # widget is added to manager object here buildRendering Subclasses use this method to handle all UI initialization Sets this.domNode. Templated widgets do this automatically and otherwise it just uses the source dom node. postCreate a stub function that you can over-ride to modify take actions once the widget has been placed in the UI</summary></var><var name="dijit.base.Widget.id" type="String" prototype="dijit.base.Widget"><summary>a unique, opaque ID string that can be assigned by users or by the system. If the developer passes an ID which is known not to be unique, the specified ID is ignored and the system-generated ID is used instead.</summary></var><var name="dijit.base.Widget.lang" prototype="dijit.base.Widget" instance="dijit.base.Widget"/><var name="dijit.base.Widget.srcNodeRef" prototype="dijit.base.Widget" instance="dijit.base.Widget"/><var name="dijit.base.Widget.domNode" prototype="dijit.base.Widget" instance="dijit.base.Widget"/><var name="dijit.base.Widget.postMixInProperties" type="Function" prototype="dijit.base.Widget"><summary>Called after the parameters to the widget have been read-in, but before the widget template is instantiated. Especially useful to set properties that are referenced in the widget template.</summary></var><var name="dijit.base.Widget.buildRendering" type="Function" prototype="dijit.base.Widget"><summary>Construct the UI for this widget, setting this.domNode. Most widgets will mixin TemplatedWidget, which overrides this method.</summary></var><var name="dijit.base.Widget.postCreate" type="Function" prototype="dijit.base.Widget"><summary>Called after a widget's dom has been setup</summary></var><var name="dijit.base.Widget.layout" type="Function" prototype="dijit.base.Widget"><summary>Called after a widget's children have created Provides an opportunity to manipulate any children before they are displayed This is useful for composite widgets that need to control or layout sub-widgets Many layout widgets can use this as a wiring phase</summary></var><var name="dijit.base.Widget.destroy" type="Function" prototype="dijit.base.Widget"><summary>Destroy this widget and it's descendants. This is the generic "destructor" function that all widget users should call to cleanly discard with a widget. Once a widget is destroyed, it's removed from the manager object.</summary></var><var name="dijit.base.Widget._destroy" type="Function" prototype="dijit.base.Widget" private="1"><summary>Destroy this widget, but not its descendents</summary></var><var name="dijit.base.Widget.destroyRendering" type="Function" prototype="dijit.base.Widget"><summary>Destroys the DOM nodes associated with this widget</summary></var><var name="dijit.base.Widget.destroyDescendants" type="Function" prototype="dijit.base.Widget"><summary>Recursively destroy the children of this widget and their descendents.</summary></var><var name="dijit.base.Widget.uninitialize" type="Function" prototype="dijit.base.Widget"><summary>stub function. Over-ride to implement custom widget tear-down behavior.</summary></var><var name="dijit.base.Widget.toString" returns="String" type="Function" prototype="dijit.base.Widget"/><var name="dijit.base.Widget.getDescendants" type="Function" prototype="dijit.base.Widget"><summary>return all the descendent widgets</summary></var><var name="dijit.base.Widget.connect" type="Function" prototype="dijit.base.Widget"><summary>Connects specified obj/event to specified method of this object and registers for disconnect() on widget destroy. Similar to dojo.connect() but takes three arguments rather than four.</summary></var><var name="dijit.base.Widget._connects" instance="dijit.base.Widget" private="1"/><var name="dijit.base.Widget.srcNodeRef.id" instance="dijit.base.Widget"/><var name="dijit.base.Widget.domNode.widgetId" instance="dijit.base.Widget"/><var name="dijit._disableSelection" type="Function" private="1"><summary>disable selection on a node</summary></var><var name="dijit.base" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.dijit" project="dijit" file="dijit.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Layout"/><require environment="common" resource="dijit.base.Showable"/><require environment="common" resource="dijit.base.Container"/><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.parser"/><require environment="common" resource="dijit.util.manager"/><require environment="common" resource="dijit.util.wai"/><require environment="common" resource="dijit.util.FocusManager"/><require environment="common" resource="dijit.util.BackgroundIframe"/><require environment="common" resource="dijit.util.place"/></requires><vars><var name="dijit.dijit" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.AutoCompleter" project="dijit" file="form/AutoCompleter.js"><requires><require environment="common" resource="dijit.util.scroll"/><require environment="common" resource="dijit.util.wai"/><require environment="common" resource="dojo.data.JsonItemStore"/><require environment="common" resource="dijit.form._DropDownTextBox"/><require environment="common" resource="dijit.form.ValidationTextbox"/></requires><vars><var name="dijit.form.AutoCompleter" type="Function"><summary>Auto-completing text box, and base class for Select widget. The drop down box's values are populated from an class called a data provider, which returns a list of values based on the characters that the user has typed into the input box. Some of the options to the AutoCompleter are actually arguments to the data provider. Fixes #2885, #2309</summary></var><var name="dijit.form.AutoCompleter.searchLimit" type="Integer" prototype="dijit.form.AutoCompleter"><summary>Argument to data provider. Specifies cap on maximum number of search results. Default is Infinity.</summary></var><var name="dijit.form.AutoCompleter.store" prototype="dijit.form.AutoCompleter" instance="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.autoComplete" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.searchDelay" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.url" prototype="dijit.form.AutoCompleter" instance="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.fadeTime" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.maxListLength" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.dataProviderClass" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.searchField" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.size" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.maxlength" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.ignoreCase" type="Boolean" prototype="dijit.form.AutoCompleter"><summary>Is the AutoCompleter menu case sensitive? value: String The initial value of the AutoCompleter. This is the value that actually appears in the text area.</summary></var><var name="dijit.form.AutoCompleter.templatePath" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter._setTextFieldValue" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.setValue" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.enable" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter._createOption" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.onfocus" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.onblur" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter._onMouseOut" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._assignHiddenValue" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.getState" type="Function" prototype="dijit.form.AutoCompleter"><summary>Used for saving state of AutoCompleter when navigates to a new page, in case they then hit the browser's "Back" button.</summary></var><var name="dijit.form.AutoCompleter.setState" type="Function" prototype="dijit.form.AutoCompleter"><summary>Used for restoring state of AutoCompleter when has navigated to a new page but then hits browser's "Back" button. this.setValue(state[this.keyField]);</summary></var><var name="dijit.form.AutoCompleter.disable" type="Function" prototype="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.disabled" instance="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter._getCaretPos" returns="If focus has shifted, 0 is fine for caret pos." type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._setCaretPos" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._setSelectedRange" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.onkeypress" type="Function" prototype="dijit.form.AutoCompleter"><summary>handles keyboard events</summary></var><var name="dijit.form.AutoCompleter._prev_key_backspace" instance="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._prev_key_esc" instance="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.searchTimer" instance="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter.compositionEnd" type="Function" prototype="dijit.form.AutoCompleter"><summary>When inputting characters using an input method, such as Asian languages, it will generate this event instead of onKeyDown event</summary></var><var name="dijit.form.AutoCompleter.onkeyup" type="Function" prototype="dijit.form.AutoCompleter"><summary>callback on key up event</summary></var><var name="dijit.form.AutoCompleter._focusOptionNode" type="Function" prototype="dijit.form.AutoCompleter" private="1"><summary>does the actual highlight</summary></var><var name="dijit.form.AutoCompleter._highlighted_option" instance="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._blurOptionNode" type="Function" prototype="dijit.form.AutoCompleter" private="1"><summary>removes highlight on highlighted</summary></var><var name="dijit.form.AutoCompleter._highlightNextOption" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._highlightPrevOption" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._itemMouseOver" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._itemMouseOut" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._openResultList" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._handleBlurTimer" type="Function" prototype="dijit.form.AutoCompleter" private="1"><summary>collect all blur timers issues here</summary></var><var name="dijit.form.AutoCompleter.blurTimer" instance="dijit.form.AutoCompleter"/><var name="dijit.form.AutoCompleter._onMouseOver" type="Function" prototype="dijit.form.AutoCompleter" private="1"><summary>needed in IE and Safari as inputTextNode loses focus when scrolling optionslist</summary></var><var name="dijit.form.AutoCompleter._mouseover_list" instance="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._checkBlurred" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._selectOption" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._doSelect" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.arrowClicked" type="Function" prototype="dijit.form.AutoCompleter"><summary>callback when arrow is clicked</summary></var><var name="dijit.form.AutoCompleter._startSearchFromInput" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter._startSearch" type="Function" prototype="dijit.form.AutoCompleter" private="1"/><var name="dijit.form.AutoCompleter.postCreate" type="Function" prototype="dijit.form.AutoCompleter"><chains><chain type="call" parent="dijit.form.SerializableTextbox.prototype.postCreate"/><chain type="call" parent="dijit.form._DropDownTextBox.prototype.postCreate"/></chains></var><var name="dijit.form.AutoCompleter.data" instance="dijit.form.AutoCompleter"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.Button" project="dijit" file="form/Button.js"><requires><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.form.Button" type="Function"><summary>Basically the same thing as a normal HTML button, but with special styling.</summary></var><var name="dijit.form.Button.caption" prototype="dijit.form.Button"/><var name="dijit.form.Button.type" prototype="dijit.form.Button"/><var name="dijit.form.Button.baseClass" prototype="dijit.form.Button"/><var name="dijit.form.Button.templatePath" prototype="dijit.form.Button"/><var name="dijit.form.Button.postCreate" type="Function" prototype="dijit.form.Button"><chains><chain type="call" parent="dijit.form.Button.superclass.postCreate"/></chains></var><var name="dijit.form.Button.buttonClick" type="Function" prototype="dijit.form.Button"><summary>internal function for handling button clicks via mouse or keybd</summary></var><var name="dijit.form.Button.onClick" type="Function" prototype="dijit.form.Button"><summary>callback for when button is clicked; user can override this function</summary></var><var name="dijit.form.Button.setCaption" type="Function" prototype="dijit.form.Button"><summary>reset the caption (text) of the button; takes an HTML string</summary></var><var name="dijit.form.Button.containerNode.innerHTML" instance="dijit.form.Button"/><var name="dijit.form.Button.domNode.style.display" instance="dijit.form.Button"/><var name="dijit.form.Button._setDisabled" type="Function" prototype="dijit.form.Button" private="1"><chains><chain type="call" parent="dijit.form.Button.superclass._setDisabled"/></chains></var><var name="dijit.form.DropDownButton" type="Function"><summary>push the button and a menu shows up</summary><chains><chain type="prototype" parent="dijit.form.Button"/><chain type="call" parent="dijit.form.Button"/></chains></var><var name="dijit.form.DropDownButton.menuId" prototype="dijit.form.DropDownButton"/><var name="dijit.form.DropDownButton.templatePath" prototype="dijit.form.DropDownButton"/><var name="dijit.form.DropDownButton._orientation.templatePath"/><var name="dijit.form.DropDownButton._orientation.postCreate" type="Function"><chains><chain type="call" parent="dijit.form.DropDownButton.superclass.postCreate"/></chains></var><var name="dijit.form.DropDownButton._orientation.arrowKey" type="Function"><summary>callback when the user presses a key (on key-down)</summary></var><var name="dijit.form.DropDownButton._orientation.arrowKey._menu.domNode.style.display" instance="dijit.form.DropDownButton._orientation.arrowKey"/><var name="dijit.form.DropDownButton._orientation.arrowClick" type="Function"><summary>callback when button is clicked; user shouldn't override this function or else the menu won't toggle</summary></var><var name="dijit.form.DropDownButton._orientation.arrowClick._menu" instance="dijit.form.DropDownButton._orientation.arrowClick" private="1"/><var name="dijit.form.DropDownButton._orientation.arrowClick._oldMenuClose" instance="dijit.form.DropDownButton._orientation.arrowClick" private="1"/><var name="dijit.form.DropDownButton._orientation.arrowClick.close" instance="dijit.form.DropDownButton._orientation.arrowClick"/><var name="dijit.form.DropDownButton.postCreate" type="Function" prototype="dijit.form.DropDownButton"><chains><chain type="call" parent="dijit.form.DropDownButton.superclass.postCreate"/></chains></var><var name="dijit.form.DropDownButton.arrowKey" type="Function" prototype="dijit.form.DropDownButton"><summary>callback when the user presses a key (on key-down)</summary></var><var name="dijit.form.DropDownButton._menu.domNode.style.display" instance="dijit.form.DropDownButton"/><var name="dijit.form.DropDownButton.arrowClick" type="Function" prototype="dijit.form.DropDownButton"><summary>callback when button is clicked; user shouldn't override this function or else the menu won't toggle</summary></var><var name="dijit.form.DropDownButton._menu" instance="dijit.form.DropDownButton" private="1"/><var name="dijit.form.DropDownButton._oldMenuClose" instance="dijit.form.DropDownButton" private="1"/><var name="dijit.form.DropDownButton.close" instance="dijit.form.DropDownButton"/><var name="dijit.form.ComboButton" type="Function"><summary>left side is normal button, right side displays menu</summary><chains><chain type="prototype" parent="dijit.form.DropDownButton"/><chain type="call" parent="dijit.form.DropDownButton"/></chains></var><var name="dijit.form.ComboButton.templatePath" prototype="dijit.form.ComboButton"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.Checkbox" project="dijit" file="form/Checkbox.js"><requires><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.sniff"/><require environment="common" resource="dijit.util.wai"/></requires><vars><var name="dijit.form.Checkbox" type="Function"><summary>Same as an HTML checkbox, but with fancy styling.</summary><description>Implementation details pattern: MVC Control: User interacts with real html inputs Event listeners are added for input node events These handlers make sure to update the view based on input state View: The view is basically the the dijit (tundra) sprint image. Model: The dijit checked state is synched with the input node. There are two modes: 1. Image not used or failed to load 2. Image loaded and used. In case 1, the regular html inputs are shown and used by the user. In case 2, the regular html inputs are invisible but still used by the user. They are turned invisible and overlay the dijit image. Layout Styling is controlled in 3 places: tundra, template, and programmatically in Checkbox.js. The latter is required because of two modes of dijit checkbox: image loaded, vs image not loaded. Also for accessibility it is important that dijit work with images off (a browser preference).</description></var><var name="dijit.form.Checkbox.templatePath" prototype="dijit.form.Checkbox"/><var name="dijit.form.Checkbox._type" prototype="dijit.form.Checkbox" private="1"/><var name="dijit.form.Checkbox.checked" prototype="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.value" prototype="dijit.form.Checkbox"/><var name="dijit.form.Checkbox._leftOffset" prototype="dijit.form.Checkbox" private="1"/><var name="dijit.form.Checkbox.postCreate" type="Function" prototype="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.imageContainer.style.backgroundImage" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.imageNode" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.inputNode.checked" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.onImageLoad" type="Function" prototype="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.imageLoaded" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.width" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.height" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox._connectEvents" type="Function" prototype="dijit.form.Checkbox" private="1"/><var name="dijit.form.Checkbox._setDisabled" type="Function" prototype="dijit.form.Checkbox" private="1"><summary>set disabled state of widget.</summary></var><var name="dijit.form.Checkbox.domNode.disabled" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.onChecked" type="Function" prototype="dijit.form.Checkbox"><summary>callback when checked state is changed</summary></var><var name="dijit.form.Checkbox.setChecked" type="Function" prototype="dijit.form.Checkbox"><summary>set the checked state of the widget.</summary></var><var name="dijit.form.Checkbox.getChecked" type="Function" prototype="dijit.form.Checkbox"><summary>get the checked state of the widget.</summary></var><var name="dijit.form.Checkbox.setValue" type="Function" prototype="dijit.form.Checkbox"><chains><chain type="call" parent="dijit.form.Checkbox.superclass.setValue"/></chains></var><var name="dijit.form.Checkbox.inputNode.value" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.onClick" type="Function" prototype="dijit.form.Checkbox"><summary>user overridable callback for click event handling</summary></var><var name="dijit.form.Checkbox._onClick" type="Function" prototype="dijit.form.Checkbox" private="1"/><var name="dijit.form.Checkbox.mouseOver" type="Function" prototype="dijit.form.Checkbox"><summary>callback when user moves mouse over checkbox</summary></var><var name="dijit.form.Checkbox.hover" instance="dijit.form.Checkbox"/><var name="dijit.form.Checkbox.mouseOut" type="Function" prototype="dijit.form.Checkbox"><summary>callback when user moves mouse off of checkbox</summary></var><var name="dijit.form.Checkbox._updateView" type="Function" prototype="dijit.form.Checkbox" private="1"/><var name="dijit.form.Checkbox.updateContext" type="Function" prototype="dijit.form.Checkbox"><summary>specialize this function to update related GUI</summary></var><var name="dijit.form.RadioButton" type="Function"><summary>Same as an HTML radio, but with fancy styling.</summary><description>Implementation details Specialization: We keep track of dijit radio groups so that we can update the state of all the siblings (the "context") in a group based on input events. We don't rely on browser radio grouping. At the time of implementation not all browsers fire the same events when a different radio button in a group is checked (and the previous unchecked). When the events do fire, e.g. a focus event on the newly checked radio, the checked state of that "newly checked" radio is set to true in some browsers and false in others. It is vital that the view of the resulting input states be correct so that at the time of form submission the intended data is sent. This shared object keeps track of all widgets, grouped by name</description><chains><chain type="prototype" parent="dijit.form.Checkbox"/><chain type="call" parent="dijit.form.Checkbox"/></chains></var><var name="dijit.form.RadioButton._type" prototype="dijit.form.RadioButton" private="1"/><var name="dijit.form.RadioButton._register" type="Function" prototype="dijit.form.RadioButton" private="1"><summary>add this widget to _groups</summary></var><var name="dijit.form.RadioButton._deregister" type="Function" prototype="dijit.form.RadioButton" private="1"><summary>remove this widget from _groups</summary></var><var name="dijit.form.RadioButton.uninitialize" type="Function" prototype="dijit.form.RadioButton"/><var name="dijit.form.RadioButton.updateContext" type="Function" prototype="dijit.form.RadioButton"><summary>make sure the sibling radio views are correct</summary></var><var name="dijit.form.RadioButton.onImageLoad" type="Function" prototype="dijit.form.RadioButton"><chains><chain type="call" parent="dijit.form.Checkbox.prototype.onImageLoad"/></chains></var><var name="dijit.form.RadioButton._leftOffset" instance="dijit.form.RadioButton" private="1"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.CurrencyTextbox" project="dijit" file="form/CurrencyTextbox.js"><requires><require environment="common" resource="dojo.currency"/></requires><vars><var name="dijit.form.CurrencyTextbox" type="Function"><chains><chain type="prototype" parent="dijit.form.NumberTextbox"/><chain type="call" parent="dijit.form.NumberTextbox"/></chains></var><var name="dijit.form.CurrencyTextbox.currency" prototype="dijit.form.CurrencyTextbox"/><var name="dijit.form.CurrencyTextbox.regExpGen" prototype="dijit.form.CurrencyTextbox"/><var name="dijit.form.CurrencyTextbox.format" prototype="dijit.form.CurrencyTextbox"/><var name="dijit.form.CurrencyTextbox.parse" prototype="dijit.form.CurrencyTextbox"/><var name="dijit.form.CurrencyTextbox.postMixInProperties" type="Function" prototype="dijit.form.CurrencyTextbox"><chains><chain type="call" parent="dijit.form.CurrencyTextbox.superclass.postMixInProperties"/></chains></var><var name="dijit.form.CurrencyTextbox.constraints" instance="dijit.form.CurrencyTextbox"/><var name="dijit.form.CurrencyTextbox.constraints.currency" instance="dijit.form.CurrencyTextbox"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.DateTextbox" project="dijit" file="form/DateTextbox.js"><requires><require environment="common" resource="dojo.date"/><require environment="common" resource="dojo.date.locale"/><require environment="common" resource="dojo.date.stamp"/><require environment="common" resource="dijit._Calendar"/><require environment="common" resource="dijit.form._DropDownTextBox"/><require environment="common" resource="dijit.form.ValidationTextbox"/></requires><vars><var name="dijit.form.DateTextbox" type="Function"><summary>A validating, serializable, range-bound date text box. constraints object: min, max</summary></var><var name="dijit.form.DateTextbox.templatePath" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.regExpGen" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.compare" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.format" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.parse" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.value" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.setValue" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.postCreate" prototype="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox._calendarOnValueChanged" prototype="dijit.form.DateTextbox" private="1"/><var name="dijit.form.DateTextbox.postMixInProperties" type="Function" prototype="dijit.form.DateTextbox"><chains><chain type="call" parent="dijit.form.RangeBoundTextbox.prototype.postMixInProperties"/></chains></var><var name="dijit.form.DateTextbox.constraints.selector" instance="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.constraints.min" instance="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.constraints.max" instance="dijit.form.DateTextbox"/><var name="dijit.form.DateTextbox.serialize" type="Function" prototype="dijit.form.DateTextbox"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.InlineEditBox" project="dijit" file="form/InlineEditBox.js"><requires><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.Container"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dojo.i18n"/></requires><vars><var name="dijit.form.InlineEditBox" type="Function"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.NumberSpinner" project="dijit" file="form/NumberSpinner.js"><requires><require environment="common" resource="dijit.form._Spinner"/><require environment="common" resource="dijit.form.NumberTextbox"/></requires><vars><var name="dijit.form.NumberSpinner" type="Function"><summary>Number Spinner</summary><description>This widget is the same as NumberTextbox but with up/down arrows added</description></var><var name="dijit.form.NumberSpinner.required" prototype="dijit.form.NumberSpinner"/><var name="dijit.form.NumberSpinner.adjust" type="Function" prototype="dijit.form.NumberSpinner"><summary>change Number val by the given amount</summary></var><var name="dijit.form.NumberSpinner.constraints.max" instance="dijit.form.NumberSpinner"/><var name="dijit.form.NumberSpinner.constraints.min" instance="dijit.form.NumberSpinner"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.NumberTextbox" project="dijit" file="form/NumberTextbox.js"><requires><require environment="common" resource="dijit.form.ValidationTextbox"/><require environment="common" resource="dojo.number"/></requires><vars><var name="dijit.form.NumberTextboxMixin" type="Function"><summary>A mixin for all number textboxes</summary></var><var name="dijit.form.NumberTextboxMixin.regExpGen" prototype="dijit.form.NumberTextboxMixin"/><var name="dijit.form.NumberTextboxMixin.parse" prototype="dijit.form.NumberTextboxMixin"/><var name="dijit.form.NumberTextboxMixin.value" prototype="dijit.form.NumberTextboxMixin"/><var name="dijit.form.NumberTextboxMixin.format" type="Function" prototype="dijit.form.NumberTextboxMixin"/><var name="dijit.form.NumberTextbox" type="Function"><summary>A validating, serializable, range-bound text box. constraints object: min, max, places</summary></var><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.Select" project="dijit" file="form/Select.js"><requires><require environment="common" resource="dijit.form.AutoCompleter"/></requires><vars><var name="dijit.form.Select" type="Function"><chains><chain type="prototype" parent="dijit.form.AutoCompleter"/><chain type="call" parent="dijit.form.AutoCompleter"/></chains></var><var name="dijit.form.Select.labelField" type="String" prototype="dijit.form.Select"><summary>The text that actually appears in the drop down</summary></var><var name="dijit.form.Select.labelType" type="String" prototype="dijit.form.Select"><summary>"html" or "text" templatePath: dojo.uri.moduleUri("dijit.form", "templates/AutoCompleter.html"),</summary></var><var name="dijit.form.Select.keyField" prototype="dijit.form.Select"/><var name="dijit.form.Select.getValue" prototype="dijit.form.Select"/><var name="dijit.form.Select._setTextFieldValue" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._setValue" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._createOption" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._assignHiddenValue" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select.setTextValue" prototype="dijit.form.Select"/><var name="dijit.form.Select._callbackSetLabel" type="Function" prototype="dijit.form.Select" private="1"><summary>Callback function that dynamically sets the label of the AutoCompleter</summary></var><var name="dijit.form.Select.getState" type="Function" prototype="dijit.form.Select"><summary>returns current value and label</summary></var><var name="dijit.form.Select.setState" type="Function" prototype="dijit.form.Select"><summary>internal function to set both value and label</summary></var><var name="dijit.form.Select.setValue" type="Function" prototype="dijit.form.Select"><summary>Sets the value of the select. Also sets the label to the corresponding value by reverse lookup.</summary></var><var name="dijit.form.Select._isInputEqualToResult" type="Function" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._setLabel" type="Function" prototype="dijit.form.Select" private="1"><summary>Users shouldn't call this function; they should be calling setTextValue() instead get the actual label to display</summary></var><var name="dijit.form.Select.textbox.value" instance="dijit.form.Select"/><var name="dijit.form.Select.labelFunc" returns="the label that the AutoCompleter should display" type="Function" prototype="dijit.form.Select"><summary>Event handler called when the label changes</summary></var><var name="dijit.form.Select.onkeyup" type="Function" prototype="dijit.form.Select"><summary>internal function Select needs to wait for the complete label before committing to a reverse lookup this.setTextValue(this.textbox.value);</summary></var><var name="dijit.form.Select.postCreate" type="Function" prototype="dijit.form.Select"><chains><chain type="call" parent="dijit.form.Select.superclass.postCreate"/></chains></var><var name="dijit.form.Select.comboBoxSelectionValue" instance="dijit.form.Select"/><var name="dijit.form.Select._doSelect" type="Function" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._isValidOption" type="Function" prototype="dijit.form.Select" private="1"/><var name="dijit.form.Select._validateOption" type="Function" prototype="dijit.form.Select" private="1"><summary>callback function. Checks if user input is valid after the store checks to see if the user input exists</summary></var><var name="dijit.form.Select._checkBlurred" type="Function" prototype="dijit.form.Select" private="1"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.Textarea" project="dijit" file="form/Textarea.js"><requires><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.form.Textarea" type="Function"><summary>A textarea that resizes vertically to contain the data. Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes. Cols is not supported and the width should be specified with style width. Rows is not supported since this widget adjusts the height. usage: &lt;textarea dojoType="dijit.form.ResizableTextArea"&gt;...&lt;/textarea&gt;</summary></var><var name="dijit.form.Textarea.templateString" prototype="dijit.form.Textarea"/><var name="dijit.form.Textarea.focus" type="Function" prototype="dijit.form.Textarea"><summary>Received focus, needed for the InlineEditBox widget</summary></var><var name="dijit.form.Textarea._setFormValue" type="Function" prototype="dijit.form.Textarea" private="1"><chains><chain type="call" parent="dijit.form.Textarea.superclass.setValue"/></chains></var><var name="dijit.form.Textarea.formValueNode.value" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.lastHeight" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.setValue" type="Function" prototype="dijit.form.Textarea"/><var name="dijit.form.Textarea.editNode.innerHTML" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.getValue" type="Function" prototype="dijit.form.Textarea"/><var name="dijit.form.Textarea.postMixInProperties" type="Function" prototype="dijit.form.Textarea"><chains><chain type="call" parent="dijit.form.Textarea.superclass.postMixInProperties"/></chains></var><var name="dijit.form.Textarea.value" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.srcNodeRef.innerHTML" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.postCreate" type="Function" prototype="dijit.form.Textarea"/><var name="dijit.form.Textarea.domNode.style.overflowY" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.eventNode" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.focusNode" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.iframe" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.iframe.contentDocument.designMode" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea.editNode" instance="dijit.form.Textarea"/><var name="dijit.form.Textarea._focused" type="Function" prototype="dijit.form.Textarea" private="1"/><var name="dijit.form.Textarea._blurred" type="Function" prototype="dijit.form.Textarea" private="1"/><var name="dijit.form.Textarea._interceptTab" type="Function" prototype="dijit.form.Textarea" private="1"/><var name="dijit.form.Textarea._changing" type="Function" prototype="dijit.form.Textarea" private="1"><summary>event handler for when a change is imminent</summary></var><var name="dijit.form.Textarea._changed" type="Function" prototype="dijit.form.Textarea" private="1"><summary>event handler for when a change has already happened</summary></var><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.Textbox" project="dijit" file="form/Textbox.js"><requires><require environment="common" resource="dijit.base.FormElement"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.form.Textbox" type="Function"><summary>A generic textbox field. Serves as a base class to derive more specialized functionality in subclasses.</summary></var><var name="dijit.form.Textbox.trim" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.uppercase" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.lowercase" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.propercase" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.size" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.maxlength" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.digit" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.templatePath" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.getTextValue" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.getValue" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.setTextValue" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.textbox.value" instance="dijit.form.Textbox"/><var name="dijit.form.Textbox.setValue" type="Function" prototype="dijit.form.Textbox"><chains><chain type="call" parent="dijit.form.Textbox.superclass.setValue"/></chains></var><var name="dijit.form.Textbox.format" type="Function" prototype="dijit.form.Textbox"><summary>Replacable function to convert a value to a properly formatted string</summary></var><var name="dijit.form.Textbox.parse" type="Function" prototype="dijit.form.Textbox"><summary>Replacable function to convert a formatted string to a value</summary></var><var name="dijit.form.Textbox.postCreate" type="Function" prototype="dijit.form.Textbox"><chains><chain type="call" parent="dijit.form.Textbox.superclass.postCreate"/></chains></var><var name="dijit.form.Textbox.nodeWithBorder" instance="dijit.form.Textbox"/><var name="dijit.form.Textbox.filter" type="Function" prototype="dijit.form.Textbox"><summary>Apply various filters to textbox value</summary></var><var name="dijit.form.Textbox.focus" type="Function" prototype="dijit.form.Textbox"><summary>if the widget wants focus, then focus the textbox</summary></var><var name="dijit.form.Textbox.onfocus" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.onblur" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form.Textbox.onkeyup" type="Function" prototype="dijit.form.Textbox"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.ValidationTextbox" project="dijit" file="form/ValidationTextbox.js"><requires><require environment="common" resource="dojo.i18n"/><require environment="common" resource="dijit.util.wai"/><require environment="common" resource="dijit.form.Textbox"/><require environment="common" resource="dijit.Tooltip"/></requires><vars><var name="dijit.form.ValidationTextbox" type="Function"><summary>A subclass of Textbox. Over-ride isValid in subclasses to perform specific kinds of validation.</summary><chains><chain type="prototype" parent="dijit.form.Textbox"/><chain type="call" parent="dijit.form.Textbox"/></chains></var><var name="dijit.form.ValidationTextbox.required" prototype="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.promptMessage" type="String" prototype="dijit.form.ValidationTextbox"><summary>Hint string</summary></var><var name="dijit.form.ValidationTextbox.invalidMessage" type="String" prototype="dijit.form.ValidationTextbox"><summary>The message to display if value is invalid.</summary></var><var name="dijit.form.ValidationTextbox.listenOnKeyPress" type="Boolean" prototype="dijit.form.ValidationTextbox"><summary>Updates messages on each key press. Default is true. constraints: Object user-defined object needed to pass parameters to the validator functions</summary></var><var name="dijit.form.ValidationTextbox.regExp" type="String" prototype="dijit.form.ValidationTextbox" instance="dijit.form.ValidationTextbox"><summary>regular expression string used to validate the input Do not specify both regExp and regExpGen regExpGen: Function user replaceable function used to generate regExp when dependent on constraints Do not specify both regExp and regExpGen currently displayed message</summary></var><var name="dijit.form.ValidationTextbox._message" prototype="dijit.form.ValidationTextbox" instance="dijit.form.ValidationTextbox" private="1"/><var name="dijit.form.ValidationTextbox.regExpGen" type="Function" prototype="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.setValue" type="Function" prototype="dijit.form.ValidationTextbox"><chains><chain type="call" parent="dijit.form.ValidationTextbox.superclass.setValue"/></chains></var><var name="dijit.form.ValidationTextbox.validator" type="Function" prototype="dijit.form.ValidationTextbox"><summary>user replaceable function used to validate the text input against the regular expression.</summary></var><var name="dijit.form.ValidationTextbox.isValid" type="Function" prototype="dijit.form.ValidationTextbox"><summary>Need to over-ride with your own validation code in subclasses</summary></var><var name="dijit.form.ValidationTextbox.isEmpty" returns="Boolean" type="Function" prototype="dijit.form.ValidationTextbox"><summary>Checks for whitespace</summary></var><var name="dijit.form.ValidationTextbox.isMissing" returns="Boolean" type="Function" prototype="dijit.form.ValidationTextbox"><summary>Checks to see if value is required and is whitespace</summary></var><var name="dijit.form.ValidationTextbox.getErrorMessage" type="Function" prototype="dijit.form.ValidationTextbox"><summary>return an error message to show if appropriate</summary></var><var name="dijit.form.ValidationTextbox.getPromptMessage" type="Function" prototype="dijit.form.ValidationTextbox"><summary>return a hint to show if appropriate</summary></var><var name="dijit.form.ValidationTextbox.validate" type="Function" prototype="dijit.form.ValidationTextbox"><summary>Called by oninit, onblur, and onkeypress.</summary><description>Show missing or invalid messages if appropriate, and highlight textbox field.</description></var><var name="dijit.form.ValidationTextbox._displayMessage" type="Function" prototype="dijit.form.ValidationTextbox" private="1"/><var name="dijit.form.ValidationTextbox.updateClass" type="Function" prototype="dijit.form.ValidationTextbox"><summary>used to ensure that only 1 validation class is set at a time</summary></var><var name="dijit.form.ValidationTextbox.onfocus" type="Function" prototype="dijit.form.ValidationTextbox"><chains><chain type="call" parent="dijit.form.ValidationTextbox.superclass.onfocus"/></chains></var><var name="dijit.form.ValidationTextbox.onkeyup" type="Function" prototype="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.postMixInProperties" type="Function" prototype="dijit.form.ValidationTextbox"><chains><chain type="call" parent="dijit.form.ValidationTextbox.superclass.postMixInProperties"/></chains></var><var name="dijit.form.ValidationTextbox.constraints" instance="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.messages" instance="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.value" instance="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.postCreate" type="Function" prototype="dijit.form.ValidationTextbox"><chains><chain type="call" parent="dijit.form.ValidationTextbox.superclass.postCreate"/><chain type="call" parent="this.isValid"/><chain type="call" parent="this.isMissing"/></chains></var><var name="dijit.form.ValidationTextbox.textbox.isValid" instance="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.textbox.isMissing" instance="dijit.form.ValidationTextbox"/><var name="dijit.form.ValidationTextbox.postCreate.textbox.isValid" type="Function" instance="dijit.form.ValidationTextbox.postCreate"><chains><chain type="call" parent="this.isValid"/></chains></var><var name="dijit.form.ValidationTextbox.postCreate.textbox.isMissing" type="Function" instance="dijit.form.ValidationTextbox.postCreate"><chains><chain type="call" parent="this.isMissing"/></chains></var><var name="dijit.form.SerializableTextbox" type="Function"><summary>A subclass of ValidationTextbox. Provides a hidden input field and a serialize method to override</summary><chains><chain type="prototype" parent="dijit.form.ValidationTextbox"/><chain type="call" parent="dijit.form.ValidationTextbox"/></chains></var><var name="dijit.form.SerializableTextbox.serialize" type="Function" prototype="dijit.form.SerializableTextbox"><summary>user replaceable function used to convert the getValue() result to a String</summary></var><var name="dijit.form.SerializableTextbox.toString" type="Function" prototype="dijit.form.SerializableTextbox"><summary>display the widget as a printable string using the widget's value</summary></var><var name="dijit.form.SerializableTextbox.validate" type="Function" prototype="dijit.form.SerializableTextbox"><chains><chain type="call" parent="dijit.form.SerializableTextbox.superclass.validate"/></chains></var><var name="dijit.form.SerializableTextbox.valueNode.value" instance="dijit.form.SerializableTextbox"/><var name="dijit.form.SerializableTextbox.postCreate" type="Function" prototype="dijit.form.SerializableTextbox"><chains><chain type="call" parent="dijit.form.SerializableTextbox.superclass.postCreate"/></chains></var><var name="dijit.form.SerializableTextbox.valueNode" instance="dijit.form.SerializableTextbox"/><var name="dijit.form.RangeBoundTextbox" type="Function"><summary>A subclass of SerializableTextbox. Tests for a value out-of-range</summary><chains><chain type="prototype" parent="dijit.form.SerializableTextbox"/><chain type="call" parent="dijit.form.SerializableTextbox"/></chains></var><var name="dijit.form.RangeBoundTextbox.min" prototype="dijit.form.RangeBoundTextbox"/><var name="dijit.form.RangeBoundTextbox.max" type="Number" prototype="dijit.form.RangeBoundTextbox"><summary>Maximum signed value. Default is +Infinity</summary></var><var name="dijit.form.RangeBoundTextbox.rangeMessage" prototype="dijit.form.RangeBoundTextbox" instance="dijit.form.RangeBoundTextbox"/><var name="dijit.form.RangeBoundTextbox.compare" type="Function" prototype="dijit.form.RangeBoundTextbox"><summary>compare 2 values</summary></var><var name="dijit.form.RangeBoundTextbox.rangeCheck" type="Function" prototype="dijit.form.RangeBoundTextbox"><summary>user replaceable function used to validate the range of the numeric input value</summary></var><var name="dijit.form.RangeBoundTextbox.isInRange" type="Function" prototype="dijit.form.RangeBoundTextbox"><summary>Need to over-ride with your own validation code in subclasses</summary></var><var name="dijit.form.RangeBoundTextbox.isValid" type="Function" prototype="dijit.form.RangeBoundTextbox"><chains><chain type="call" parent="dijit.form.RangeBoundTextbox.superclass.isValid"/></chains></var><var name="dijit.form.RangeBoundTextbox.getErrorMessage" type="Function" prototype="dijit.form.RangeBoundTextbox"><chains><chain type="call" parent="dijit.form.RangeBoundTextbox.superclass.isValid"/><chain type="call" parent="dijit.form.RangeBoundTextbox.superclass.getErrorMessage"/></chains></var><var name="dijit.form.RangeBoundTextbox.postMixInProperties" type="Function" prototype="dijit.form.RangeBoundTextbox"><chains><chain type="call" parent="dijit.form.RangeBoundTextbox.superclass.postMixInProperties"/></chains></var><var name="dijit.form.RangeBoundTextbox.messages" instance="dijit.form.RangeBoundTextbox"/><var name="dijit.form.RangeBoundTextbox.postCreate" type="Function" prototype="dijit.form.RangeBoundTextbox"><chains><chain type="call" parent="dijit.form.RangeBoundTextbox.superclass.postCreate"/></chains></var><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form._DropDownTextBox" project="dijit" file="form/_DropDownTextBox.js"><requires><require environment="common" resource="dijit.util.PopupManager"/><require environment="common" resource="dijit.util.wai"/><require environment="common" resource="dijit.base.Widget"/></requires><vars><var name="dijit.form._DropDownTextBox" type="Function" private="1"><summary>Text box with drop down link to the master popup widget the actual node to pop up how many items to display</summary></var><var name="dijit.form._DropDownTextBox.templatePath" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox.popupWidget" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox.optionsListNode" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox.visibleCount" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox.postCreate" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox._openResultList" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox.onblur" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox.onkeypress" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox._arrowPressed" type="Function" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox._arrowIdle" type="Function" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox.arrowClicked" type="Function" prototype="dijit.form._DropDownTextBox"><summary>callback when arrow is clicked</summary></var><var name="dijit.form._DropDownTextBox._clearResultList" type="Function" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox.optionsListNode.innerHTML" instance="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox._hideResultList" type="Function" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox.focus" type="Function" prototype="dijit.form._DropDownTextBox"/><var name="dijit.form._DropDownTextBox._showResultList" type="Function" prototype="dijit.form._DropDownTextBox" private="1"/><var name="dijit.form._DropDownTextBox.Popup" type="Function"><summary>prevents onBlur timers from accidentally closing another widget's popup, or upsetting PopupManager</summary><chains><chain type="prototype" parent="dijit.base.Widget"/><chain type="call" parent="dijit.base.Widget"/></chains></var><var name="dijit.form._DropDownTextBox.Popup.isShowingNow" prototype="dijit.form._DropDownTextBox.Popup"/><var name="dijit.form._DropDownTextBox.Popup.aroundWidget" prototype="dijit.form._DropDownTextBox.Popup"/><var name="dijit.form._DropDownTextBox.Popup.open" prototype="dijit.form._DropDownTextBox.Popup"/><var name="dijit.form._DropDownTextBox.Popup._open" prototype="dijit.form._DropDownTextBox.Popup" private="1"/><var name="dijit.form._DropDownTextBox.Popup.close" prototype="dijit.form._DropDownTextBox.Popup"/><var name="dijit.form._DropDownTextBox.Popup.processKey" prototype="dijit.form._DropDownTextBox.Popup"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form._Spinner" project="dijit" file="form/_Spinner.js"><requires><require environment="common" resource="dijit.form.ValidationTextbox"/><require environment="common" resource="dijit.util.typematic"/><require environment="common" resource="dijit.util.sniff"/></requires><vars><var name="dijit.form._Spinner" type="Function" private="1"><summary>Mixin for validation widgets with a spinner</summary><description>This class basically (conceptually) extends dijit.form.ValidationTextbox. It modifies the template to have up/down arrows, and provides related handling code.</description><chains><chain type="prototype" parent="dijit.form.RangeBoundTextbox"/><chain type="call" parent="dijit.form.RangeBoundTextbox"/></chains></var><var name="dijit.form._Spinner.defaultTimeout" prototype="dijit.form._Spinner"/><var name="dijit.form._Spinner.timeoutChangeRate" prototype="dijit.form._Spinner"/><var name="dijit.form._Spinner.smallDelta" prototype="dijit.form._Spinner"/><var name="dijit.form._Spinner.largeDelta" type="Number" prototype="dijit.form._Spinner"><summary>adjust the value by this much when spinning using the PgUp/Dn keys</summary></var><var name="dijit.form._Spinner.templatePath" prototype="dijit.form._Spinner"/><var name="dijit.form._Spinner._wheelTimer" prototype="dijit.form._Spinner" instance="dijit.form._Spinner" private="1"/><var name="dijit.form._Spinner.adjust" type="Function" prototype="dijit.form._Spinner"><summary>user replaceable function used to adjust a primitive value(Number/Date/...) by the delta amount specified the val is adjusted in a way that makes sense to the object type</summary></var><var name="dijit.form._Spinner._arrowPressed" type="Function" prototype="dijit.form._Spinner" private="1"/><var name="dijit.form._Spinner._arrowReleased" type="Function" prototype="dijit.form._Spinner" private="1"/><var name="dijit.form._Spinner._typematicCallback" type="Function" prototype="dijit.form._Spinner" private="1"/><var name="dijit.form._Spinner._mouseWheeled" type="Function" prototype="dijit.form._Spinner" private="1"/><var name="dijit.form._Spinner.postCreate" type="Function" prototype="dijit.form._Spinner"><chains><chain type="call" parent="dijit.form._Spinner.superclass.postCreate"/></chains></var><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.de.validate" project="dijit" file="form/nls/de/validate.js"><vars><var name="dijit.form.nls.de.validate" type="Object"/><var name="dijit.form.nls.de" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.fr.validate" project="dijit" file="form/nls/fr/validate.js"><vars><var name="dijit.form.nls.fr.validate" type="Object"/><var name="dijit.form.nls.fr" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.it.validate" project="dijit" file="form/nls/it/validate.js"><vars><var name="dijit.form.nls.it.validate" type="Object"/><var name="dijit.form.nls.it" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.ja.validate" project="dijit" file="form/nls/ja/validate.js"><vars><var name="dijit.form.nls.ja.validate" type="Object"/><var name="dijit.form.nls.ja" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.validate" project="dijit" file="form/nls/validate.js"><vars><var name="dijit.form.nls.validate" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.form.nls.zh-cn.validate" project="dijit" file="form/nls/zh-cn/validate.js"><vars><var name="dijit.form.nls.zh-cn.validate" type="Object"/><var name="dijit.form.nls.zh-cn" type="Object"/><var name="dijit.form.nls" type="Object"/><var name="dijit.form" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.AccordionContainer" project="dijit" file="layout/AccordionContainer.js"><requires><require environment="common" resource="dojo.fx"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Layout"/><require environment="common" resource="dijit.base.Showable"/><require environment="common" resource="dijit.layout.PageContainer"/><require environment="common" resource="dijit.util.BackgroundIframe"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.layout.AccordionContainer" type="Function"><summary>Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time, and switching between panes is visualized by sliding the other panes up/down.</summary></var><var name="dijit.layout.AccordionContainer.labelNodeClass" type="String" prototype="dijit.layout.AccordionContainer"><summary>CSS class name for dom node w/the title</summary></var><var name="dijit.layout.AccordionContainer.containerNodeClass" type="String" prototype="dijit.layout.AccordionContainer"><summary>CSS class name for dom node holding the content</summary></var><var name="dijit.layout.AccordionContainer.duration" prototype="dijit.layout.AccordionContainer"/><var name="dijit.layout.AccordionContainer.postCreate" type="Function" prototype="dijit.layout.AccordionContainer"><chains><chain type="call" parent="dijit.layout.AccordionContainer.superclass.postCreate"/></chains></var><var name="dijit.layout.AccordionContainer.addChild" returns="Widget" type="Function" prototype="dijit.layout.AccordionContainer"/><var name="dijit.layout.AccordionContainer._addChild" returns="Widget" type="Function" prototype="dijit.layout.AccordionContainer" private="1"><summary>Internal call to add child, used during postCreate() and by the real addChild() call</summary></var><var name="dijit.layout.AccordionContainer.layout" returns="int" type="Function" prototype="dijit.layout.AccordionContainer"/><var name="dijit.layout.AccordionContainer.removeChild" type="Function" prototype="dijit.layout.AccordionContainer"><chains><chain type="call" parent="dijit.layout.AccordionContainer.superclass.removeChild"/></chains></var><var name="dijit.layout.AccordionContainer.onResized" type="Function" prototype="dijit.layout.AccordionContainer"/><var name="dijit.layout.AccordionContainer._setSizes" type="Function" prototype="dijit.layout.AccordionContainer" private="1"><summary>Set panes' size/position based on my size, and the current open node.</summary></var><var name="dijit.layout.AccordionContainer.selectChild" type="Function" prototype="dijit.layout.AccordionContainer"><summary>close the current page and select a new one</summary></var><var name="dijit.layout.AccordionPane" type="Function"><summary>AccordionPane is a box with a title that contains another widget (often a ContentPane). It's a widget used internally by AccordionContainer.</summary></var><var name="dijit.layout.AccordionPane.label" type="to" prototype="dijit.layout.AccordionPane"><summary>print on top of AccordionPane</summary></var><var name="dijit.layout.AccordionPane.class" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.labelNodeClass" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.containerNodeClass" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.selected" type="Boolean" prototype="dijit.layout.AccordionPane" instance="dijit.layout.AccordionPane"><summary>if true, this is the open pane</summary></var><var name="dijit.layout.AccordionPane.templatePath" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.postCreate" type="Function" prototype="dijit.layout.AccordionPane"><chains><chain type="call" parent="dijit.layout.AccordionPane.superclass.postCreate"/></chains></var><var name="dijit.layout.AccordionPane.bgIframe" instance="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.setLabel" type="Function" prototype="dijit.layout.AccordionPane"><summary>set the title of the node</summary></var><var name="dijit.layout.AccordionPane.labelNode.innerHTML" instance="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.onResized" type="Function" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout.AccordionPane.getLabelHeight" returns="Integer" type="Function" prototype="dijit.layout.AccordionPane"><summary>returns the height of the title dom node</summary></var><var name="dijit.layout.AccordionPane.onLabelClick" type="Function" prototype="dijit.layout.AccordionPane"><summary>callback when someone clicks my label</summary></var><var name="dijit.layout.AccordionPane.setSelected" type="Function" prototype="dijit.layout.AccordionPane"/><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.ContentPane" project="dijit" file="layout/ContentPane.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Showable"/><require environment="common" resource="dijit.base.Layout"/></requires><vars><var name="dijit.layout.ContentPane" type="Function"/><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.LayoutContainer" project="dijit" file="layout/LayoutContainer.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Showable"/><require environment="common" resource="dijit.base.Layout"/></requires><vars><var name="dijit.layout.LayoutContainer" type="Function"><summary>Provides Delphi-style panel layout semantics. details A LayoutContainer is a box with a specified size (like style="width: 500px; height: 500px;"), that contains children widgets marked with "layoutAlign" of "left", "right", "bottom", "top", and "client". It takes it's children marked as left/top/bottom/right, and lays them out along the edges of the box, and then it takes the child marked "client" and puts it into the remaining space in the middle. Left/right positioning is similar to CSS's "float: left" and "float: right", and top/bottom positioning would be similar to "float: top" and "float: bottom", if there were such CSS. Note that there can only be one client element, but there can be multiple left, right, top, or bottom elements. usage &lt;style&gt; html, body{ height: 100%; width: 100%; } &lt;/style&gt; &lt;div dojoType="LayoutContainer" style="width: 100%; height: 100%"&gt; &lt;div dojoType="ContentPane" layoutAlign="top"&gt;header text&lt;/div&gt; &lt;div dojoType="ContentPane" layoutAlign="left" style="width: 200px;"&gt;table of contents&lt;/div&gt; &lt;div dojoType="ContentPane" layoutAlign="client"&gt;client area&lt;/div&gt; &lt;/div&gt;</summary></var><var name="dijit.layout.LayoutContainer.layoutChildPriority" prototype="dijit.layout.LayoutContainer"/><var name="dijit.layout.LayoutContainer.layout" type="Function" prototype="dijit.layout.LayoutContainer"/><var name="dijit.layout.LayoutContainer.addChild" type="Function" prototype="dijit.layout.LayoutContainer"><chains><chain type="call" parent="dijit.base.Container.prototype.addChild"/></chains></var><var name="dijit.layout.LayoutContainer.removeChild" type="Function" prototype="dijit.layout.LayoutContainer"><chains><chain type="call" parent="dijit.base.Container.prototype.removeChild"/></chains></var><var name="dijit.layout.LayoutContainer.onResized" type="Function" prototype="dijit.layout.LayoutContainer"/><var name="dijit.layout.LayoutContainer.show" type="Function" prototype="dijit.layout.LayoutContainer"><chains><chain type="call" parent="dijit.base.Showable.prototype.show"/></chains></var><var name="dijit.layout.LayoutContainer.domNode.style.display" instance="dijit.layout.LayoutContainer"/><var name="dijit.layout.LayoutContainer.domNode.style.visibility" instance="dijit.layout.LayoutContainer"/><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.LinkPane" project="dijit" file="layout/LinkPane.js"><requires><require environment="common" resource="dijit.layout.ContentPane"/><require environment="common" resource="dijit.base.TemplatedWidget"/></requires><vars><var name="dijit.layout.LinkPane" type="Function"><summary>LinkPane is just a ContentPane that loads data remotely (via the href attribute), and has markup similar to an anchor. The anchor's body (the words between &lt;a&gt; and &lt;/a&gt;) become the label of the widget (used for TabContainer, AccordionContainer, etc.) usage &lt;a href="foo.html"&gt;my label&lt;/a&gt;</summary></var><var name="dijit.layout.LinkPane.templateString" prototype="dijit.layout.LinkPane"/><var name="dijit.layout.LinkPane.postCreate" type="Function" prototype="dijit.layout.LinkPane"><chains><chain type="call" parent="dijit.layout.LinkPane.superclass.postCreate"/></chains></var><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.PageContainer" project="dijit" file="layout/PageContainer.js"><requires><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.base.Container"/><require environment="common" resource="dijit.base.Showable"/></requires><vars><var name="dijit.layout.PageContainer" type="Function"/><var name="dijit.layout.PageController" type="Function"><summary>Set of buttons to select a page in a page list. Monitors the specified PageContainer, and whenever a page is added, deleted, or selected, updates itself accordingly.</summary></var><var name="dijit.layout.PageController.templateString" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.containerId" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.buttonWidget" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.class" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.postCreate" type="Function" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.pane2button" instance="dijit.layout.PageController"/><var name="dijit.layout.PageController.layout" type="Function" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.destroy" type="Function" prototype="dijit.layout.PageController"><chains><chain type="call" parent="dijit.layout.PageController.superclass.destroy"/></chains></var><var name="dijit.layout.PageController.onAddChild" type="Function" prototype="dijit.layout.PageController"><summary>Called whenever a page is added to the container. Create button corresponding to the page. add a node that will be promoted to the button widget</summary></var><var name="dijit.layout.PageController.onRemoveChild" type="Function" prototype="dijit.layout.PageController"><summary>Called whenever a page is removed from the container. Remove the button corresponding to the page.</summary></var><var name="dijit.layout.PageController._currentChild" instance="dijit.layout.PageController" private="1"/><var name="dijit.layout.PageController.onSelectChild" type="Function" prototype="dijit.layout.PageController"/><var name="dijit.layout.PageController.onButtonClick" type="Function" prototype="dijit.layout.PageController"><summary>Called whenever one of my child buttons is pressed in an attempt to select a page</summary></var><var name="dijit.layout.PageController.onCloseButtonClick" type="Function" prototype="dijit.layout.PageController"><summary>Called whenever one of my child buttons [X] is pressed in an attempt to close a page</summary></var><var name="dijit.layout.PageController.onkeypress" type="Function" prototype="dijit.layout.PageController"><summary>Handle keystrokes on the page list, for advancing to next/previous button</summary></var><var name="dijit.layout.PageButton" type="Function"><summary>Internal widget used by PageList. The button-like or tab-like object you click to select or delete a page</summary></var><var name="dijit.layout.PageButton.templateString" prototype="dijit.layout.PageButton"/><var name="dijit.layout.PageButton.label" prototype="dijit.layout.PageButton"/><var name="dijit.layout.PageButton.closeButton" type="Boolean" prototype="dijit.layout.PageButton"><summary>true iff we should also print a close icon to destroy corresponding page</summary></var><var name="dijit.layout.PageButton.onClick" type="Function" prototype="dijit.layout.PageButton"><summary>Basically this is the attach point PageController listens to, to select the page</summary></var><var name="dijit.layout.PageButton.onCloseButtonMouseOver" type="Function" prototype="dijit.layout.PageButton"><summary>The close button changes color a bit when you mouse over</summary></var><var name="dijit.layout.PageButton.onCloseButtonMouseOut" type="Function" prototype="dijit.layout.PageButton"><summary>Revert close button to normal color on mouse out</summary></var><var name="dijit.layout.PageButton.onCloseButtonClick" type="Function" prototype="dijit.layout.PageButton"><summary>Handle clicking the close button for this tab</summary></var><var name="dijit.layout.PageButton.setSelected" type="Function" prototype="dijit.layout.PageButton"><summary>This is run whenever the page corresponding to this button has been selected</summary></var><var name="dijit.layout.PageButton.clearSelected" type="Function" prototype="dijit.layout.PageButton"><summary>This function is run whenever the page corresponding to this button has been deselected (and another page has been shown)</summary></var><var name="dijit.layout.PageButton.focus" type="Function" prototype="dijit.layout.PageButton"><summary>This will focus on the this button (for accessibility you need to do this when the button is selected)</summary></var><var name="dijit.base.Widget.onClose" type="Function"><summary>Callback if someone tries to close the child, child will be closed if func returns true</summary></var><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.SplitContainer" project="dijit" file="layout/SplitContainer.js"><requires><require environment="common" resource="dojo.cookie"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.Showable"/><require environment="common" resource="dijit.base.Layout"/></requires><vars><var name="dijit.layout.SplitContainer" type="Function"><summary>Contains multiple children widgets, all of which are displayed side by side (either horizontally or vertically); there's a bar between each of the children, and you can adjust the relative size of each child by dragging the bars. You must specify a size (width and height) for the SplitContainer. sizerWidget: Integer Size in pixels of the bar between each child</summary></var><var name="dijit.layout.SplitContainer.activeSizing" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.sizerWidth" prototype="dijit.layout.SplitContainer" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.orientation" type="String" prototype="dijit.layout.SplitContainer"><summary>either 'horizontal' or vertical; indicates whether the children are arranged side-by-side or up/down.</summary></var><var name="dijit.layout.SplitContainer.persist" type="Boolean" prototype="dijit.layout.SplitContainer"><summary>Save splitter positions in a cookie</summary></var><var name="dijit.layout.SplitContainer.postMixInProperties" type="Function" prototype="dijit.layout.SplitContainer"><chains><chain type="call" parent="dijit.layout.SplitContainer.superclass.postMixInProperties"/></chains></var><var name="dijit.layout.SplitContainer.isHorizontal" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.onResized" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneWidth" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneHeight" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.postCreate" type="Function" prototype="dijit.layout.SplitContainer"><chains><chain type="call" parent="dijit.layout.SplitContainer.superclass.postCreate"/></chains></var><var name="dijit.layout.SplitContainer.sizers" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.domNode.style.overflow" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.virtualSizer" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.virtualSizer.style.position" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.virtualSizer.style.zIndex" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.virtualSizer.className" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.layout" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer._injectChild" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._addSizer" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer.removeChild" type="Function" prototype="dijit.layout.SplitContainer"><chains><chain type="call" parent="dijit.base.Container.prototype.removeChild"/></chains></var><var name="dijit.layout.SplitContainer.sizers.length" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.addChild" type="Function" prototype="dijit.layout.SplitContainer"><chains><chain type="call" parent="dijit.base.Container.prototype.addChild"/></chains></var><var name="dijit.layout.SplitContainer._layoutPanels" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._movePanel" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._moveSlider" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._growPane" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._checkSizes" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer.beginSizing" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneBefore" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneAfter" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.isSizing" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.sizingSplitter" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.cover" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.cover.style.zIndex" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.sizingSplitter.style.zIndex" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.originPos" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.startPoint" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.screenToClientOffset" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.dragOffset" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.changeSizing" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.lastPoint" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.endSizing" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.movePoint" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.legaliseSplitPoint" type="Function" prototype="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.isDraggingLeft" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer._updateSize" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer.paneBefore.sizeActual" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneAfter.position" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.paneAfter.sizeActual" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer._showSizingLine" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer.virtualSizer.style.display" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer._hideSizingLine" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._moveSizingLine" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer.virtualSizer.style.left" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer.virtualSizer.style.top" instance="dijit.layout.SplitContainer"/><var name="dijit.layout.SplitContainer._getCookieName" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._restoreState" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout.SplitContainer._saveState" type="Function" prototype="dijit.layout.SplitContainer" private="1"/><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.layout.TabContainer" project="dijit" file="layout/TabContainer.js"><requires><require environment="common" resource="dijit.layout.PageContainer"/><require environment="common" resource="dijit.base.Layout"/></requires><vars><var name="dijit.layout.TabContainer" type="Function"><summary>A TabContainer is a container that has multiple panes, but shows only one pane at a time. There are a set of tabs corresponding to each pane, where each tab has the title (aka label) of the pane, and optionally a close button. Publishes topics &lt;widgetId&gt;-addChild, &lt;widgetId&gt;-removeChild, and &lt;widgetId&gt;-selectChild (where &lt;widgetId&gt; is the id of the TabContainer itself.</summary></var><var name="dijit.layout.TabContainer.labelPosition" prototype="dijit.layout.TabContainer"/><var name="dijit.layout.TabContainer.closeButton" type="String" prototype="dijit.layout.TabContainer" instance="dijit.layout.TabContainer"><summary>If closebutton=="tab", then every tab gets a close button. DEPRECATED: Should just say closable=true on each pane you want to be closable. override setting in PageContainer</summary></var><var name="dijit.layout.TabContainer.templateString" prototype="dijit.layout.TabContainer"/><var name="dijit.layout.TabContainer.templatePath" prototype="dijit.layout.TabContainer"/><var name="dijit.layout.TabContainer.postCreate" type="Function" prototype="dijit.layout.TabContainer"><chains><chain type="call" parent="dijit.layout.TabContainer.superclass.postCreate"/></chains></var><var name="dijit.layout.TabContainer.tablist" instance="dijit.layout.TabContainer"/><var name="dijit.layout.TabContainer.layout" type="Function" prototype="dijit.layout.TabContainer"><chains><chain type="call" parent="dijit.layout.TabContainer.superclass.layout"/></chains></var><var name="dijit.layout.TabContainer._setupChild" type="Function" prototype="dijit.layout.TabContainer" private="1"><chains><chain type="call" parent="dijit.layout.TabContainer.superclass._setupChild"/></chains></var><var name="dijit.layout.TabContainer.onResized" type="Function" prototype="dijit.layout.TabContainer"/><var name="dijit.layout.TabContainer.onkeypress" type="Function" prototype="dijit.layout.TabContainer"><summary>Keystroke handling for keystrokes on the tab panel itself (that were bubbled up to me) Ctrl-up: focus is returned from the pane to the tab button Alt-del: close tab</summary></var><var name="dijit.layout.TabContainer.destroy" type="Function" prototype="dijit.layout.TabContainer"><chains><chain type="call" parent="dijit.layout.TabContainer.superclass.destroy"/></chains></var><var name="dijit.layout.TabController" type="Function"><summary>Set of tabs (the things with labels and a close button, that you click to show a tab panel). Lets the user select the currently shown pane in a TabContainer or PageContainer. TabController also monitors the TabContainer, and whenever a pane is added or deleted updates itself accordingly.</summary><chains><chain type="prototype" parent="dijit.layout.PageController"/><chain type="call" parent="dijit.layout.PageController"/></chains></var><var name="dijit.layout.TabController.templateString" prototype="dijit.layout.TabController"/><var name="dijit.layout.TabController.labelPosition" prototype="dijit.layout.TabController"/><var name="dijit.layout.TabController.doLayout" prototype="dijit.layout.TabController"/><var name="dijit.layout.TabController.class" prototype="dijit.layout.TabController"/><var name="dijit.layout.TabController.buttonWidget" prototype="dijit.layout.TabController"/><var name="dijit.layout.TabController.postMixInProperties" type="Function" prototype="dijit.layout.TabController"><chains><chain type="call" parent="dijit.layout.TabController.superclass.postMixInProperties"/></chains></var><var name="dijit.layout.TabButton" type="Function"><summary>A tab (the thing you click to select a pane). Contains the title (aka label) of the pane, and optionally a close-button to destroy the pane. This is an internal widget and should not be instantiated directly.</summary><chains><chain type="prototype" parent="dijit.layout.PageButton"/><chain type="call" parent="dijit.layout.PageButton"/></chains></var><var name="dijit.layout.TabButton.templateString" prototype="dijit.layout.TabButton"/><var name="dijit.layout.TabButton.postMixInProperties" type="Function" prototype="dijit.layout.TabButton"><chains><chain type="call" parent="dijit.layout.TabButton.superclass.postMixInProperties"/></chains></var><var name="dijit.layout.TabButton.closeButtonStyle" instance="dijit.layout.TabButton"/><var name="dijit.layout.TabButton.postCreate" type="Function" prototype="dijit.layout.TabButton"><chains><chain type="call" parent="dijit.layout.TabButton.superclass.postCreate"/></chains></var><var name="dijit.layout.TabButton.onCloseButtonClick" type="Function" prototype="dijit.layout.TabButton"><chains><chain type="call" parent="dijit.layout.TabButton.superclass.onCloseButtonClick"/></chains></var><var name="dijit.a11y.TabButton" type="Function"><summary>Tab for display in high-contrast mode (where background images don't show up). This is an internal widget and shouldn't be instantiated directly.</summary><chains><chain type="prototype" parent="dijit.layout.TabButton"/><chain type="call" parent="dijit.layout.TabButton"/></chains></var><var name="dijit.a11y.TabButton.imgPath" prototype="dijit.a11y.TabButton"/><var name="dijit.a11y.TabButton.templateString" prototype="dijit.a11y.TabButton"/><var name="dijit.layout" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.nls.common" project="dijit" file="nls/common.js"><vars><var name="dijit.nls.common" type="Object"/><var name="dijit.nls" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.nls.de.common" project="dijit" file="nls/de/common.js"><vars><var name="dijit.nls.de.common" type="Object"/><var name="dijit.nls.de" type="Object"/><var name="dijit.nls" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.tests.module" project="dijit" file="tests/module.js"><requires><require environment="common" resource="dijit.tests.widgetsInTemplate"/></requires><vars><var name="dijit.tests.module" type="Object"/><var name="dijit.tests" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.tests.widgetsInTemplate" project="dijit" file="tests/widgetsInTemplate.js"><vars><var name="dijit.tests.widgetsInTemplate" type="Object"/><var name="dijit.tests" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.BackgroundIframe" project="dijit" file="util/BackgroundIframe.js"><vars><var name="dijit.util.BackgroundIframe" type="Function"><summary>For IE z-index schenanigans Two possible uses: 1. new dijit.util.BackgroundIframe(node) Makes a background iframe as a child of node, that fills area (and position) of node 2. new dijit.util.BackgroundIframe() Attaches frame to dojo.body(). User must call size() to set size.</summary></var><var name="dijit.util.BackgroundIframe.iframe" instance="dijit.util.BackgroundIframe"/><var name="dijit.util.BackgroundIframe.iframe.tabIndex" instance="dijit.util.BackgroundIframe"/><var name="dijit.util.BackgroundIframe.domNode" instance="dijit.util.BackgroundIframe"/><var name="dijit.util.BackgroundIframe.iframe.style.display" instance="dijit.util.BackgroundIframe"/><var name="dijit.util.BackgroundIframe.onResized" type="Function"><summary>Resize event handler.</summary></var><var name="dijit.util.BackgroundIframe.onResized.iframe.style.width" instance="dijit.util.BackgroundIframe.onResized"/><var name="dijit.util.BackgroundIframe.onResized.iframe.style.height" instance="dijit.util.BackgroundIframe.onResized"/><var name="dijit.util.BackgroundIframe.size" type="Function"><summary>Call this function if the iframe is connected to dojo.body() rather than the node being shadowed</summary></var><var name="dijit.util.BackgroundIframe.setZIndex" type="Function"><summary>Sets the z-index of the background iframe</summary></var><var name="dijit.util.BackgroundIframe.setZIndex.iframe.style.zIndex" instance="dijit.util.BackgroundIframe.setZIndex"/><var name="dijit.util.BackgroundIframe.show" type="Function"><summary>show the iframe</summary></var><var name="dijit.util.BackgroundIframe.show.iframe.style.display" instance="dijit.util.BackgroundIframe.show"/><var name="dijit.util.BackgroundIframe.hide" type="Function"><summary>hide the iframe</summary></var><var name="dijit.util.BackgroundIframe.hide.iframe.style.display" instance="dijit.util.BackgroundIframe.hide"/><var name="dijit.util.BackgroundIframe.remove" type="Function"><summary>remove the iframe</summary></var><var name="dijit.util.BackgroundIframe.remove.iframe" instance="dijit.util.BackgroundIframe.remove"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.FocusManager" project="dijit" file="util/FocusManager.js"><vars><var name="dijit.util.FocusManager" returns="boolean" type="Function" initialized="1"><summary>This class is used to save the current focus / selection on the screen, and restore it later. It's typically used for popups (menus and dialogs), but can also be used for a menubar or toolbar. (For example, in the editor the user might type Ctrl-T to focus the toolbar, and then when he/she selects a menu choice, focus is returned to the editor window.) Note that it doesn't deal with submenus off of an original menu; From this class's perspective it's all part of one big menu. The widget must implement a close() callback, which will close dialogs or a context menu, and for a menubar, it will close the submenus and remove highlighting classes on the root node.</summary></var><var name="dijit.util.FocusManager.save" returns="boolean" type="Function" instance="dijit.util.FocusManager"><summary>called when a popup appears (either a top level menu or a dialog), or when a toolbar/menubar receives focus</summary></var><var name="dijit.util.FocusManager.restore" type="Function" instance="dijit.util.FocusManager"><summary>notify the manager that menu is closed; it will return focus to where it was before the menu got focus</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.PopupManager" project="dijit" file="util/PopupManager.js"><requires><require environment="common" resource="dijit.util.BackgroundIframe"/><require environment="common" resource="dijit.util.FocusManager"/><require environment="common" resource="dijit.util.place"/><require environment="common" resource="dijit.util.window"/></requires><vars><var name="dijit.util.PopupManager" returns="boolean" type="Function" initialized="1"><summary>This class is used to show/hide popups. The widget must implement a close() callback, which is called when someone clicks somewhere random on the screen. It will hide the [chain of] context menus</summary></var><var name="dijit.util.PopupManager.open" type="Function" instance="dijit.util.PopupManager"><summary>Open the widget at mouse position TODO: if widget has href, attach to onLoaded() and reposition</summary></var><var name="dijit.util.PopupManager.openAround" type="Function" instance="dijit.util.PopupManager"><summary>Open the widget relative to parent widget (typically as a drop down to that widget) TODO: if widget has href attach to onLoaded and reposition</summary></var><var name="dijit.util.PopupManager.close" type="Function" instance="dijit.util.PopupManager"><summary>Close top level popup</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.bidi" project="dijit" file="util/bidi.js"><vars><var name="dijit.util.bidi.isLeftToRight" returns="Boolean" type="Function"><summary>Walks the DOM parent chain looking for a dir attribute to determine direction of text (BiDi) Stops if a value is found and returns true if the attribute is set to "ltr". If none is found, the default direction is left-to-right, so true is returned.</summary></var><var name="dijit.util.bidi" type="Object"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.manager" project="dijit" file="util/manager.js"><vars><var name="dijit.util.manager" type="Function" initialized="1"><summary>manager class for the widgets.</summary></var><var name="dijit.util.manager.getUniqueId" type="Function" instance="dijit.util.manager"><summary>Generates a unique id for a given widgetType</summary></var><var name="dijit.util.manager.add" type="Function" instance="dijit.util.manager"><summary>Adds a widget to the registry</summary></var><var name="dijit.util.manager.remove" type="Function" instance="dijit.util.manager"><summary>Removes a widget from the registry by id, but does not destroy the widget</summary></var><var name="dijit.util.manager.destroyAll" type="Function" instance="dijit.util.manager"><summary>Destroys all the widgets</summary></var><var name="dijit.util.manager.getWidgets" type="Function" instance="dijit.util.manager"><summary>Returns the hash of id-&gt;widget</summary></var><var name="dijit.util.manager.byNode" type="Function" instance="dijit.util.manager"><summary>Returns the widget as referenced by node.?</summary></var><var name="dijit.byId" type="Function"><summary>Returns a widget by its id</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.parser" project="dijit" file="util/parser.js"><requires><require environment="common" resource="dijit.util.manager"/><require environment="common" resource="dojo.date.stamp"/></requires><vars><var name="dijit.util.parser" returns="mixed" type="Function" initialized="1"/><var name="dijit.util.parser.instantiate" type="Function" instance="dijit.util.parser"><summary>Takes array of nodes, and turns them into widgets Calls their layout method to allow them to connect with any children</summary></var><var name="dijit.util.parser.parse" type="Function" instance="dijit.util.parser"/><var name="dijit.util.parser._nameAnonFunc" returns="String" type="Function" private="1"><summary>Creates a reference to anonFuncPtr in thisObj with a completely unique name. The new name is returned as a String. If</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.place" project="dijit" file="util/place.js"><vars><var name="dijit.util.getViewport" returns="object" type="Function"><summary>Returns the dimensions of the viewable area of a browser window</summary></var><var name="dijit.util.getScroll" type="Function"><summary>Returns the scroll position of the document</summary></var><var name="dijit.util.placeOnScreen" returns="mixed" type="Function"><summary>Keeps 'node' in the visible area of the screen while trying to place closest to desiredX, desiredY. The input coordinates are expected to be the desired screen position, not accounting for scrolling. If you already accounted for scrolling, set 'hasScroll' to true. Set padding to either a number or array for [paddingX, paddingY] to put some buffer around the element you want to position. Set which corner(s) you want to bind to, such as placeOnScreen(node, desiredX, desiredY, padding, hasScroll, "TR") placeOnScreen(node, [desiredX, desiredY], padding, hasScroll, ["TR", "BL"]) The desiredX/desiredY will be treated as the topleft(TL)/topright(TR) or BottomLeft(BL)/BottomRight(BR) corner of the node. Each corner is tested and if a perfect match is found, it will be used. Otherwise, it goes through all of the specified corners, and choose the most appropriate one. By default, corner = ['TL']. If tryOnly is set to true, the node will not be moved to the place. NOTE: node is assumed to be absolutely or relatively positioned. Alternate call sig: placeOnScreen(node, [x, y], padding, hasScroll) Examples: placeOnScreen(node, 100, 200) placeOnScreen("myId", [800, 623], 5) placeOnScreen(node, 234, 3284, [2, 5], true)</summary></var><var name="dijit.util.placeOnScreenAroundElement" returns="object" type="Function"><summary>Like placeOnScreen, except it accepts aroundNode instead of x,y and attempts to place node around it. Uses margin box dimensions.</summary></var><var name="dijit.util.place" type="Object"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.scroll" project="dijit" file="util/scroll.js"><vars><var name="dijit.util.scroll.scrollIntoView" type="Function"><summary>Scroll the passed node into view, if it is not.</summary></var><var name="dijit.util.scroll" type="Object"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.sniff" project="dijit" file="util/sniff.js"><vars><var name="dijit.util.sniff" type="Object"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.typematic" project="dijit" file="util/typematic.js"><vars><var name="dijit.util.typematic._fireEventAndReload" type="Function" private="1"/><var name="dijit.util.typematic._fireEventAndReload._timer" instance="dijit.util.typematic._fireEventAndReload" private="1"/><var name="dijit.util.typematic._fireEventAndReload._currentTimeout" instance="dijit.util.typematic._fireEventAndReload" private="1"/><var name="dijit.util.typematic.trigger" type="Function"><summary>Start a timed, repeating callback sequence. If already started, the function call is ignored. This method is not normally called by the user but can be when the normal listener code is insufficient.</summary></var><var name="dijit.util.typematic.trigger._initialDelay" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._subsequentDelay" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._obj" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._evt" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._node" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._currentTimeout" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._count" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.trigger._callback" instance="dijit.util.typematic.trigger" private="1"/><var name="dijit.util.typematic.stop" type="Function"><summary>Stop an ongoing timed, repeating callback sequence.</summary></var><var name="dijit.util.typematic.stop._timer" instance="dijit.util.typematic.stop" private="1"/><var name="dijit.util.typematic.stop._obj" instance="dijit.util.typematic.stop" private="1"/><var name="dijit.util.typematic.addKeyListener" type="Function"><summary>Start listening for a specific typematic key.</summary></var><var name="dijit.util.typematic.addMouseListener" type="Function"><summary>Start listening for a typematic mouse click.</summary></var><var name="dijit.util.typematic.addListener" type="Function"><summary>Start listening for a specific typematic key and mouseclick. This is a thin wrapper to addKeyListener and addMouseListener.</summary></var><var name="dijit.util.typematic"><summary>These functions are used to repetitively call a user specified callback method when a specific key or mouse click over a specific DOM node is held down for a specific amount of time. Only 1 such event is allowed to occur on the browser page at 1 time.</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.wai" project="dijit" file="util/wai.js"><vars><var name="dijit.util.wai.waiRole.name" type="String"><summary>information for mapping accessibility role</summary></var><var name="dijit.util.wai.waiRole.namespace" type="String"><summary>URI of the namespace for the set of roles</summary></var><var name="dijit.util.wai.waiRole.alias" type="String"><summary>The alias to assign the namespace</summary></var><var name="dijit.util.wai.waiRole.prefix" type="String"><summary>The prefix to assign to the role value</summary></var><var name="dijit.util.wai.waiState.name" type="String"><summary>information for mapping accessibility state</summary></var><var name="dijit.util.wai.waiState.namespace" type="String"><summary>URI of the namespace for the set of states</summary></var><var name="dijit.util.wai.waiState.alias" type="String"><summary>The alias to assign the namespace</summary></var><var name="dijit.util.wai.waiState.prefix" type="String"><summary>empty string - state value does not require prefix</summary></var><var name="dijit.util.wai.setAttr" type="Function"><summary>Use appropriate API to set the role or state attribute onto the element.</summary><description>In IE use the generic setAttribute() api. Append a namespace alias to the attribute name and appropriate prefix to the value. Otherwise, use the setAttribueNS api to set the namespaced attribute. Also add the appropriate prefix to the attribute value.</description></var><var name="dijit.util.wai.getAttr" type="Function"/><var name="dijit.util.wai.removeAttr" returns="only IE returns a value" type="Function"><summary>Use the appropriate API to remove the role or state value</summary><description>In IE use the generic removeAttribute() api. An alias value was added to the attribute name to simulate a namespace when the attribute was set. Otherwise use the removeAttributeNS() api to remove the state value</description></var><var name="dijit.util.wai"><summary>Contains functions to set accessibility roles and states onto widget elements</summary></var><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dijit.util.window" project="dijit" file="util/window.js"><vars><var name="dijit.util.window.getDocumentWindow" returns="Window" type="Function"><summary>Get window object associated with document doc</summary></var><var name="dijit.util.window" type="Object"/><var name="dijit.util" type="Object"/><var name="dijit" type="Object"/></vars></resource><resource provides="dojo.AdapterRegistry" project="dojo" file="AdapterRegistry.js"><vars><var name="dojo.AdapterRegistry" type="Function"><summary>A registry to make contextual calling/searching easier.</summary><description>Objects of this class keep list of arrays in the form [name, check, wrap, directReturn] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.</description></var><var name="dojo.AdapterRegistry.pairs" instance="dojo.AdapterRegistry"/><var name="dojo.AdapterRegistry.returnWrappers" instance="dojo.AdapterRegistry"/><var name="dojo.AdapterRegistry.register" type="Function"><summary>register a check function to determine if the wrap function or object gets selected</summary></var><var name="dojo.AdapterRegistry.match" type="Function"><summary>Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.</summary></var><var name="dojo.AdapterRegistry.unregister" type="Function"><summary>Remove a named adapter from the registry</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/Deferred.js"><requires><require environment="common" resource="dojo._base.lang"/></requires><vars><var name="dojo.Deferred" type="Function"><summary>Encapsulates a sequence of callbacks in response to a value that may not yet be available. This is modeled after the Deferred class from Twisted &lt;http: // twistedmatrix.com&gt;.</summary><description>JavaScript has no threads, and even if it did, threads are hard. Deferreds are a way of abstracting non-blocking events, such as the final response to an XMLHttpRequest. Deferreds create a promise to return a response a some point in the future and an easy way to register your interest in receiving that response. The most important methods for Deffered users are: addCallback(handler) addErrback(handler) callback(result) errback(result) In general, when a function returns a Deferred, users then "fill in" the second half of the contract by registering callbacks and error handlers. You may register as many callback and errback handlers as you like and they will be executed in the order registered when a result is provided. Usually this result is provided as the result of an asynchronous operation. The code "managing" the Deferred (the code that made the promise to provide an answer later) will use the callback() and errback() methods to communicate with registered listeners about the result of the operation. At this time, all registered result handlers are called *with the most recent result value*. Deferred callback handlers are treated as a chain, and each item in the chain is required to return a value that will be fed into successive handlers. The most minimal callback may be registered like this: var d = new dojo.Deferred(); d.addCallback(function(result){ return result; }); Perhaps the most common mistake when first using Deferreds is to forget to return a value (in most cases, the value you were passed). The sequence of callbacks is internally represented as a list of 2-tuples containing the callback/errback pair. For example, the following call sequence: var d = new dojo.Deferred(); d.addCallback(myCallback); d.addErrback(myErrback); d.addBoth(myBoth); d.addCallbacks(myCallback, myErrback); is translated into a Deferred with the following internal representation: [ [myCallback, null], [null, myErrback], [myBoth, myBoth], [myCallback, myErrback] ] The Deferred also keeps track of its current status (fired). Its status may be one of three things: -1: no value yet (initial condition) 0: success 1: error A Deferred will be in the error state if one of the following three conditions are met: 1. The result given to callback or errback is "instanceof" Error 2. The previous callback or errback raised an exception while executing 3. The previous callback or errback returned a value "instanceof" Error Otherwise, the Deferred will be in the success state. The state of the Deferred determines the next element in the callback sequence to run. When a callback or errback occurs with the example deferred chain, something equivalent to the following will happen (imagine that exceptions are caught and returned): // d.callback(result) or d.errback(result) if(!(result instanceof Error)){ result = myCallback(result); } if(result instanceof Error){ result = myErrback(result); } result = myBoth(result); if(result instanceof Error){ result = myErrback(result); }else{ result = myCallback(result); } The result is then stored away in case another step is added to the callback sequence. Since the Deferred already has a value available, any new callbacks added will be called immediately. There are two other "advanced" details about this implementation that are useful: Callbacks are allowed to return Deferred instances themselves, so you can build complicated sequences of events with ease. The creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds. usage: Deferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred: // callback style: function renderLotsOfData(data, callback){ var success = false try{ for(var x in data){ renderDataitem(data[x]); } success = true; }catch(e){ } if(callback){ callback(success); } } // using callback style renderLotsOfData(someDataObj, function(success){ // handles success or failure if(!success){ promptUserToRecover(); } }); // NOTE: no way to add another callback here!! Using a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as "did this get called already?". With Deferreds, new callbacks can be added at any time. // Deferred style: function renderLotsOfData(data, callback){ var d = new dojo.Deferred(); try{ for(var x in data){ renderDataitem(data[x]); } d.callback(true); }catch(e){ d.errback(new Error("rendering failed")); } return d; } // using Deferred style renderLotsOfData(someDataObj).addErrback(function(){ promptUserToRecover(); }); // NOTE: addErrback and addCallback both return the Deferred // again, so we could chain adding callbacks or save the // deferred for later should we need to be notified again. In this example, renderLotsOfData is syncrhonous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock: // Deferred style and async func function renderLotsOfData(data, callback){ var d = new dojo.Deferred(); setTimeout(function(){ try{ for(var x in data){ renderDataitem(data[x]); } d.callback(true); }catch(e){ d.errback(new Error("rendering failed")); } }, 100); return d; } // using Deferred style renderLotsOfData(someDataObj).addErrback(function(){ promptUserToRecover(); }); Note that the caller doesn't have to change his code at all to handle the asynchronous case.</description></var><var name="dojo.Deferred.chain" instance="dojo.Deferred"/><var name="dojo.Deferred.id" instance="dojo.Deferred"/><var name="dojo.Deferred.fired" instance="dojo.Deferred"/><var name="dojo.Deferred.paused" instance="dojo.Deferred"/><var name="dojo.Deferred.results" instance="dojo.Deferred"/><var name="dojo.Deferred.canceller" instance="dojo.Deferred"/><var name="dojo.Deferred.silentlyCancelled" instance="dojo.Deferred"/><var name="dojo.Deferred._getFunctionFromArgs" type="Function" private="1"><summary>takes one or two arguments and does type detection to determine if they contain enough information to return a function from them. If a scope and function name are provided a version o that function hitched to the passed scope will be returned. usage: FIXME</summary></var><var name="dojo.Deferred.makeCalled" returns="a new, empty deferred, which is already in the called state. Calling callback() or errback() on this deferred will yeild an error and adding new handlers to it will result in them being called immediately." type="Function"/><var name="dojo.Deferred.toString" type="Function"/><var name="dojo.Deferred.toString.fired" instance="dojo.Deferred.toString"/><var name="dojo.Deferred.cancel" type="Function"><summary>Cancels a Deferred that has not yet received a value, or is waiting on another Deferred as its value.</summary><description>If a canceller is defined, the canceller is called. If the canceller did not return an error, or there was no canceller, then the errback chain is started.</description></var><var name="dojo.Deferred.cancel.fired" instance="dojo.Deferred.cancel"/><var name="dojo.Deferred.cancel.silentlyCancelled" instance="dojo.Deferred.cancel"/><var name="dojo.Deferred._pause" type="Function" private="1"><summary>Used internally to signal that it's waiting on another Deferred</summary></var><var name="dojo.Deferred._unpause" type="Function" private="1"><summary>Used internally to signal that it's no longer waiting on another Deferred.</summary></var><var name="dojo.Deferred._unpause.paused" instance="dojo.Deferred._unpause"/><var name="dojo.Deferred._continue" type="Function" private="1"><summary>Used internally when a dependent deferred fires.</summary></var><var name="dojo.Deferred._resback" type="Function" private="1"><summary>The private primitive that means either callback or errback</summary></var><var name="dojo.Deferred._resback.fired" instance="dojo.Deferred._resback"/><var name="dojo.Deferred._check" type="Function" private="1"/><var name="dojo.Deferred._check.silentlyCancelled" instance="dojo.Deferred._check"/><var name="dojo.Deferred.callback" type="Function"><summary>Begin the callback sequence with a non-error value.</summary></var><var name="dojo.Deferred.errback" type="Function"><summary>Begin the callback sequence with an error result.</summary></var><var name="dojo.Deferred.addBoth" type="Function"><summary>Add the same function as both a callback and an errback as the next element on the callback sequence. This is useful for code that you want to guarantee to run, e.g. a finalizer.</summary></var><var name="dojo.Deferred.addCallback" type="Function"><summary>Add a single callback to the end of the callback sequence.</summary></var><var name="dojo.Deferred.addErrback" type="Function"><summary>Add a single callback to the end of the callback sequence.</summary></var><var name="dojo.Deferred.addCallbacks" type="Function"><summary>Add separate callback and errback to the end of the callback sequence.</summary></var><var name="dojo.Deferred._fire" type="Function" private="1"><summary>Used internally to exhaust the callback sequence when a result is available.</summary></var><var name="dojo.Deferred._fire.paused" instance="dojo.Deferred._fire"/><var name="dojo.Deferred._fire.fired" instance="dojo.Deferred._fire"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/NodeList.js"><requires><require environment="common" resource="dojo._base.lang"/><require environment="common" resource="dojo._base.array"/></requires><vars><var name="dojo.NodeList" type="Function"/><var name="dojo.NodeList.length" instance="dojo.NodeList"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/bootstrap.js"><vars><var name="dojo._getProp" returns="Any" type="Function" private="1"/><var name="dojo.setObject" returns="Any" type="Function"><summary>Set a property from a dot-separated string, such as "A.B.C"</summary><description>Useful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format. Objects are created as needed along 'path'.</description></var><var name="dojo.getObject" returns="Any" type="Function"><summary>Get a property from a dot-separated string, such as "A.B.C"</summary><description>Useful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format.</description></var><var name="dojo.exists" returns="Boolean" type="Function"><summary>determine if an object supports a given method</summary><description>useful for longer api chains where you have to test each object in the chain</description></var><var name="dojo.deprecated" type="Function"><summary>Log a debug message to indicate that a behavior has been deprecated.</summary></var><var name="dojo.experimental" type="Function"><summary>Marks code as experimental.</summary><description>This can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.</description></var><var name="dojo._getText" type="Function" private="1"><summary>Read the plain/text contents at the specified 'uri'.</summary><description>If 'getText()' is not implemented, then it is necessary to override 'loadUri()' with an implementation that doesn't rely on it.</description></var><var name="dojo.version.major"/><var name="dojo.version.minor"/><var name="dojo.version.patch"/><var name="dojo.version.flag"/><var name="dojo.version.revision"/><var name="dojo.version.toString" returns="String" type="Function"/><var name="dojo.version"><summary>version number of this instance of dojo.</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/hostenv_browser.js"><requires><require environment="common" resource="dojo._base.firebug.firebug"/></requires><vars><var name="dojo._handleNodeEvent" type="Function" private="1"><summary>non-destructively adds the specified function to the node's</summary><chains><chain type="call" parent="fp"/><chain type="call" parent="oldHandler"/></chains></var><var name="dojo._loadInit" type="Function" private="1"/><var name="dojo._writeIncludes" type="Function" private="1"/><var name="dojo.body" type="Function"><summary>return the body object associated with dojo.doc</summary></var><var name="dojo.setContext" type="Function"><summary>changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context. The varibles dojo.global and dojo.doc are modified as a result of calling this function.</summary></var><var name="dojo._fireCallback" type="Function" private="1"><chains><chain type="call" parent="callback"/></chains></var><var name="dojo.withGlobal" type="Function"><summary>Call callback with globalObject as dojo.global and</summary><description>When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.</description></var><var name="dojo.withDoc" type="Function"><summary>Call callback with documentObject as dojo.doc. If provided,</summary><description>When callback() returns or throws an error, the dojo.doc will be restored to its previous state.</description></var><var name="dojo._xhrObj" returns="XMLHTTPRequest instance" type="Function" private="1"><summary>does the work of portably generating a new XMLHTTPRequest object.</summary></var><var name="dojo._isDocumentOk" returns="allow any 2XX response code" type="Function" private="1"/><var name="dojo._getText" returns="String" type="Function" private="1"><summary>Read the contents of the specified uri and return those contents.</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/hostenv_rhino.js"><vars><var name="dojo.byId" returns="assume it's a node" type="Function"/><var name="dojo._loadUri" type="Function" private="1"/><var name="dojo.exit" type="Function"/><var name="dojo._rhinoCurrentScriptViaJava" type="Function" private="1"/><var name="readText" type="Function"/><var name="readUri" type="Function"/><var name="dj_readInputStream" type="Function"/><var name="dojo.body" type="Function"/><var name="setTimeout" type="Function"><summary>provides timed callbacks using Java threads</summary></var><var name="setTimeout.hasSlept" instance="setTimeout"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/hostenv_spidermonkey.js"><vars><var name="dojo.exit" type="Function"/><var name="dojo._spidermonkeyCurrentFile" type="Function" private="1"/><var name="dojo._loadUri" type="Function" private="1"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/loader.js"><requires><require environment="common" resource="dojo.i18n"/></requires><vars><var name="dojo._loadPath" returns="Boolean" type="Function" private="1"><summary>Load a Javascript module given a relative path</summary><description>Loads and interprets the script located at relpath, which is relative to the script root directory. If the script is found but its interpretation causes a runtime exception, that exception is not caught by us, so the caller will see it. We return a true value if and only if the script is found.</description></var><var name="dojo._loadUri" returns="Boolean" type="Function" private="1"><summary>Loads JavaScript from a URI</summary><description>Reads the contents of the URI, and evaluates the contents. This is used to load modules as well as resource bundles. Returns true if it succeeded. Returns false if the URI reading failed. Throws if the evaluation throws.</description></var><var name="dojo._loadUriAndCheck" returns="Boolean" type="Function" private="1"><summary>calls loadUri then findModule and returns true if both succeed</summary></var><var name="dojo.loaded" type="Function"/><var name="dojo.loaded._loadNotifying" instance="dojo.loaded" private="1"/><var name="dojo.loaded._postLoad" instance="dojo.loaded" private="1"/><var name="dojo.loaded._loaders" instance="dojo.loaded" private="1"/><var name="dojo.unloaded" type="Function"/><var name="dojo.addOnLoad" type="Function"><summary>Registers a function to be triggered after the DOM has finished loading and widgets declared in markup have been instantiated. Images and CSS files may or may not have finished downloading when the specified function is called. (Note that widgets' CSS and HTML code is guaranteed to be downloaded before said widgets are instantiated.) usage: dojo.addOnLoad(functionPointer) dojo.addOnLoad(object, "functionName")</summary></var><var name="dojo.addOnUnload" type="Function"><summary>registers a function to be triggered when the page unloads usage: dojo.addOnLoad(functionPointer) dojo.addOnLoad(object, "functionName")</summary></var><var name="dojo._modulesLoaded" type="Function" private="1"/><var name="dojo._callLoaded" type="Function" private="1"/><var name="dojo._getModuleSymbols" returns="Array" type="Function" private="1"><summary>Converts a module name in dotted JS notation to an array representing the path in the source tree</summary></var><var name="dojo._loadModule" type="Function" private="1"><summary>loads a Javascript module from the appropriate URI</summary><description>_loadModule("A.B") first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do). If it is not defined, it will look for "A/B.js" in the script root directory, followed by "A.js". It throws if it cannot find a file to load, or if the symbol A.B is not defined after loading. It returns the object A.B. This does nothing about importing symbols into the current package. It is presumed that the caller will take care of that. For example, to import all symbols: with (dojo._loadModule("A.B")) { ... } And to import just the leaf symbol: var B = dojo._loadModule("A.B"); ... dj_load is an alias for dojo._loadModule</description></var><var name="dojo.provide" returns="Object" type="Function"><summary>Each javascript source file must have (exactly) one dojo.provide() call at the top of the file, corresponding to the file name. For example, dojo/src/foo.js must have dojo.provide("dojo.foo"); at the top of the file.</summary><description>Each javascript source file is called a resource. When a resource is loaded by the browser, dojo.provide() registers that it has been loaded. For backwards compatibility reasons, in addition to registering the resource, dojo.provide() also ensures that the javascript object for the module exists. For example, dojo.provide("dojo.io.cometd"), in addition to registering that cometd.js is a resource for the dojo.iomodule, will ensure that the dojo.io javascript object exists, so that calls like dojo.io.foo = function(){ ... } don't fail. In the case of a build (or in the future, a rollup), where multiple javascript source files are combined into one bigger file (similar to a .lib or .jar file), that file will contain multiple dojo.provide() calls, to note that it includes multiple resources.</description></var><var name="dojo.platformRequire" type="Function"><description>This method taks a "map" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.name_ values, with two additional values: "default" and "common". The items in the "default" array will be loaded if none of the other items have been choosen based on the hostenv.name_ item. The items in the "common" array will _always_ be loaded, regardless of which list is chosen. Here's how it's normally called: dojo.platformRequire({ // an example that passes multiple args to _loadModule() browser: [ ["foo.bar.baz", true, true], "foo.sample.*", "foo.test, ], default: [ "foo.sample.*" ], common: [ "really.important.module.*" ] });</description><chains><chain type="call" parent="dojo._loadModule"/></chains></var><var name="dojo.requireIf" type="Function"><summary>If the condition is true then call dojo.require() for the specified resource</summary><chains><chain type="call" parent="dojo.require"/></chains></var><var name="dojo.registerModulePath" type="Function"><summary>maps a module name to a path</summary><description>An unregistered module is given the default path of ../&lt;module&gt;, relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.</description></var><var name="dojo.requireLocalization" type="Function"><summary>Declares translated resources and loads them if necessary, in the same style as dojo.require. Contents of the resource bundle are typically strings, but may be any name/value pair, represented in JSON format. See also dojo.i18n.getLocalization.</summary><description>Load translated resource bundles provided underneath the "nls" directory within a package. Translated resources may be located in different packages throughout the source tree. For example, a particular widget may define one or more resource bundles, structured in a program as follows, where moduleName is mycode.mywidget and bundleNames available include bundleone and bundletwo: ... mycode/ mywidget/ nls/ bundleone.js (the fallback translation, English in this example) bundletwo.js (also a fallback translation) de/ bundleone.js bundletwo.js de-at/ bundleone.js en/ (empty; use the fallback translation) en-us/ bundleone.js en-gb/ bundleone.js es/ bundleone.js bundletwo.js ...etc ... Each directory is named for a locale as specified by RFC 3066, (http: // www.ietf.org/rfc/rfc3066.txt), normalized in lowercase. Note that the two bundles in the example do not define all the same variants. For a given locale, bundles will be loaded for that</description><chains><chain type="call" parent="dojo.i18n._requireLocalization"/></chains></var><var name="dojo._Url" type="Function" private="1"><summary>Constructor to create an object representing a URL. It is marked as private, since we might consider removing or simplifying it.</summary><description>Each argument is evaluated in order relative to the next until a canonical uri is produced. To get an absolute Uri relative to the current document use: new dojo._Url(document.baseURI, url)</description></var><var name="dojo._Url.uri" instance="dojo._Url"/><var name="dojo._Url.scheme" instance="dojo._Url"/><var name="dojo._Url.authority" instance="dojo._Url"/><var name="dojo._Url.path" instance="dojo._Url"/><var name="dojo._Url.query" instance="dojo._Url"/><var name="dojo._Url.fragment" instance="dojo._Url"/><var name="dojo._Url.user" instance="dojo._Url"/><var name="dojo._Url.password" instance="dojo._Url"/><var name="dojo._Url.host" instance="dojo._Url"/><var name="dojo._Url.port" instance="dojo._Url"/><var name="dojo._Url.toString" type="Function" instance="dojo._Url"/><var name="dojo.moduleUrl" returns="a Url object relative to a module" type="Function"><description>Examples: dojo.moduleUrl("dojo.widget","templates/template.html"); dojo.moduleUrl("acme","images/small.png")</description></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/_loader/loader_xd.js"><vars><var name="dojo.hostenv.resetXd" type="Function"><summary>Internal xd loader function. Resets the xd state.</summary></var><var name="dojo.hostenv.resetXd.isXDomain" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdTimer" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdInFlight" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdOrderedReqs" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdDepMap" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdContents" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.resetXd.xdDefList" instance="dojo.hostenv.resetXd"/><var name="dojo.hostenv.createXdPackage" returns="String" type="Function"><summary>Internal xd loader function. Creates an xd module source given an non-xd module contents.</summary></var><var name="dojo.hostenv.loadPath" returns="boolean" type="Function"><summary>Internal xd loader function. Overrides loadPath() from loader.js. xd loading requires slightly different behavior from loadPath().</summary></var><var name="dojo.hostenv.loadPath.isXDomain" instance="dojo.hostenv.loadPath"/><var name="dojo.hostenv.loadUri" returns="boolean" type="Function"><summary>Internal xd loader function. Overrides loadUri() from loader.js. xd loading requires slightly different behavior from loadPath().</summary><description>Wanted to override getText(), but it is used by the widget code in too many, synchronous ways right now.</description></var><var name="dojo.hostenv.loadUri.xdTimer" instance="dojo.hostenv.loadUri"/><var name="dojo.hostenv.loadUri.xdStartTime" instance="dojo.hostenv.loadUri"/><var name="dojo.hostenv.loadUri.headElement" instance="dojo.hostenv.loadUri"/><var name="dojo.hostenv.packageLoaded" type="Function"><summary>Internal xd loader function. Called by an xd module when it has been loaded via a script tag.</summary></var><var name="dojo.hostenv.xdLoadFlattenedBundle" type="Function"><summary>Internal xd loader function. Used when loading a flattened localized bundle via a script tag.</summary></var><var name="dojo.hostenv.unpackXdDependency" returns="Object" type="Function"><summary>Internal xd loader function. Determines what to do with a dependency that was listed in an xd version of a module contents.</summary></var><var name="dojo.hostenv.xdWalkReqs" type="Function"><summary>Internal xd loader function. Walks the requires and evaluates package contents in the right order.</summary></var><var name="dojo.hostenv.xdEvalReqs" type="Function"><summary>Internal xd loader function. Does a depth first, breadth second search and eval of required modules.</summary></var><var name="dojo.hostenv.clearXdInterval" type="Function"><summary>Internal xd loader function. Clears the interval timer used to check on the status of in-flight xd module resource requests.</summary></var><var name="dojo.hostenv.clearXdInterval.xdTimer" instance="dojo.hostenv.clearXdInterval"/><var name="dojo.hostenv.watchInFlightXDomain" type="Function"><summary>Internal xd loader function. Monitors in-flight requests for xd module resources.</summary></var><var name="dojo.hostenv.watchInFlightXDomain.xdDebugQueue" instance="dojo.hostenv.watchInFlightXDomain"/><var name="dojo.hostenv.xdNotifyLoaded" type="Function"/><var name="dojo.hostenv.xdNotifyLoaded.inFlightCount" instance="dojo.hostenv.xdNotifyLoaded"/><var name="dojo.hostenv.flattenRequireArray" type="Function"><summary>Internal xd loader function. Flattens an array of arrays into a one-level deep array.</summary></var><var name="dojo.hostenv.callLoaded" type="Function"><summary>Internal xd loader function. Overrides callLoaded() from loader.js</summary><description>The method is overridden because xd loading needs to preload any flattened i18n bundles before dojo starts executing code, since xd loading cannot do it synchronously, as the i18n code normally expects.</description></var><var name="dojo.hostenv.callLoaded.xdHasCalledPreload" instance="dojo.hostenv.callLoaded"/><var name="dojo.hostenv.callLoaded.registerNlsPrefix" type="Function" instance="dojo.hostenv.callLoaded"/><var name="dojo.xdRequireLocalization" type="Function"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/array.js"><requires><require environment="common" resource="dojo._base.lang"/></requires><vars><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/connect.js"><requires><require environment="common" resource="dojo._base.lang"/></requires><vars><var name="dojo.connect" returns="Handle" type="Function"><summary>Create a link that calls one function when another executes.</summary><description>Connects method to event, so that after event fires, method does too. Connect as many methods to event as needed.</description><chains><chain type="call" parent="dojo._connect"/></chains></var><var name="dojo._connect" returns="Handle" type="Function" private="1"/><var name="dojo.disconnect" type="Function"><summary>Remove a link created by dojo.connect.</summary><description>Removes the connection between event and the method referenced by handle.</description><chains><chain type="call" parent="dojo._disconnect"/></chains></var><var name="dojo._disconnect" type="Function" private="1"/><var name="dojo.subscribe" returns="Handle" type="Function"/><var name="dojo.unsubscribe" type="Function"/><var name="dojo.publish" type="Function"><chains><chain type="call" parent="f"/></chains></var><var name="dojo._listener.getDispatcher" type="Function"/><var name="dojo._listener.add" returns="Handle" type="Function"/><var name="dojo._listener.remove" type="Function"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/declare.js"><requires><require environment="common" resource="dojo._base.lang"/></requires><vars><var name="dojo.declare" returns="Function" type="Function"><summary>Create a feature-rich constructor from compact notation</summary><description>Create a constructor using a compact notation for inheritance and prototype extension. All superclasses (including mixins) must be Functions (not simple Objects). Mixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class. "className" is cached in "declaredClass" property of the new class. usage: dojo.declare("my.classes.bar", my.classes.foo, function(){ // initialization function this.myComplicatedObject = new ReallyComplicatedObject(); },{ // properties to be added to the class prototype someValue: 2, someMethod: function(){ doStuff(); } } ); I. Munge parameters parameter juggling to support omitting init param (also allows reordering init and props arguments)</description></var><var name="dojo.declare._makeConstructor" type="Function" private="1"><chains><chain type="call" parent="s.constructor"/><chain type="call" parent="f"/><chain type="call" parent="p.initializer"/></chains></var><var name="dojo.declare._core._findInherited" type="Function" private="1"/><var name="dojo.declare._core.inherited" type="Function"><summary>Invoke an ancestor method</summary><description>Invoke an ancestor (base class) or overriden method. usage: foo: function() { // invoke superclass 'foo' this.inherited("foo", arguments); }</description><chains><chain type="call" parent="fn"/></chains></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/event.js"><requires><require environment="common" resource="dojo._base.connect"/></requires><vars><var name="dojo._getIeDispatcher" type="Function" private="1"/><var name="dojo.addListener" returns="Handle" type="Function"/><var name="dojo.removeListener" type="Function"/><var name="dojo.fixEvent" type="Function"><summary>normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions</summary></var><var name="dojo.stopEvent" type="Function"><summary>prevents propagation and clobbers the default action of the passed event</summary><chains><chain type="call" parent="de._stopPropagation"/><chain type="call" parent="de._preventDefault"/></chains></var><var name="dojo._connect" type="Function" private="1"><chains><chain type="call" parent="dc"/></chains></var><var name="dojo._disconnect" type="Function" private="1"/><var name="_trySetKeyCode" type="Function" private="1"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/firebug/firebug.js"><vars><var name="window.onFirebugReady" type="Function"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/fx.js"><requires><require environment="common" resource="dojo._base.array"/><require environment="common" resource="dojo._base.connect"/><require environment="common" resource="dojo._base.declare"/><require environment="common" resource="dojo._base.lang"/><require environment="common" resource="dojo._base.html"/></requires><vars><var name="dojo._Animation" type="Function" private="1"><summary>a generic animation object that fires callbacks into it's handlers object at various states FIXME: document args object</summary></var><var name="dojo._Animation.curve" prototype="dojo._Animation" instance="dojo._Animation"/><var name="dojo._Animation.duration" prototype="dojo._Animation"/><var name="dojo._Animation.easing" prototype="dojo._Animation"/><var name="dojo._Animation.repeat" prototype="dojo._Animation" instance="dojo._Animation"/><var name="dojo._Animation.rate" prototype="dojo._Animation"/><var name="dojo._Animation.delay" prototype="dojo._Animation"/><var name="dojo._Animation.beforeBegin" prototype="dojo._Animation"/><var name="dojo._Animation.onBegin" prototype="dojo._Animation"/><var name="dojo._Animation.onAnimate" prototype="dojo._Animation"/><var name="dojo._Animation.onEnd" prototype="dojo._Animation"/><var name="dojo._Animation.onPlay" prototype="dojo._Animation"/><var name="dojo._Animation.onPause" prototype="dojo._Animation"/><var name="dojo._Animation.onStop" prototype="dojo._Animation"/><var name="dojo._Animation._active" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._paused" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._startTime" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._endTime" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._timer" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._percent" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation._startRepeatCount" prototype="dojo._Animation" instance="dojo._Animation" private="1"/><var name="dojo._Animation.fire" returns="dojo._Animation" type="Function" prototype="dojo._Animation"><summary>Convenience function. Fire event "evt" and pass it the arguments specified in "args".</summary></var><var name="dojo._Animation.chain" returns="dojo._Animation" type="Function" prototype="dojo._Animation"/><var name="dojo._Animation.combine" returns="dojo._Animation" type="Function" prototype="dojo._Animation"/><var name="dojo._Animation.play" returns="dojo._Animation" type="Function" prototype="dojo._Animation"><summary>Start the animation.</summary></var><var name="dojo._Animation.pause" returns="dojo._Animation" type="Function" prototype="dojo._Animation"><summary>Pauses a running animation.</summary></var><var name="dojo._Animation.gotoPercent" returns="dojo._Animation" type="Function" prototype="dojo._Animation"><summary>Sets the progress of the animation.</summary></var><var name="dojo._Animation.stop" returns="dojo._Animation" type="Function" prototype="dojo._Animation"><summary>Stops a running animation.</summary></var><var name="dojo._Animation.status" returns="String" type="Function" prototype="dojo._Animation"><summary>Returns a string representation of the status of the animation.</summary></var><var name="dojo._Animation._cycle" returns="dojo._Animation" type="Function" prototype="dojo._Animation" private="1"/><var name="dojo._Line" returns="Decimal" type="Function" private="1"><summary>dojo._Line is the object used to generate values from a start value to an end value</summary></var><var name="dojo._Line.start" instance="dojo._Line"/><var name="dojo._Line.end" instance="dojo._Line"/><var name="dojo._Line.getValue" returns="Decimal" type="Function" instance="dojo._Line"><summary>returns the point on the line</summary></var><var name="dojo.Color" type="Function"><chains><chain type="call" parent="this.setColor"/></chains></var><var name="dojo.blendColors" type="Function"><summary>blend colors a and b (either RGB arrays or hex strings) with weight from -1 to +1, 0 being a 50/50 blend</summary></var><var name="dojo.extractRgb" type="Function"/><var name="dojo.hex2rgb" type="Function"/><var name="dojo.rgb2hex" type="Function"/><var name="dojo._fade" returns="dojo._Animation" type="Function" private="1"><summary>Returns an animation that will fade the "nodes" from the start to end values passed.</summary></var><var name="dojo.fadeIn" returns="dojo._Animation" type="Function"><summary>Returns an animation that will fade "nodes" from its current opacity to fully opaque. nodes: An array of DOMNodes or one DOMNode. duration: Duration of the animation in milliseconds. easing: An easing function.</summary></var><var name="dojo.fadeOut" returns="dojo._Animation" type="Function"><summary>Returns an animation that will fade "nodes" from its current opacity to fully transparent. nodes: An array of DOMNodes or one DOMNode. duration: Duration of the animation in milliseconds. easing: An easing function.</summary></var><var name="dojo._defaultEasing" returns="FIXME: Does this still occur in the supported Safari version?" type="Function" private="1"><summary>Returns the point for point n on a sin wave.</summary></var><var name="dojo.animateProperty" returns="dojo._Animation" type="Function"><summary>Returns an animation that will transition the properties of "nodes" depending how they are defined in "propertyMap".</summary></var><var name="dojo.animateProperty._properties" instance="dojo.animateProperty" private="1"/><var name="dojo.animateProperty.getValue" type="Function" instance="dojo.animateProperty"/><var name="dojo.animateProperty.curve" instance="dojo.animateProperty"/><var name="dojo.Color.setColor" type="Function"><summary>takes an r, g, b, a(lpha) value, [r, g, b, a] array, "rgb(...)" string, hex string (#aaa, #aaaaaa, aaaaaaa)</summary></var><var name="dojo.Color.setColor._cache" instance="dojo.Color.setColor" private="1"/><var name="dojo.Color.setColor.a" instance="dojo.Color.setColor"/><var name="dojo.Color.toRgb" type="Function"/><var name="dojo.Color.toRgba" type="Function"/><var name="dojo.Color.toHex" type="Function"/><var name="dojo.Color.toCss" type="Function"/><var name="dojo.Color.toString" returns="decent default?" type="Function"/><var name="dojo.Color.named.white"/><var name="dojo.Color.named.black"/><var name="dojo.Color.named.red"/><var name="dojo.Color.named.green"/><var name="dojo.Color.named.lime"/><var name="dojo.Color.named.blue"/><var name="dojo.Color.named.navy"/><var name="dojo.Color.named.gray"/><var name="dojo.Color.named.silver"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/html.js"><requires><require environment="common" resource="dojo._base.lang"/></requires><vars><var name="dojo.createElement" type="Function"/><var name="dojo.byId" returns="DomNode" type="Function"><summary>similar to other library's "$" function, takes a string representing a DOM id or a DomNode and</summary></var><var name="dojo.hasClass" returns="Boolean" type="Function"><summary>Returns whether or not the specified classes are a portion of the class list currently applied to the node. return (new RegExp('(^|\\s+)'+classStr+'(\\s+|$)')).test(node.className) // Boolean</summary></var><var name="dojo.addClass" type="Function"><summary>Adds the specified classes to the end of the class list on the passed node.</summary></var><var name="dojo.removeClass" type="Function"><summary>Removes classes from node.</summary></var><var name="dojo.place" returns="boolean" type="Function"><summary>attempt to insert node in relation to ref based on position</summary></var><var name="dojo._toPixelValue" type="Function" private="1"/><var name="dojo.getComputedStyle" type="Function"/><var name="dojo.style" type="Function"/><var name="dojo._getPadBounds" type="Function" private="1"/><var name="dojo._getPadBorderExtents" type="Function" private="1"/><var name="dojo._getMarginExtents" type="Function" private="1"/><var name="dojo._getMarginBox" type="Function" private="1"/><var name="dojo._getContentBox" type="Function" private="1"/><var name="dojo._setBox" type="Function" private="1"/><var name="dojo._setContentBox" type="Function" private="1"/><var name="dojo._setMarginBox" type="Function" private="1"/><var name="dojo.marginBox" type="Function"/><var name="dojo.contentBox" type="Function"/><var name="dojo._docScroll" type="Function" private="1"/><var name="dojo._abs" returns="object" type="Function" private="1"><summary>Gets the absolute position of the passed element based on the document itself.</summary></var><var name="dojo.coords" type="Function"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/json.js"><vars><var name="dojo.fromJson" type="Function"><summary>evaluates the passed string-form of a JSON object</summary></var><var name="dojo._escapeString" type="Function" private="1"><summary>Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal.</summary></var><var name="dojo.toJson" type="Function"><summary>Create a JSON serialization of an object. Note that this doesn't check for infinite recursion, so don't do that!</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/lang.js"><vars><var name="dojo.isString" returns="Boolean" type="Function"><summary>Return true if it is a String.</summary></var><var name="dojo.isArray" returns="Boolean" type="Function"><summary>Return true of it is an Array</summary></var><var name="dojo.isFunction" returns="Boolean" type="Function"/><var name="dojo.isObject" returns="Boolean" type="Function"/><var name="dojo.isArrayLike" returns="Boolean" type="Function"/><var name="dojo.isAlien" returns="Boolean" type="Function"><summary>Returns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn't</summary></var><var name="dojo._mixin" returns="Object" type="Function" private="1"><summary>Adds all properties and methods of props to obj. This addition is "prototype extension safe", so that instances of objects will not pass along prototype defaults.</summary></var><var name="dojo.mixin" returns="Object" type="Function"><summary>Adds all properties and methods of props to obj.</summary></var><var name="dojo.extend" returns="Object" type="Function"><summary>Adds all properties and methods of props to constructor's prototype, making them available to all instances created with</summary></var><var name="dojo._hitchArgs" returns="Any" type="Function" private="1"><chains><chain type="call" parent="f"/></chains></var><var name="dojo.hitch" type="Function"><summary>Returns a function that will only ever execute in the a given scope. This allows for easy use of object member functions in callbacks and other places in which the "this" keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond "method". Each of these values will be used to "placehold" (similar to curry) for the hitched function.</summary><chains><chain type="call" parent="dojo._hitchArgs"/><chain type="call" parent="method"/></chains></var><var name="dojo._delegate" type="Function" private="1"/><var name="dojo.partial" type="Function"><summary>similar to hitch() except that the scope object is left to be whatever the execution context eventually becomes. This is the functional equivalent of calling: dojo.hitch(null, funcName, ...);</summary><chains><chain type="call" parent="dojo.hitch"/></chains></var><var name="dojo._toArray" type="Function" private="1"><summary>Converts an array-like object (i.e. arguments, DOMCollection) to an array. Returns a new Array object.</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/query.js"><requires><require environment="common" resource="dojo._base.NodeList"/></requires><vars><var name="dojo.query" type="Function"/><var name="dojo._filterQueryResult" type="Function" private="1"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo" project="dojo" file="_base/xhr.js"><requires><require environment="common" resource="dojo._base.Deferred"/><require environment="common" resource="dojo._base.json"/><require environment="common" resource="dojo._base.lang"/><require environment="common" resource="dojo._base.query"/></requires><vars><var name="dojo.formToObject" type="Function"><summary>dojo.formToObject returns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.</summary><description>This form: &lt;form id="test_form"&gt; &lt;input type="text" name="blah" value="blah"&gt; &lt;input type="text" name="no_value" value="blah" disabled&gt; &lt;input type="button" name="no_value2" value="blah"&gt; &lt;select type="select" multiple name="multi" size="5"&gt; &lt;option value="blah"&gt;blah&lt;/option&gt; &lt;option value="thud" selected&gt;thud&lt;/option&gt; &lt;option value="thonk" selected&gt;thonk&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; yeilds this object structure as the result of a call to formToObject(): { blah: "blah", multi: [ "thud", "thonk" ] };</description></var><var name="dojo.objectToQuery" returns="string" type="Function"/><var name="dojo.formToQuery" returns="string" type="Function"><summary>return URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize</summary></var><var name="dojo.formToJson" returns="string" type="Function"><summary>return a serialized JSON string from a form node or string ID identifying the form to serialize</summary></var><var name="dojo.queryToObject" returns="this object structure: { foo: [ &quot;bar&quot;, &quot;baz&quot; ], thinger: &quot; spaces =blah&quot;, zonk: &quot;blarg&quot; } Note that spaces and other urlencoded entities are correctly handled." type="Function"><description>This string: "foo=bar&amp;foo=baz&amp;thinger=%20spaces%20=blah&amp;zonk=blarg&amp;"</description></var><var name="dojo._ioSetArgs" type="Function" private="1"><summary>sets up the Deferred and ioArgs property on the Deferred so it can be used in an io call.</summary><chains><chain type="call" parent="dojo.mixin"/></chains></var><var name="dojo._ioWatch" type="Function" private="1"><summary>watches the io request represented by dfd to see if it completes.</summary></var><var name="dojo.xhrGet" returns="dojo.Deferred" type="Function"/><var name="dojo.xhrPost" returns="dojo.Deferred" type="Function"/><var name="dojo.rawXhrPost" returns="dojo.Deferred" type="Function"/><var name="dojo.wrapForm" type="Function"/><var name="dojo._contentHandlers.text" type="Function"/><var name="dojo._contentHandlers.json" type="Function"/><var name="dojo._contentHandlers.json-comment-filtered" type="Function"/><var name="dojo._contentHandlers.javascript" type="Function"/><var name="dojo._contentHandlers.xml" type="Function"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo._base" project="dojo" file="_base.js"><requires><require environment="common" resource="dojo._base.lang"/><require environment="common" resource="dojo._base.declare"/><require environment="common" resource="dojo._base.connect"/><require environment="common" resource="dojo._base.Deferred"/><require environment="common" resource="dojo._base.json"/><require environment="common" resource="dojo._base.array"/></requires><vars><var name="dojo._base" type="Object" private="1"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.back" project="dojo" file="back.js"><vars><var name="dojo.back.init" type="Function"><summary>Initializes the undo stack. This must be called from a &lt;script&gt; block that lives inside the &lt;body&gt; tag to prevent bugs on IE.</summary></var><var name="dojo.back.setInitialState" type="Function"><summary>Sets the state object and back callback for the very first page that is loaded.</summary><description>It is recommended that you call this method as part of an event listener that is registered via dojo.addOnLoad().</description></var><var name="dojo.back.addToHistory" type="Function"><summary>adds a state object (args) to the history list. You must set djConfig.preventBackButtonFix = false to use dojo.undo.browser.</summary><chains><chain type="call" parent="oldCB"/><chain type="call" parent="oldFW"/></chains></var><var name="dojo.back.iframeLoaded" type="Function"><summary>private method. Do not call this directly.</summary></var><var name="dojo.back" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.behavior" project="dojo" file="behavior.js"><vars><var name="dojo.behavior" type="Function" initialized="1"><chains><chain type="call" parent="func"/></chains></var><var name="dojo.behavior.behaviors" instance="dojo.behavior"/><var name="dojo.behavior.add" type="Function" instance="dojo.behavior"/><var name="dojo.behavior.apply" type="Function" instance="dojo.behavior"/><var name="dojo.behavior.applyToNode" type="Function" instance="dojo.behavior"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.monetary" project="dojo" file="cldr/monetary.js"><vars><var name="dojo.cldr.monetary.getData" returns="Object" type="Function"><summary>A mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.</summary></var><var name="dojo.cldr.monetary" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.currency" project="dojo" file="cldr/nls/currency.js"><vars><var name="dojo.cldr.nls.currency" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.de.currency" project="dojo" file="cldr/nls/de/currency.js"><vars><var name="dojo.cldr.nls.de.currency" type="Object"/><var name="dojo.cldr.nls.de" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.de.gregorian" project="dojo" file="cldr/nls/de/gregorian.js"><vars><var name="dojo.cldr.nls.de.gregorian" type="Object"/><var name="dojo.cldr.nls.de" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.de.number" project="dojo" file="cldr/nls/de/number.js"><vars><var name="dojo.cldr.nls.de.number" type="Object"/><var name="dojo.cldr.nls.de" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.de-de.number" project="dojo" file="cldr/nls/de-de/number.js"><vars><var name="dojo.cldr.nls.de-de.number" type="Object"/><var name="dojo.cldr.nls.de-de" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en.currency" project="dojo" file="cldr/nls/en/currency.js"><vars><var name="dojo.cldr.nls.en.currency" type="Object"/><var name="dojo.cldr.nls.en" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en.gregorian" project="dojo" file="cldr/nls/en/gregorian.js"><vars><var name="dojo.cldr.nls.en.gregorian" type="Object"/><var name="dojo.cldr.nls.en" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en.number" project="dojo" file="cldr/nls/en/number.js"><vars><var name="dojo.cldr.nls.en.number" type="Object"/><var name="dojo.cldr.nls.en" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-au.currency" project="dojo" file="cldr/nls/en-au/currency.js"><vars><var name="dojo.cldr.nls.en-au.currency" type="Object"/><var name="dojo.cldr.nls.en-au" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-au.gregorian" project="dojo" file="cldr/nls/en-au/gregorian.js"><vars><var name="dojo.cldr.nls.en-au.gregorian" type="Object"/><var name="dojo.cldr.nls.en-au" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-ca.currency" project="dojo" file="cldr/nls/en-ca/currency.js"><vars><var name="dojo.cldr.nls.en-ca.currency" type="Object"/><var name="dojo.cldr.nls.en-ca" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-ca.gregorian" project="dojo" file="cldr/nls/en-ca/gregorian.js"><vars><var name="dojo.cldr.nls.en-ca.gregorian" type="Object"/><var name="dojo.cldr.nls.en-ca" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-ca.number" project="dojo" file="cldr/nls/en-ca/number.js"><vars><var name="dojo.cldr.nls.en-ca.number" type="Object"/><var name="dojo.cldr.nls.en-ca" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-gb.gregorian" project="dojo" file="cldr/nls/en-gb/gregorian.js"><vars><var name="dojo.cldr.nls.en-gb.gregorian" type="Object"/><var name="dojo.cldr.nls.en-gb" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-us.currency" project="dojo" file="cldr/nls/en-us/currency.js"><vars><var name="dojo.cldr.nls.en-us.currency" type="Object"/><var name="dojo.cldr.nls.en-us" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.en-us.number" project="dojo" file="cldr/nls/en-us/number.js"><vars><var name="dojo.cldr.nls.en-us.number" type="Object"/><var name="dojo.cldr.nls.en-us" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.es.currency" project="dojo" file="cldr/nls/es/currency.js"><vars><var name="dojo.cldr.nls.es.currency" type="Object"/><var name="dojo.cldr.nls.es" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.es.gregorian" project="dojo" file="cldr/nls/es/gregorian.js"><vars><var name="dojo.cldr.nls.es.gregorian" type="Object"/><var name="dojo.cldr.nls.es" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.es.number" project="dojo" file="cldr/nls/es/number.js"><vars><var name="dojo.cldr.nls.es.number" type="Object"/><var name="dojo.cldr.nls.es" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.es-es.gregorian" project="dojo" file="cldr/nls/es-es/gregorian.js"><vars><var name="dojo.cldr.nls.es-es.gregorian" type="Object"/><var name="dojo.cldr.nls.es-es" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.es-es.number" project="dojo" file="cldr/nls/es-es/number.js"><vars><var name="dojo.cldr.nls.es-es.number" type="Object"/><var name="dojo.cldr.nls.es-es" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.fr.currency" project="dojo" file="cldr/nls/fr/currency.js"><vars><var name="dojo.cldr.nls.fr.currency" type="Object"/><var name="dojo.cldr.nls.fr" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.fr.gregorian" project="dojo" file="cldr/nls/fr/gregorian.js"><vars><var name="dojo.cldr.nls.fr.gregorian" type="Object"/><var name="dojo.cldr.nls.fr" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.fr.number" project="dojo" file="cldr/nls/fr/number.js"><vars><var name="dojo.cldr.nls.fr.number" type="Object"/><var name="dojo.cldr.nls.fr" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.gregorian" project="dojo" file="cldr/nls/gregorian.js"><vars><var name="dojo.cldr.nls.gregorian" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.it.currency" project="dojo" file="cldr/nls/it/currency.js"><vars><var name="dojo.cldr.nls.it.currency" type="Object"/><var name="dojo.cldr.nls.it" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.it.gregorian" project="dojo" file="cldr/nls/it/gregorian.js"><vars><var name="dojo.cldr.nls.it.gregorian" type="Object"/><var name="dojo.cldr.nls.it" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.it.number" project="dojo" file="cldr/nls/it/number.js"><vars><var name="dojo.cldr.nls.it.number" type="Object"/><var name="dojo.cldr.nls.it" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.it-it.gregorian" project="dojo" file="cldr/nls/it-it/gregorian.js"><vars><var name="dojo.cldr.nls.it-it.gregorian" type="Object"/><var name="dojo.cldr.nls.it-it" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ja.currency" project="dojo" file="cldr/nls/ja/currency.js"><vars><var name="dojo.cldr.nls.ja.currency" type="Object"/><var name="dojo.cldr.nls.ja" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ja.gregorian" project="dojo" file="cldr/nls/ja/gregorian.js"><vars><var name="dojo.cldr.nls.ja.gregorian" type="Object"/><var name="dojo.cldr.nls.ja" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ja-jp.number" project="dojo" file="cldr/nls/ja-jp/number.js"><vars><var name="dojo.cldr.nls.ja-jp.number" type="Object"/><var name="dojo.cldr.nls.ja-jp" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ko.currency" project="dojo" file="cldr/nls/ko/currency.js"><vars><var name="dojo.cldr.nls.ko.currency" type="Object"/><var name="dojo.cldr.nls.ko" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ko.gregorian" project="dojo" file="cldr/nls/ko/gregorian.js"><vars><var name="dojo.cldr.nls.ko.gregorian" type="Object"/><var name="dojo.cldr.nls.ko" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ko-kr.gregorian" project="dojo" file="cldr/nls/ko-kr/gregorian.js"><vars><var name="dojo.cldr.nls.ko-kr.gregorian" type="Object"/><var name="dojo.cldr.nls.ko-kr" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.ko-kr.number" project="dojo" file="cldr/nls/ko-kr/number.js"><vars><var name="dojo.cldr.nls.ko-kr.number" type="Object"/><var name="dojo.cldr.nls.ko-kr" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.number" project="dojo" file="cldr/nls/number.js"><vars><var name="dojo.cldr.nls.number" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.pt.currency" project="dojo" file="cldr/nls/pt/currency.js"><vars><var name="dojo.cldr.nls.pt.currency" type="Object"/><var name="dojo.cldr.nls.pt" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.pt.gregorian" project="dojo" file="cldr/nls/pt/gregorian.js"><vars><var name="dojo.cldr.nls.pt.gregorian" type="Object"/><var name="dojo.cldr.nls.pt" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.pt.number" project="dojo" file="cldr/nls/pt/number.js"><vars><var name="dojo.cldr.nls.pt.number" type="Object"/><var name="dojo.cldr.nls.pt" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.pt-br.gregorian" project="dojo" file="cldr/nls/pt-br/gregorian.js"><vars><var name="dojo.cldr.nls.pt-br.gregorian" type="Object"/><var name="dojo.cldr.nls.pt-br" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.zh.currency" project="dojo" file="cldr/nls/zh/currency.js"><vars><var name="dojo.cldr.nls.zh.currency" type="Object"/><var name="dojo.cldr.nls.zh" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.zh.gregorian" project="dojo" file="cldr/nls/zh/gregorian.js"><vars><var name="dojo.cldr.nls.zh.gregorian" type="Object"/><var name="dojo.cldr.nls.zh" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.zh-cn.gregorian" project="dojo" file="cldr/nls/zh-cn/gregorian.js"><vars><var name="dojo.cldr.nls.zh-cn.gregorian" type="Object"/><var name="dojo.cldr.nls.zh-cn" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.zh-cn.number" project="dojo" file="cldr/nls/zh-cn/number.js"><vars><var name="dojo.cldr.nls.zh-cn.number" type="Object"/><var name="dojo.cldr.nls.zh-cn" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.nls.zh-tw.number" project="dojo" file="cldr/nls/zh-tw/number.js"><vars><var name="dojo.cldr.nls.zh-tw.number" type="Object"/><var name="dojo.cldr.nls.zh-tw" type="Object"/><var name="dojo.cldr.nls" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cldr.supplemental" project="dojo" file="cldr/supplemental.js"><requires><require environment="common" resource="dojo.i18n"/></requires><vars><var name="dojo.cldr.supplemental.getFirstDayOfWeek" returns="Number" type="Function"><summary>Returns a zero-based index for first day of the week</summary><description>Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar. e.g. Sunday (returns 0), or Monday (returns 1)</description></var><var name="dojo.cldr.supplemental._region" type="Function" private="1"/><var name="dojo.cldr.supplemental.getWeekend" returns="Object {start,end}" type="Function"><summary>Returns a hash containing the start and end days of the weekend</summary><description>Returns a hash containing the start and end days of the weekend according to local custom using locale, or by default in the user's locale. e.g. {start:6, end:0}</description></var><var name="dojo.cldr.supplemental" type="Object"/><var name="dojo.cldr" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.cookie" project="dojo" file="cookie.js"><vars><var name="dojo.cookie" type="Function"><summary>Get or set a cookie. If you pass in one argument, the the value of the cookie is returned If you pass in two arguments, the cookie value is set to the second argument. If you pass in three arguments, the cookie value is set to the second argument, and the options on the third argument are used for extended properties on the cookie</summary></var><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.currency" project="dojo" file="currency.js"><requires><require environment="common" resource="dojo.number"/><require environment="common" resource="dojo.i18n"/><require environment="common" resource="dojo.cldr.monetary"/></requires><vars><var name="dojo.currency._mixInDefaults" type="Function" private="1"/><var name="dojo.currency.format" type="Function"><summary>Format a Number as a String, using locale-specific settings</summary><description>Create a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the CLDR http: // unicode.org/cldr as well as the appropriate symbols and delimiters. See http: // www.unicode.org/reports/tr35/#Number_Elements</description></var><var name="dojo.currency.regexp" returns="String" type="Function"><summary>Builds the regular needed to parse a number</summary></var><var name="dojo.currency.parse" type="Function"><summary>Convert a properly formatted string to a primitive Number, using locale-specific settings.</summary><description>Create a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale. Formatting patterns are implemented using the syntax described at *URL*</description></var><var name="dojo.currency" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.JsonItemStore" project="dojo" file="data/JsonItemStore.js"><requires><require environment="common" resource="dojo.data.util.filter"/><require environment="common" resource="dojo.data.util.simpleFetch"/></requires><vars><var name="dojo.data.JsonItemStore" type="Function"><summary>initializer</summary></var><var name="dojo.data.JsonItemStore.url" prototype="dojo.data.JsonItemStore"/><var name="dojo.data.JsonItemStore._assertIsItem" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>This function tests whether the item passed in is indeed an item in the store.</summary></var><var name="dojo.data.JsonItemStore._assertIsAttribute" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</summary></var><var name="dojo.data.JsonItemStore.getValue" returns="Object || int || Boolean" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.getValue()</summary></var><var name="dojo.data.JsonItemStore.getValues" returns="Array" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.getValues()</summary></var><var name="dojo.data.JsonItemStore.getAttributes" returns="Array" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.getAttributes()</summary></var><var name="dojo.data.JsonItemStore.hasAttribute" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.hasAttribute()</summary></var><var name="dojo.data.JsonItemStore.containsValue" returns="boolean" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.containsValue()</summary></var><var name="dojo.data.JsonItemStore._containsValue" returns="Boolean" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>Internal function for looking at the values contained by the item.</summary><description>Internal function for looking at the values contained by the item. This function allows for denoting if the comparison should be case sensitive for strings or not (for handling filtering cases where string case should not matter)</description></var><var name="dojo.data.JsonItemStore.isItem" returns="Boolean" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.isItem()</summary></var><var name="dojo.data.JsonItemStore.isItemLoaded" returns="boolean" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.isItemLoaded()</summary></var><var name="dojo.data.JsonItemStore.loadItem" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.loadItem()</summary></var><var name="dojo.data.JsonItemStore.getFeatures" returns="Object" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.getFeatures()</summary></var><var name="dojo.data.JsonItemStore._fetchItems" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>See dojo.data.util.simpleFetch.fetch()</summary></var><var name="dojo.data.JsonItemStore._loadFinished" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._arrayOfAllItems" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._jsonData" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore.close" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Read.close()</summary></var><var name="dojo.data.JsonItemStore._getItemsFromLoadedData" returns="Array" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>Function to parse the loaded data into item format and build the internal items array.</summary><description>Function to parse the loaded data into item format and build the internal items array.</description></var><var name="dojo.data.JsonItemStore._itemsByIdentity" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._itemMap.lastItem" instance="dojo.data.JsonItemStore"/><var name="dojo.data.JsonItemStore.getIdentity" returns="mixed" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Identity.getIdentity()</summary></var><var name="dojo.data.JsonItemStore.getItemByIdentity" returns="mixed" type="Function" prototype="dojo.data.JsonItemStore"><summary>See dojo.data.api.Identity.getItemByIdentity()</summary></var><var name="dojo.data.JsonItemStore._forceLoad" type="Function" prototype="dojo.data.JsonItemStore" private="1"><summary>Internal function to force a load of the store if it hasn't occurred yet. This is required for specific functions to work properly. See dojo.data.api.Identity.getItemByIdentity()</summary></var><var name="dojo.data.JsonItemStore._jsonFileUrl" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._features" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._itemMap" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._storeRef" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data.JsonItemStore._itemId" instance="dojo.data.JsonItemStore" private="1"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.api.Identity" project="dojo" file="data/api/Identity.js"><requires><require environment="common" resource="dojo.data.api.Read"/></requires><vars><var name="dojo.data.api.Identity" type="Function"><summary>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.</summary><chains><chain type="prototype" parent="dojo.data.api.Read"/><chain type="call" parent="dojo.data.api.Read"/></chains></var><var name="dojo.data.api.Identity.getFeatures" type="Function" prototype="dojo.data.api.Identity"><summary>See dojo.data.api.Read.getFeatures()</summary></var><var name="dojo.data.api.Identity.getIdentity" returns="string" type="Function" prototype="dojo.data.api.Identity"><summary>Returns a unique identifer for an item. The return value will be either a string or something that has a toString() method (such as, for example, a dojo.uuid.Uuid object). exceptions: Conforming implementations may throw an exception or return null if</summary></var><var name="dojo.data.api.Identity.getItemByIdentity" returns="item" type="Function" prototype="dojo.data.api.Identity"><summary>Given the identity of an item, this method returns the item that has that identity. Conforming implementations should return null if there is no item with the given identity. Implementations of getItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server, in which case the call to getItemByIdentity() will block until the getItemByIdentity() implementation has the item to return.</summary></var><var name="dojo.data.api" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.api.Notification" project="dojo" file="data/api/Notification.js"><requires><require environment="common" resource="dojo.data.api.Read"/></requires><vars><var name="dojo.data.api.Notification" type="Function"><summary>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.</summary><description>This API defines a set of APIs that all datastores that conform to the Notifications API must implement. In general, most stores will implement these APIs as no-op functions for users who wish to monitor them to be able to connect to then via dojo.event.connect(). For non-users of dojo.event.connect, they should be able to just replace the method on the store to obtain notifications. Both read-only and read-write stores may implement this feature. In the case of a read-only store, this feature makes sense if the store itself does internal polling to a back-end server and periodically updates its cache of items (deletes, adds, and updates). examples: function onSet(item, attribute, oldValue, newValue) { // Do something with the information... }; var store = new some.newStore(); dojo.event.connect(store, "onSet", onUpdate);</description><chains><chain type="prototype" parent="dojo.data.api.Read"/><chain type="call" parent="dojo.data.api.Read"/></chains></var><var name="dojo.data.api.Notification.getFeatures" type="Function" prototype="dojo.data.api.Notification"><summary>See dojo.data.api.Read.getFeatures()</summary></var><var name="dojo.data.api.Notification.onSet" returns="Nothing." type="Function" prototype="dojo.data.api.Notification"><summary>This method is called any time an item is modified via setValue, setValues, unsetAttribute, etc.</summary><description>This method is called any time an item is modified via setValue, setValues, unsetAttribute, etc. Its purpose is to provide a hook point for those who wish to monitor actions on items in the store in a simple manner. The general expected usage is to dojo.event.connect() to the store's implementation and be called after the store method is called.</description></var><var name="dojo.data.api.Notification.onNew" returns="Nothing." type="Function" prototype="dojo.data.api.Notification"><summary>This method is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.</summary><description>This method is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.</description></var><var name="dojo.data.api.Notification.onDelete" returns="Nothing." type="Function" prototype="dojo.data.api.Notification"><summary>This method is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.</summary><description>This method is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.</description></var><var name="dojo.data.api" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.api.Read" project="dojo" file="data/api/Read.js"><requires><require environment="common" resource="dojo.data.api.Request"/></requires><vars><var name="dojo.data.api.Read" type="Function"><summary>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more information on the dojo.data APIs, please visit: http: // www.dojotoolkit.org/node/98</summary></var><var name="dojo.data.api.Read.getValue" returns="a literal, an item, null, or undefined (never an array)" type="Function" prototype="dojo.data.api.Read"><summary>Returns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given</summary><description>Saying that an "item x does not have a value for an attribute y" is identical to saying that an "item x does not have attribute y". It is an oxymoron to say "that attribute is present but has no values" or "the item has that attribute but does not have any attribute values". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined. exceptions: Conforming implementations should throw an exception if *item* is not an item, or *attribute* is neither an attribute object or a string. examples: var darthVader = store.getValue(lukeSkywalker, "father");</description></var><var name="dojo.data.api.Read.getValues" returns="an array that may contain literals and items" type="Function" prototype="dojo.data.api.Read"><summary>This getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many</summary></var><var name="dojo.data.api.Read.getAttributes" returns="array" type="Function" prototype="dojo.data.api.Read"><summary>Returns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: []. exceptions: Throws an exception if *item* is not an item. examples: var array = store.getAttributes(kermit);</summary></var><var name="dojo.data.api.Read.hasAttribute" returns="boolean" type="Function" prototype="dojo.data.api.Read"><summary>Returns true if the given *item* has a value for the given *attribute*. exceptions: Throws an exception if *item* is not an item, or *attribute* is neither an</summary></var><var name="dojo.data.api.Read.containsValue" returns="boolean" type="Function" prototype="dojo.data.api.Read"><summary>Returns true if the given *value* is one of the values that getValues() would return. exceptions: Throws an exception if *item* is not an item, or *attribute* is neither an</summary></var><var name="dojo.data.api.Read.isItem" returns="boolean" type="Function" prototype="dojo.data.api.Read"><summary>Returns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item. examples: var yes = store.isItem(store.newItem()); var no = store.isItem("green");</summary></var><var name="dojo.data.api.Read.isItemLoaded" returns="boolean" type="Function" prototype="dojo.data.api.Read"><summary>Returns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server). examples: var yes = store.isItemLoaded(store.newItem()); var no = store.isItemLoaded("green");</summary></var><var name="dojo.data.api.Read.loadItem" type="Function" prototype="dojo.data.api.Read"><summary>Given an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.</summary></var><var name="dojo.data.api.Read.fetch" returns="an object conforming to the dojo.data.api.Request API" type="Function" prototype="dojo.data.api.Read"><summary>Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.</summary><description>A Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object. This does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see dojo.data.api.Request</description></var><var name="dojo.data.api.Read.getFeatures" type="Function" prototype="dojo.data.api.Read"><summary>The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the 'dojo.data.api.Read' interface, so the getFeatures() method will return an object like this one: {'dojo.data.api.Read': true}. A more sophisticated datastore might implement a variety of interface features, like 'dojo.data.api.Read', 'dojo.data.api.Write', 'dojo.data.api.Identity', and 'dojo.data.api.Attribution'.</summary></var><var name="dojo.data.api.Read.close" type="Function" prototype="dojo.data.api.Read"><summary>The close() method is intended for instructing the store to 'close' out any information associated with a particular request.</summary><description>The close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to recieve as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.</description></var><var name="dojo.data.api" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.api.Request" project="dojo" file="data/api/Request.js"><vars><var name="dojo.data.api.Request" type="Function"><summary>This class defines out the semantics of what a 'Request' object looks like when returned from a fetch() method. In general, a request object is nothing more than the original keywordArgs from fetch with an abort function attached to it to allow users to abort a particular request if they so choose. No other functions are required on a general Request object return. That does not inhibit other store implementations from adding extentions to it, of course. This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more details on fetch, see dojo.data.api.Read.fetch().</summary></var><var name="dojo.data.api.Request.abort" type="Function" prototype="dojo.data.api.Request"><summary>This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing.</summary><description>This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing. For more details on the fetch() api, please see dojo.data.api.Read.fetch().</description></var><var name="dojo.data.api" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.api.Write" project="dojo" file="data/api/Write.js"><requires><require environment="common" resource="dojo.data.api.Read"/></requires><vars><var name="dojo.data.api.Write" type="Function"><summary>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.</summary><chains><chain type="prototype" parent="dojo.data.api.Read"/><chain type="call" parent="dojo.data.api.Read"/></chains></var><var name="dojo.data.api.Write.getFeatures" type="Function" prototype="dojo.data.api.Write"><summary>See dojo.data.api.Read.getFeatures()</summary></var><var name="dojo.data.api.Write.newItem" returns="item" type="Function" prototype="dojo.data.api.Write"><summary>Returns a newly created item. Sets the attributes of the new item based on the *keywordArgs* provided. In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item. exceptions: Throws an exception if *keywordArgs* is a string or a number or anything other than a simple anonymous object. examples: var kermit = store.newItem({name: "Kermit", color:[blue, green]});</summary></var><var name="dojo.data.api.Write.deleteItem" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Deletes an item from the store. exceptions: Throws an exception if the argument *item* is not an item (if store.isItem(item) returns false). examples: var success = store.deleteItem(kermit);</summary></var><var name="dojo.data.api.Write.setValue" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Sets the value of an attribute on an item. Replaces any previous value or values. exceptions: Throws an exception if *item* is not an item, or if *attribute* is neither an attribute object or a string. Throws an exception if *value* is undefined. examples: var success = store.set(kermit, "color", "green");</summary></var><var name="dojo.data.api.Write.setValues" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Adds each value in the *values* array as a value of the given</summary></var><var name="dojo.data.api.Write.unsetAttribute" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Deletes all the values of an attribute on an item. exceptions: Throws an exception if *item* is not an item, or if *attribute* is neither an attribute object or a string. examples: var success = store.unsetAttribute(kermit, "color"); if (success) {assert(!store.hasAttribute(kermit, "color"));}</summary></var><var name="dojo.data.api.Write.save" returns="Nothing. Since the saves are generally asynchronous, there is no need to return anything. All results are passed via callbacks. examples: store.save({onComplete: onSave}); store.save({scope: fooObj, onComplete: onSave, onError: saveFailed});" type="Function" prototype="dojo.data.api.Write"><summary>Saves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion. The outcome of the save action is is passed into the set of supported callbacks for the save.</summary></var><var name="dojo.data.api.Write.revert" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Discards any unsaved changes.</summary><description>Discards any unsaved changes. examples: var success = store.revert();</description></var><var name="dojo.data.api.Write.isDirty" returns="boolean" type="Function" prototype="dojo.data.api.Write"><summary>Given an item, isDirty() returns true if the item has been modified since the last save(). If isDirty() is called with no *item* argument, then this method returns true if any item has been modified since the last save(). exceptions: Throws an exception if isDirty() is passed an argument and the argument is not an item. examples: var trueOrFalse = store.isDirty(kermit); // true if kermit is dirty var trueOrFalse = store.isDirty(); // true if any item is dirty</summary></var><var name="dojo.data.api" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.util.filter" project="dojo" file="data/util/filter.js"><vars><var name="dojo.data.util.filter.patternToRegExp" returns="RegExp" type="Function"><summary>Helper function to convert a simple pattern to a regular expression for matching.</summary><description>Returns a regular expression object that conforms to the defined conversion rules. For example: ca* -&gt; /^ca.*$/ *ca* -&gt; /^.*ca.*$/ *c\*a* -&gt; /^.*c\*a.*$/ *c\*a?* -&gt; /^.*c\*a..*$/ and so on.</description></var><var name="dojo.data.util.filter" type="Object"/><var name="dojo.data.util" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.util.simpleFetch" project="dojo" file="data/util/simpleFetch.js"><requires><require environment="common" resource="dojo.data.util.sorter"/></requires><vars><var name="dojo.data.util.simpleFetch.fetch" returns="Object" type="Function"><summary>The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development. The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a _fetchItems() method. The _fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The _fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The _fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The _fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the _fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler. For more information on this specific function, see dojo.data.api.Read.fetch()</summary><chains><chain type="call" parent="requestObject.onError"/><chain type="call" parent="oldAbortFunction"/><chain type="call" parent="requestObject.onBegin"/><chain type="call" parent="requestObject.onItem"/><chain type="call" parent="requestObject.onComplete"/></chains></var><var name="dojo.data.util.simpleFetch" type="Object"/><var name="dojo.data.util" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.data.util.sorter" project="dojo" file="data/util/sorter.js"><vars><var name="dojo.data.util.sorter.basicComparator" returns="int, {-1,0,1}" type="Function"><summary>Basic comparision function that compares if an item is greater or less than another item</summary></var><var name="dojo.data.util.sorter.createSortFunction" returns="int" type="Function"><summary>Helper function to generate the sorting function based off the list of sort attributes.</summary><description>The sort function creation will look for a property on the store called 'comparatorMap'. If it exists it will look in the mapping for comparisons function for the attributes. If one is found, it will use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates. Returns the sorting function for this particular list of attributes and sorting directions.</description></var><var name="dojo.data.util.sorter" type="Object"/><var name="dojo.data.util" type="Object"/><var name="dojo.data" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.date.locale" project="dojo" file="date/locale.js"><requires><require environment="common" resource="dojo.date"/><require environment="common" resource="dojo.cldr.supplemental"/><require environment="common" resource="dojo.regexp"/><require environment="common" resource="dojo.string"/><require environment="common" resource="dojo.i18n"/></requires><vars><var name="dojo.date.locale.getNames" returns="Array" type="Function"><summary>Used to get localized strings from dojo.cldr for day or month names.</summary></var><var name="dojo.date.locale.isWeekend" returns="Boolean" type="Function"><summary>Determines if the date falls on a weekend, according to local custom.</summary></var><var name="dojo.date.setDayOfYear" returns="Date" type="Function"><summary>sets dateObject according to day of the year (1..366)</summary></var><var name="dojo.date.getDayOfYear" type="Function"><summary>gets the day of the year as represented by dateObject</summary></var><var name="dojo.date.setWeekOfYear" type="Function"/><var name="dojo.date.getWeekOfYear" type="Function"/><var name="dojo.date.locale.format" returns="String" type="Function"><summary>Format a Date object as a String, using locale-specific settings.</summary><description>Create a string from a Date object using a known localized pattern. By default, this method formats both date and time from dateObject. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the addCustomFormats method. Formatting patterns are implemented using the syntax described at http: // www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns</description></var><var name="dojo.date.locale.regexp" returns="String" type="Function"><summary>Builds the regular needed to parse a localized date</summary></var><var name="dojo.date.locale._parseInfo" type="Function" private="1"/><var name="dojo.date.locale.parse" returns="mixed" type="Function"><summary>Convert a properly formatted string to a primitive Date object, using locale-specific settings.</summary><description>Create a Date object from a string using a known localized pattern. By default, this method parses looking for both date and time in the string. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the addCustomFormats method. Formatting patterns are implemented using the syntax described at http: // www.unicode.org/reports/tr35/#Date_Format_Patterns</description></var><var name="dojo.date.locale.addCustomFormats" type="Function"><summary>Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines.</summary><description>The user may add custom localized formats where the bundle has properties following the same naming convention used by dojo for the CLDR data: dateFormat-xxxx / timeFormat-xxxx The pattern string should match the format used by the CLDR. See dojo.date.format for details. The resources must be loaded by dojo.requireLocalization() prior to use</description></var><var name="dojo.date.locale._getGregorianBundle" returns="Object" type="Function" private="1"/><var name="dojo.date.locale" type="Object"/><var name="dojo.date" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.date.stamp" project="dojo" file="date/stamp.js"><requires><require environment="common" resource="dojo.string"/></requires><vars><var name="dojo.date.stamp.setIso8601" returns="Date or null" type="Function"><summary>sets a Date object based on an ISO 8601 formatted string (uses date and time)</summary></var><var name="dojo.date.stamp.fromIso8601" type="Function"><summary>returns a Date object based on an ISO 8601 formatted string (uses date and time)</summary></var><var name="dojo.date.stamp.setIso8601Date" returns="mixed" type="Function"><summary>sets a Date object based on an ISO 8601 formatted string (date only)</summary></var><var name="dojo.date.stamp.fromIso8601Date" type="Function"><summary>returns a Date object based on an ISO 8601 formatted string (date only)</summary></var><var name="dojo.date.stamp.setIso8601Time" returns="mixed" type="Function"><summary>sets a Date object based on an ISO 8601 formatted string (time only)</summary></var><var name="dojo.date.stamp.fromIso8601Time" type="Function"><summary>returns a Date object based on an ISO 8601 formatted string (time only)</summary></var><var name="dojo.date.stamp.toRfc3339" returns="String" type="Function"><summary>Format a JavaScript Date object as a string according to RFC 3339</summary></var><var name="dojo.date.stamp.fromRfc3339" returns="Date or null" type="Function"><summary>Create a JavaScript Date object from a string formatted according to RFC 3339</summary></var><var name="dojo.date.stamp" type="Object"/><var name="dojo.date" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.date" project="dojo" file="date.js"><vars><var name="dojo.date.getDaysInMonth" returns="Number" type="Function"><summary>returns the number of days in the month used by dateObject</summary></var><var name="dojo.date.isLeapYear" returns="Boolean" type="Function"><summary>Determines if the year of the dateObject is a leap year</summary><description>Leap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.</description></var><var name="dojo.date.getTimezoneName" returns="mixed" type="Function"><summary>Get the user's time zone as provided by the browser</summary><description>Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See http: // www.twinsun.com/tz/tz-link.htm Note: results may be inconsistent across browsers.</description></var><var name="dojo.date.compare" returns="int" type="Function"><summary>Compare two date objects by date, time, or both.</summary><description>Returns 0 if equal, positive if a &gt; b, else negative.</description></var><var name="dojo.date.add" returns="Date" type="Function"><summary>Add to a Date in intervals of different size, from milliseconds to years</summary></var><var name="dojo.date.difference" returns="mixed" type="Function"><summary>Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.</summary></var><var name="dojo.date" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.avatar" project="dojo" file="dnd/avatar.js"><requires><require environment="common" resource="dojo.dnd.common"/></requires><vars><var name="dojo.dnd.Avatar" type="Function"><summary>an object, which represents transferred DnD items visually</summary></var><var name="dojo.dnd.Avatar.manager" instance="dojo.dnd.Avatar"/><var name="dojo.dnd.Avatar.offX" instance="dojo.dnd.Avatar"/><var name="dojo.dnd.Avatar.offY" instance="dojo.dnd.Avatar"/><var name="manager" type="Object"><summary>a DnD manager object</summary></var><var name="dojo.dnd.Avatar.construct" type="Function"><summary>a constructor function; it is separate so it can be (dynamically) overwritten in case of need</summary></var><var name="dojo.dnd.Avatar.construct.node" instance="dojo.dnd.Avatar.construct"/><var name="dojo.dnd.Avatar.destroy" type="Function"><summary>a desctructor for the avatar, called to remove all references so it can be garbage-collected</summary></var><var name="dojo.dnd.Avatar.destroy.node" instance="dojo.dnd.Avatar.destroy"/><var name="dojo.dnd.Avatar.update" type="Function"><summary>updates the avatar to reflect the current DnD state dojo.html[(this.manager.canDropFlag ? "add" : "remove") + "Class"](this.node, "dojoDndAvatarCanDrop");</summary></var><var name="dojo.dnd.Avatar.update.node.className" instance="dojo.dnd.Avatar.update"/><var name="dojo.dnd.Avatar._generateText" type="Function" private="1"><summary>generates a proper text to reflect copying or moving of items</summary></var><var name="dojo.dnd.avatar" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.common" project="dojo" file="dnd/common.js"><vars><var name="dojo.dnd.multiSelectKey" returns="Boolean" type="Function"><summary>abstracts away the difference between selection on Mac and PC</summary></var><var name="dojo.dnd._getOffset" type="Function" private="1"><summary>calculates an offset for a content box</summary></var><var name="dojo.dnd.getUniqueId" type="Function"><summary>returns a unique string for use with any DOM element</summary></var><var name="dojo.dnd.common" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.container" project="dojo" file="dnd/container.js"><requires><require environment="common" resource="dojo.dnd.common"/></requires><vars><var name="dojo.dnd.Container" type="Function"/><var name="dojo.dnd.Container.onMouseOver" type="Function" prototype="dojo.dnd.Container"><summary>event processor for onmouseover</summary></var><var name="dojo.dnd.Container.current" instance="dojo.dnd.Container"/><var name="dojo.dnd.Container.onMouseOut" type="Function" prototype="dojo.dnd.Container"><summary>event processor for onmouseout</summary></var><var name="dojo.dnd.Container.destroy" type="Function" prototype="dojo.dnd.Container"><summary>prepares the object to be garbage-collected</summary></var><var name="dojo.dnd.Container.node" instance="dojo.dnd.Container"/><var name="dojo.dnd.Container.getAllNodes" returns="Array" type="Function" prototype="dojo.dnd.Container"><summary>returns a list (an array) of all valid child nodes</summary></var><var name="dojo.dnd.Container.insertNodes" returns="self" type="Function" prototype="dojo.dnd.Container"><summary>inserts an array of new nodes before/after an anchor node</summary></var><var name="dojo.dnd.Container.onOverEvent" type="Function" prototype="dojo.dnd.Container"><summary>this function is called once, when mouse is over our container</summary></var><var name="dojo.dnd.Container.onOutEvent" type="Function" prototype="dojo.dnd.Container"><summary>this function is called once, when mouse is out of our container</summary></var><var name="dojo.dnd.Container._changeState" type="Function" prototype="dojo.dnd.Container" private="1"><summary>changes a named state to new state value</summary></var><var name="dojo.dnd.Container.node.className" instance="dojo.dnd.Container"/><var name="dojo.dnd.Container._addItemClass" type="Function" prototype="dojo.dnd.Container" private="1"><summary>adds a class with prefix "dojoDndItem"</summary></var><var name="dojo.dnd.Container._removeItemClass" type="Function" prototype="dojo.dnd.Container" private="1"><summary>removes a class with prefix "dojoDndItem"</summary></var><var name="dojo.dnd.Container._getChildByEvent" returns="Node" type="Function" prototype="dojo.dnd.Container" private="1"><summary>gets a child, which is under the mouse at the moment, or null</summary></var><var name="dojo.dnd._createNode" returns="Function" type="Function" private="1"><summary>returns a function, which creates an element of given tag (SPAN by default) and sets its innerHTML to given text</summary></var><var name="dojo.dnd._createTrTd" returns="Node" type="Function" private="1"><summary>creates a TR/TD structure with given text as an innerHTML of TD</summary></var><var name="dojo.dnd._createSpan" returns="Node" type="Function" private="1"><summary>creates a SPAN element with given text as its innerHTML</summary></var><var name="dojo.dnd._defaultCreator" returns="Function" type="Function" private="1"><summary>takes a container node, and returns an appropriate creator function</summary></var><var name="dojo.dnd._defaultSelector" returns="Object" type="Function" private="1"><summary>takes a container node, and returns a parent, and a list of children</summary></var><var name="dojo.dnd._defaultCreatorNodes.ul"/><var name="dojo.dnd._defaultCreatorNodes.ol"/><var name="dojo.dnd._defaultCreatorNodes.div"/><var name="dojo.dnd._defaultCreatorNodes.p"/><var name="dojo.dnd.container" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.manager" project="dojo" file="dnd/manager.js"><requires><require environment="common" resource="dojo.dnd.common"/><require environment="common" resource="dojo.dnd.avatar"/></requires><vars><var name="dojo.dnd.Manager" type="Function"><summary>the manager of DnD operations (usually a singleton)</summary></var><var name="dojo.dnd.Manager.avatar" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.source" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.nodes" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.copy" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.target" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.canDropFlag" instance="dojo.dnd.Manager"/><var name="dojo.dnd.Manager.events" instance="dojo.dnd.Manager"/><var name="dojo.dnd.manager" returns="Object" type="Function"><summary>returns the current DnD manager, creates one if it is not created yet</summary></var><var name="dojo.dnd.Manager.overSource" type="Function"><summary>called when a source detected a mouse-over conditiion</summary></var><var name="dojo.dnd.Manager.overSource.target" instance="dojo.dnd.Manager.overSource"/><var name="dojo.dnd.Manager.outSource" type="Function"><summary>called when a source detected a mouse-out conditiion</summary></var><var name="dojo.dnd.Manager.outSource.target" instance="dojo.dnd.Manager.outSource"/><var name="dojo.dnd.Manager.outSource.canDropFlag" instance="dojo.dnd.Manager.outSource"/><var name="dojo.dnd.Manager.startDrag" type="Function"><summary>called to initiate the DnD operation</summary></var><var name="dojo.dnd.Manager.startDrag.source" instance="dojo.dnd.Manager.startDrag"/><var name="dojo.dnd.Manager.startDrag.nodes" instance="dojo.dnd.Manager.startDrag"/><var name="dojo.dnd.Manager.startDrag.copy" instance="dojo.dnd.Manager.startDrag"/><var name="dojo.dnd.Manager.startDrag.avatar" instance="dojo.dnd.Manager.startDrag"/><var name="dojo.dnd.Manager.startDrag.events" instance="dojo.dnd.Manager.startDrag"/><var name="source" type="Object"><summary>the source which provides items</summary></var><var name="nodes" type="Array"><summary>the list of transferred items</summary></var><var name="copy" type="Boolean"><summary>the copy status</summary></var><var name="dojo.dnd.Manager.canDrop" type="Function"><summary>called to notify if the current target can accept items</summary></var><var name="dojo.dnd.Manager.canDrop.canDropFlag" instance="dojo.dnd.Manager.canDrop"/><var name="dojo.dnd.Manager.stopDrag" type="Function"><summary>stop the DnD in progress dojo.html.removeClass(dojo.body(), "dojoDndCopy"); dojo.html.removeClass(dojo.body(), "dojoDndMove");</summary></var><var name="dojo.dnd.Manager.stopDrag.events" instance="dojo.dnd.Manager.stopDrag"/><var name="dojo.dnd.Manager.stopDrag.avatar" instance="dojo.dnd.Manager.stopDrag"/><var name="dojo.dnd.Manager.stopDrag.source" instance="dojo.dnd.Manager.stopDrag"/><var name="dojo.dnd.Manager.stopDrag.nodes" instance="dojo.dnd.Manager.stopDrag"/><var name="dojo.dnd.Manager.makeAvatar" type="Function"><summary>makes the avatar, it is separate to be overwritten dynamically, if needed</summary></var><var name="dojo.dnd.Manager.updateAvatar" type="Function"><summary>updates the avatar, it is separate to be overwritten dynamically, if needed</summary></var><var name="dojo.dnd.Manager.onMouseMove" type="Function"><summary>event processor for onmousemove</summary></var><var name="dojo.dnd.Manager.onMouseUp" type="Function"><summary>event processor for onmouseup</summary></var><var name="dojo.dnd.Manager.onKeyDown" type="Function"><summary>event processor for onkeydown, watching for CTRL for copy/move status</summary></var><var name="dojo.dnd.Manager.onKeyUp" type="Function"><summary>event processor for onkeyup, watching for CTRL for copy/move status</summary></var><var name="dojo.dnd.Manager._setCopyStatus" type="Function" private="1"><summary>changes the copy status</summary></var><var name="dojo.dnd.Manager._setCopyStatus.copy" instance="dojo.dnd.Manager._setCopyStatus"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.move" project="dojo" file="dnd/move.js"><requires><require environment="common" resource="dojo.dnd.common"/></requires><vars><var name="dojo.dnd.Mover" type="Function"><summary>an object, which makes a node follow the mouse</summary></var><var name="dojo.dnd.Mover.node" instance="dojo.dnd.Mover"/><var name="dojo.dnd.Mover.posX" instance="dojo.dnd.Mover"/><var name="dojo.dnd.Mover.posY" instance="dojo.dnd.Mover"/><var name="dojo.dnd.Mover.firstEvent" instance="dojo.dnd.Mover"/><var name="dojo.dnd.Mover.events" instance="dojo.dnd.Mover"/><var name="node" type="Node"><summary>a node (or node's id) to be moved</summary></var><var name="dojo.dnd.Moveable" type="Function"><summary>an object, which makes a node moveable</summary></var><var name="dojo.dnd.Moveable.node" instance="dojo.dnd.Moveable"/><var name="dojo.dnd.Moveable.handle" instance="dojo.dnd.Moveable"/><var name="dojo.dnd.Moveable.events" instance="dojo.dnd.Moveable"/><var name="handle" type="Node"><summary>a node (or node's id), which is used as a mouse handle; if omitted, the node itself is used as a handle</summary></var><var name="dojo.dnd.Mover.onMouseMove" type="Function"><summary>event processor for onmousemove</summary></var><var name="dojo.dnd.Mover._makeAbsolute" type="Function" private="1"><summary>makes the node absolute; it is meant to be called only once</summary></var><var name="dojo.dnd.Mover._makeAbsolute.node.style.position" instance="dojo.dnd.Mover._makeAbsolute"/><var name="dojo.dnd.Mover.destroy" type="Function"><summary>stops the move, deletes all references, so the object can be garbage-collected</summary></var><var name="dojo.dnd.Mover.destroy.node" instance="dojo.dnd.Mover.destroy"/><var name="dojo.dnd.Moveable.onMouseDown" type="Function"><summary>event processor for onmousedown, creates a Mover for the node</summary></var><var name="dojo.dnd.Moveable.destroy" type="Function"><summary>stops watching for possible move, deletes all references, so the object can be garbage-collected</summary></var><var name="dojo.dnd.Moveable.destroy.node" instance="dojo.dnd.Moveable.destroy"/><var name="dojo.dnd.move" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.selector" project="dojo" file="dnd/selector.js"><requires><require environment="common" resource="dojo.dnd.common"/><require environment="common" resource="dojo.dnd.container"/></requires><vars><var name="dojo.dnd.Selector" type="Function"><summary>a constructor of the Selector</summary><chains><chain type="prototype" parent="dojo.dnd.Container"/><chain type="call" parent="dojo.dnd.Container"/></chains></var><var name="dojo.dnd.Selector.onMouseDown" type="Function" prototype="dojo.dnd.Selector"><summary>event processor for onmousedown</summary></var><var name="dojo.dnd.Selector.simpleSelection" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.selection" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.anchor" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.anchor.className" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.onMouseUp" type="Function" prototype="dojo.dnd.Selector"><summary>event processor for onmouseup</summary></var><var name="dojo.dnd.Selector.onMouseMove" type="Function" prototype="dojo.dnd.Selector"><summary>event processor for onmousemove</summary></var><var name="dojo.dnd.Selector.onOverEvent" type="Function" prototype="dojo.dnd.Selector"><summary>this function is called once, when mouse is over our container</summary></var><var name="dojo.dnd.Selector.onmousemoveEvent" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.onOutEvent" type="Function" prototype="dojo.dnd.Selector"><summary>this function is called once, when mouse is out of our container</summary></var><var name="dojo.dnd.Selector.destroy" type="Function" prototype="dojo.dnd.Selector"><summary>prepares the object to be garbage-collected</summary><chains><chain type="call" parent="dojo.dnd.Selector.superclass.destroy"/></chains></var><var name="dojo.dnd.Selector.getSelectedNodes" returns="Array" type="Function" prototype="dojo.dnd.Selector"><summary>returns a list (an array) of selected nodes</summary></var><var name="dojo.dnd.Selector.selectNone" returns="self" type="Function" prototype="dojo.dnd.Selector"><summary>unselects all items</summary></var><var name="dojo.dnd.Selector.selectAll" returns="self" type="Function" prototype="dojo.dnd.Selector"><summary>selects all items</summary></var><var name="dojo.dnd.Selector.deleteSelectedNodes" returns="self" type="Function" prototype="dojo.dnd.Selector"><summary>deletes all selected items</summary></var><var name="dojo.dnd.Selector.insertNodes" returns="self" type="Function" prototype="dojo.dnd.Selector"><summary>inserts new data items (see Container's insertNodes method for details)</summary><chains><chain type="call" parent="dojo.dnd.Selector.superclass.insertNodes"/></chains></var><var name="dojo.dnd.Selector.nodeCreator" instance="dojo.dnd.Selector"/><var name="dojo.dnd.Selector.insertNodes.nodeCreator" type="Function" instance="dojo.dnd.Selector.insertNodes"/><var name="dojo.dnd.Selector.singular" instance="dojo.dnd.Selector"/><var name="dojo.dnd.selector" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dnd.source" project="dojo" file="dnd/source.js"><requires><require environment="common" resource="dojo.dnd.selector"/><require environment="common" resource="dojo.dnd.manager"/></requires><vars><var name="dojo.dnd.Source" type="Function"><summary>a constructor of the Selector</summary><chains><chain type="prototype" parent="dojo.dnd.Selector"/><chain type="call" parent="dojo.dnd.Selector"/></chains></var><var name="dojo.dnd.Source.onMouseMove" type="Function" prototype="dojo.dnd.Source"><summary>event processor for onmousemove</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.onMouseMove"/></chains></var><var name="dojo.dnd.Source.targetState" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.targetBox" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.onMouseDown" type="Function" prototype="dojo.dnd.Source"><summary>event processor for onmousedown</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.onMouseDown"/></chains></var><var name="dojo.dnd.Source.mouseDown" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.onMouseUp" type="Function" prototype="dojo.dnd.Source"><summary>event processor for onmouseup</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.onMouseUp"/></chains></var><var name="dojo.dnd.Source.onDndSourceOver" type="Function" prototype="dojo.dnd.Source"><summary>topic event processor for ondndsourceover, called when detected a current source</summary></var><var name="dojo.dnd.Source.onDndStart" type="Function" prototype="dojo.dnd.Source"><summary>topic event processor for ondndstart, called to initiate the DnD operation</summary></var><var name="dojo.dnd.Source.isDragging" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.onDndDrop" type="Function" prototype="dojo.dnd.Source"><summary>topic event processor for ondnddrop, called to finish the DnD operation</summary></var><var name="dojo.dnd.Source.nodeCreator" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.onDndDrop.nodeCreator" type="Function" instance="dojo.dnd.Source.onDndDrop"/><var name="dojo.dnd.Source.onDndCancel" type="Function" prototype="dojo.dnd.Source"><summary>topic event processor for ondndcancel, called to cancel the DnD operation</summary></var><var name="dojo.dnd.Source.targetAnchor" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.before" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.onOverEvent" type="Function" prototype="dojo.dnd.Source"><summary>this function is called once, when mouse is over our container</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.onOverEvent"/></chains></var><var name="dojo.dnd.Source.onOutEvent" type="Function" prototype="dojo.dnd.Source"><summary>this function is called once, when mouse is out of our container</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.onOutEvent"/></chains></var><var name="dojo.dnd.Source.destroy" type="Function" prototype="dojo.dnd.Source"><summary>prepares the object to be garbage-collected</summary><chains><chain type="call" parent="dojo.dnd.Source.superclass.destroy"/></chains></var><var name="dojo.dnd.Source.checkAcceptance" returns="Boolean" type="Function" prototype="dojo.dnd.Source"><summary>checks, if the target can accept nodes from this source</summary></var><var name="dojo.dnd.Source._markTargetAnchor" type="Function" prototype="dojo.dnd.Source" private="1"><summary>assigns a class to the current target anchor based on "before" status</summary></var><var name="dojo.dnd.Source.current" instance="dojo.dnd.Source"/><var name="before" type="Boolean"><summary>insert before, if true, after otherwise</summary></var><var name="dojo.dnd.Source._unmarkTargetAnchor" type="Function" prototype="dojo.dnd.Source" private="1"><summary>removes a class of the current target anchor based on "before" status</summary></var><var name="dojo.dnd.Source._markDndStatus" type="Function" prototype="dojo.dnd.Source" private="1"><summary>changes source's state based on "copy" status</summary></var><var name="dojo.dnd.Source.isSource" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.accept" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.horizontal" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.sourceState" instance="dojo.dnd.Source"/><var name="dojo.dnd.Source.topics" instance="dojo.dnd.Source"/><var name="dojo.dnd.source" type="Object"/><var name="dojo.dnd" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.dojo" project="dojo" file="dojo.js"><vars><var name="dojo.dojo" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.fx" project="dojo" file="fx.js"><vars><var name="dojo.fx.chain" type="Function"/><var name="dojo.fx.combine" type="Function"/><var name="dojo.fx.slideIn" returns="dojo._Animation" type="Function"><summary>Returns an animation that will show and wipe in "nodes". nodes: An array of DOMNodes or one DOMNode. duration: Duration of the animation in milliseconds. easing: An easing function.</summary></var><var name="dojo.fx.slideIn.properties.height.end" instance="dojo.fx.slideIn"/><var name="dojo.fx.slideOut" returns="mixed" type="Function"><summary>Returns an animation that will wipe out and hide "nodes". nodes: An array of DOMNodes or one DOMNode. duration: Duration of the animation in milliseconds. easing: An easing function.</summary></var><var name="dojo.fx.slideTo" returns="dojo._Animation" type="Function"><summary>Returns an animation that will slide "nodes" from its current position to the position defined in "coords". nodes: An array of DOMNodes or one DOMNode. coords: { top: Decimal?, left: Decimal? }</summary></var><var name="dojo.fx" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.i18n" project="dojo" file="i18n.js"><vars><var name="dojo.i18n.getLocalization" returns="Object" type="Function"><summary>Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale.</summary><description>Returns a hash containing name/value pairs in its prototypesuch that values can be easily overridden. Throws an exception if the bundle is not found. Bundle must have already been loaded by dojo.requireLocalization() or by a build optimization step.</description></var><var name="dojo.i18n.normalizeLocale" returns="String" type="Function"><summary>Returns canonical form of locale, as used by Dojo.</summary><description>All variants are case-insensitive and are separated by '-' as specified in RFC 3066. If no locale is specified, the dojo.locale is returned. dojo.locale is defined by the user agent's locale unless overridden by djConfig.</description></var><var name="dojo.i18n._searchLocalePath" type="Function" private="1"><summary>A helper method to assist in searching for locale-based resources. Will iterate through the variants of a particular locale, either up or down, executing a callback function. For example, "en-us" and true will try "en-us" followed by "en" and finally "ROOT".</summary></var><var name="dojo.i18n._preloadLocalizations" returns="Boolean" type="Function" private="1"><summary>Load built, flattened resource bundles, if available for all locales used in the page. Execute only once. Note that this is a no-op unless there is a build.</summary></var><var name="dojo.i18n._requireLocalization" type="Function" private="1"/><var name="dojo.i18n" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.io.script" project="dojo" file="io/script.js"><vars><var name="dojo.io.script.get" type="Function"><summary>sends a get request using a dynamically created script tag. TODOC: valid arguments.</summary></var><var name="dojo.io.script.attach" type="Function"/><var name="dojo.io.script.remove" type="Function"><summary>removes the script element with the given id. FIXME: Convert to destroyNode function if/when it exists?</summary></var><var name="dojo.io.script._makeScriptDeferred" type="Function" private="1"><summary>sets up the Deferred object for script request.</summary></var><var name="dojo.io.script._deferredCancel" type="Function" private="1"><summary>canceller function for dojo._ioSetArgs call.</summary></var><var name="dojo.io.script._deferredOk" type="Function" private="1"><summary>okHandler function for dojo._ioSetArgs call.</summary></var><var name="dojo.io.script._deferredError" type="Function" private="1"><summary>errHandler function for dojo._ioSetArgs call.</summary></var><var name="dojo.io.script._deadScripts" private="1"/><var name="dojo.io.script._counter" private="1"/><var name="dojo.io.script._validCheck" type="Function" private="1"><summary>inflight check function to see if dfd is still valid.</summary></var><var name="dojo.io.script._ioCheck" type="Function" private="1"><summary>inflight check function to see if IO finished.</summary></var><var name="dojo.io.script._resHandle" type="Function" private="1"><summary>inflight function to handle a completed response.</summary></var><var name="dojo.io.script._jsonpCallback" type="Function" private="1"><summary>generic handler for jsonp callback. A pointer to this function is used for all jsonp callbacks. NOTE: the "this" in this function will be the Deferred object that represents the script request.</summary></var><var name="dojo.io.script._jsonpCallback.ioArgs.json" instance="dojo.io.script._jsonpCallback"/><var name="dojo.io.script" type="Object"/><var name="dojo.io" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.number" project="dojo" file="number.js"><requires><require environment="common" resource="dojo.i18n"/><require environment="common" resource="dojo.string"/><require environment="common" resource="dojo.regexp"/></requires><vars><var name="dojo.number.format" returns="mixed" type="Function"><summary>Format a Number as a String, using locale-specific settings</summary><description>Create a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the CLDR http: // unicode.org/cldr as well as the appropriate symbols and delimiters. See http: // www.unicode.org/reports/tr35/#Number_Elements</description></var><var name="dojo.number._applyPattern" type="Function" private="1"><summary>Apply pattern to format value as a string using options. Gives no consideration to local customs.</summary></var><var name="dojo.number.round" returns="Number" type="Function"><summary>Rounds the number at the given number of places</summary></var><var name="dojo.number._formatAbsolute" type="Function" private="1"><summary>Apply numeric pattern to absolute value using options. Gives no consideration to local customs.</summary></var><var name="dojo.number.regexp" returns="String" type="Function"><summary>Builds the regular needed to parse a number</summary></var><var name="dojo.number._parseInfo" returns="Object" type="Function" private="1"/><var name="dojo.number.parse" returns="mixed" type="Function"><summary>Convert a properly formatted string to a primitive Number, using locale-specific settings.</summary><description>Create a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale. Formatting patterns are implemented using the syntax described at *URL*</description></var><var name="dojo.number._realNumberRegexp" returns="String" type="Function" private="1"><summary>Builds a regular expression to match a real number in exponential notation</summary></var><var name="dojo.number._integerRegexp" returns="String" type="Function" private="1"><summary>Builds a regular expression that matches an integer</summary></var><var name="dojo.number" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.regexp" project="dojo" file="regexp.js"><vars><var name="dojo.regexp.escapeString" type="Function"><summary>Adds escape sequences for special characters in regular expressions</summary></var><var name="dojo.regexp.buildGroupRE" returns="String" type="Function"><summary>Builds a regular expression that groups subexpressions</summary><description>A utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter.</description></var><var name="dojo.regexp.group" returns="String" type="Function"><summary>adds group match to expression</summary></var><var name="dojo.regexp" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.rpc.JsonPService" project="dojo" file="rpc/JsonPService.js"><requires><require environment="common" resource="dojo.rpc.RpcService"/><require environment="common" resource="dojo.io.script"/></requires><vars><var name="dojo.rpc.JsonPService" type="Function"><chains><chain type="prototype" parent="dojo.rpc.RpcService"/><chain type="call" parent="dojo.rpc.RpcService"/></chains></var><var name="dojo.rpc.JsonPService.strictArgChecks" prototype="dojo.rpc.JsonPService"/><var name="dojo.rpc.JsonPService.bind" type="Function" prototype="dojo.rpc.JsonPService"/><var name="dojo.rpc.JsonPService.createRequest" type="Function" prototype="dojo.rpc.JsonPService"/><var name="dojo.rpc" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.rpc.JsonService" project="dojo" file="rpc/JsonService.js"><requires><require environment="common" resource="dojo.rpc.RpcService"/></requires><vars><var name="dojo.rpc.JsonService" type="Function"><chains><chain type="prototype" parent="dojo.rpc.RpcService"/><chain type="call" parent="dojo.rpc.RpcService"/></chains></var><var name="dojo.rpc.JsonService.bustCache" prototype="dojo.rpc.JsonService"/><var name="dojo.rpc.JsonService.contentType" prototype="dojo.rpc.JsonService"/><var name="dojo.rpc.JsonService.lastSubmissionId" prototype="dojo.rpc.JsonService"/><var name="dojo.rpc.JsonService.callRemote" type="Function" prototype="dojo.rpc.JsonService"><summary>call an arbitrary remote method without requiring it to be predefined with SMD</summary></var><var name="dojo.rpc.JsonService.bind" type="Function" prototype="dojo.rpc.JsonService"><summary>JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.</summary></var><var name="dojo.rpc.JsonService.createRequest" type="Function" prototype="dojo.rpc.JsonService"><summary>create a JSON-RPC envelope for the request</summary></var><var name="dojo.rpc.JsonService.parseResults" type="Function" prototype="dojo.rpc.JsonService"><summary>parse the result envelope and pass the results back to to the callback function</summary></var><var name="dojo.rpc" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.rpc.RpcService" project="dojo" file="rpc/RpcService.js"><vars><var name="dojo.rpc.RpcService" type="Function"><summary>Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service - the text of the SMD to evaluate - a raw SMD object - the SMD URL</summary></var><var name="dojo.rpc.RpcService.strictArgChecks" prototype="dojo.rpc.RpcService" instance="dojo.rpc.RpcService"/><var name="dojo.rpc.RpcService.serviceUrl" prototype="dojo.rpc.RpcService" instance="dojo.rpc.RpcService"/><var name="dojo.rpc.RpcService.parseResults" type="Function" prototype="dojo.rpc.RpcService"><summary>parse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results</summary></var><var name="dojo.rpc.RpcService.errorCallback" type="Function" prototype="dojo.rpc.RpcService"><summary>create callback that calls the Deferres errback method</summary></var><var name="dojo.rpc.RpcService.resultCallback" type="Function" prototype="dojo.rpc.RpcService"><summary>create callback that calls the Deferred's callback method</summary></var><var name="dojo.rpc.RpcService.generateMethod" type="Function" prototype="dojo.rpc.RpcService"><summary>generate the local bind methods for the remote object</summary></var><var name="dojo.rpc.RpcService.processSmd" type="Function" prototype="dojo.rpc.RpcService"><summary>callback method for reciept of a smd object. Parse the smd and generate functions based on the description</summary></var><var name="dojo.rpc.RpcService.timeout" instance="dojo.rpc.RpcService"/><var name="dojo.rpc" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.string" project="dojo" file="string.js"><vars><var name="dojo.string.pad" returns="String" type="Function"><summary>Pad a string to guarantee that it is at least 'size' length by filling with the character 'c' at either the start or end of the string. Pads at the start, by default.</summary></var><var name="dojo.string.substitute" type="Function"><summary>Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched.</summary><description>For example, dojo.string.substitute("File '${0}' is not found in directory '${1}'.",["foo.html","/temp"]); dojo.string.substitute("File '${name}' is not found in directory '${info.dir}'.",{name: "foo.html", info: {dir: "/temp"}}); both return "File 'foo.html' is not found in directory '/temp'."</description></var><var name="dojo.string" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.AdapterRegistry" project="dojo" file="tests/AdapterRegistry.js"><requires><require environment="common" resource="dojo.AdapterRegistry"/></requires><vars><var name="ctor" type="Function"/><var name="register" type="Function"/><var name="noMatch" type="Function"/><var name="returnWrappers" type="Function"/><var name="unregister" type="Function"/><var name="dojo.tests.AdapterRegistry" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.Deferred" project="dojo" file="tests/_base/Deferred.js"><vars><var name="callback" type="Function"/><var name="errback" type="Function"/><var name="callbackTwice" type="Function"/><var name="addBoth" type="Function"/><var name="dojo.tests._base.Deferred" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base._loader.bootstrap" project="dojo" file="tests/_base/_loader/bootstrap.js"><vars><var name="hasConsole" type="Function"/><var name="hasDjConfig" type="Function"/><var name="evalWorks" type="Function"/><var name="dojo.tests._base._loader.bootstrap" type="Object"/><var name="dojo.tests._base._loader" type="Object" private="1"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base._loader.hostenv_browser" project="dojo" file="tests/_base/_loader/hostenv_browser.js"><vars><var name="getText" type="Function"/><var name="dojo.tests._base._loader.hostenv_browser" type="Object"/><var name="dojo.tests._base._loader" type="Object" private="1"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base._loader.hostenv_rhino" project="dojo" file="tests/_base/_loader/hostenv_rhino.js"><vars><var name="getText" type="Function"/><var name="dojo.tests._base._loader.hostenv_rhino" type="Object"/><var name="dojo.tests._base._loader" type="Object" private="1"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base._loader.hostenv_spidermonkey" project="dojo" file="tests/_base/_loader/hostenv_spidermonkey.js"><vars><var name="getText" type="Function"/><var name="dojo.tests._base._loader.hostenv_spidermonkey" type="Object"/><var name="dojo.tests._base._loader" type="Object" private="1"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base._loader.loader" project="dojo" file="tests/_base/_loader/loader.js"><vars><var name="baseUrl" type="Function"/><var name="modulePaths" type="Function"/><var name="moduleUrls" type="Function"/><var name="dojo.tests._base._loader.loader" type="Object"/><var name="dojo.tests._base._loader" type="Object" private="1"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.array" project="dojo" file="tests/_base/array.js"><vars><var name="testIndexOf" type="Function"/><var name="testIndexOfFromIndex" type="Function"/><var name="testLastIndexOf" type="Function"/><var name="testLastIndexOfFromIndex" type="Function"/><var name="testForEach" type="Function"/><var name="testForEach_str" type="Function"/><var name="testEvery" type="Function"/><var name="testEvery_str" type="Function"/><var name="testSome" type="Function"/><var name="testSome_str" type="Function"/><var name="testFilter" type="Function"/><var name="testFilter_str" type="Function"/><var name="dojo.tests._base.array" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.connect" project="dojo" file="tests/_base/connect.js"><vars><var name="hub" type="Function"/><var name="bad" type="Function"/><var name="good" type="Function"/><var name="markAndSweepTest" type="Function"/><var name="markAndSweepSubscribersTest" type="Function"/><var name="smokeTest" type="Function"/><var name="basicTest" type="Function"/><var name="hubConnectDisconnect1000" type="Function"/><var name="args4Test" type="Function"/><var name="args3Test" type="Function"/><var name="args2Test" type="Function"/><var name="scopeTest1" type="Function"/><var name="scopeTest1.ok" instance="scopeTest1"/><var name="scopeTest2" type="Function"/><var name="scopeTest2.ok" instance="scopeTest2"/><var name="publishSubscribe1000" type="Function"/><var name="dojo.tests._base.connect" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.declare" project="dojo" file="tests/_base/declare.js"><vars><var name="tests._base.declare.tmp" type="Function"><chains><chain type="prototype" parent="dojo.provide(&quot;tests._base.declare&quot;);&#10;&#10;tests.register(&quot;tests._base.declare&quot;,&#10;&#9;[&#10;&#9;&#9;function smokeTest(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp&quot;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp();&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo&quot;);&#10;&#9;&#9;&#9;var tmp = new testsFoo();&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTest2(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.foo&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.foo();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo2&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp2 = new testsFoo2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestCompactArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar2&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithSwappedArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar3&quot;, null, &#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}, function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar3();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp3&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp4&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp3);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp4();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclassWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp5&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp6&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp5);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp6();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function mixinSubclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp7&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp8&quot;, null, function(){&#10;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp8();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp9&quot;,&#10;&#9;&#9;&#9;&#9;[&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp7, // prototypal&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp8  // mixin&#10;&#9;&#9;&#9;&#9;]);&#10;&#9;&#9;&#9;var tmp2 = new tests._base.declare.tmp9();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function superclassRef(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp10&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp11&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp10, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp11();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tests._base.declare.tmp11.superclass.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp12&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp13&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp12, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp13();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedExplicitCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp14&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp15&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp14, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;},{&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, [arg2, arg1], arguments.callee);&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;baz: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;//this.inherited(&quot;baz&quot;, arguments);&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, arguments, tests._base.declare.tmp15.prototype.bar);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp15();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.baz(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, foo);&#10;&#9;&#9;}&#10;&#9;&#9;// FIXME: there are still some permeutations to test like:&#10;&#9;&#9;//&#9;- ctor arguments&#10;&#9;&#9;//&#9;- multi-level inheritance + L/R conflict checks&#10;&#9;]&#10;);"/><chain type="call" parent="dojo.provide(&quot;tests._base.declare&quot;);&#10;&#10;tests.register(&quot;tests._base.declare&quot;,&#10;&#9;[&#10;&#9;&#9;function smokeTest(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp&quot;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp();&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo&quot;);&#10;&#9;&#9;&#9;var tmp = new testsFoo();&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTest2(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.foo&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.foo();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo2&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp2 = new testsFoo2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestCompactArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar2&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithSwappedArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar3&quot;, null, &#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}, function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar3();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp3&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp4&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp3);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp4();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclassWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp5&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp6&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp5);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp6();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function mixinSubclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp7&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp8&quot;, null, function(){&#10;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp8();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp9&quot;,&#10;&#9;&#9;&#9;&#9;[&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp7, // prototypal&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp8  // mixin&#10;&#9;&#9;&#9;&#9;]);&#10;&#9;&#9;&#9;var tmp2 = new tests._base.declare.tmp9();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function superclassRef(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp10&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp11&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp10, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp11();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tests._base.declare.tmp11.superclass.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp12&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp13&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp12, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp13();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedExplicitCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp14&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp15&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp14, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;},{&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, [arg2, arg1], arguments.callee);&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;baz: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;//this.inherited(&quot;baz&quot;, arguments);&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, arguments, tests._base.declare.tmp15.prototype.bar);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp15();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.baz(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, foo);&#10;&#9;&#9;}&#10;&#9;&#9;// FIXME: there are still some permeutations to test like:&#10;&#9;&#9;//&#9;- ctor arguments&#10;&#9;&#9;//&#9;- multi-level inheritance + L/R conflict checks&#10;&#9;]&#10;);"/></chains></var><var name="testsFoo" type="Function"><chains><chain type="prototype" parent="dojo.provide(&quot;tests._base.declare&quot;);&#10;&#10;tests.register(&quot;tests._base.declare&quot;,&#10;&#9;[&#10;&#9;&#9;function smokeTest(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp&quot;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp();&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo&quot;);&#10;&#9;&#9;&#9;var tmp = new testsFoo();&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTest2(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.foo&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.foo();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo2&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp2 = new testsFoo2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestCompactArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar2&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithSwappedArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar3&quot;, null, &#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}, function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar3();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp3&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp4&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp3);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp4();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclassWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp5&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp6&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp5);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp6();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function mixinSubclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp7&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp8&quot;, null, function(){&#10;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp8();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp9&quot;,&#10;&#9;&#9;&#9;&#9;[&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp7, // prototypal&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp8  // mixin&#10;&#9;&#9;&#9;&#9;]);&#10;&#9;&#9;&#9;var tmp2 = new tests._base.declare.tmp9();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function superclassRef(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp10&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp11&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp10, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp11();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tests._base.declare.tmp11.superclass.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp12&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp13&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp12, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp13();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedExplicitCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp14&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp15&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp14, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;},{&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, [arg2, arg1], arguments.callee);&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;baz: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;//this.inherited(&quot;baz&quot;, arguments);&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, arguments, tests._base.declare.tmp15.prototype.bar);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp15();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.baz(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, foo);&#10;&#9;&#9;}&#10;&#9;&#9;// FIXME: there are still some permeutations to test like:&#10;&#9;&#9;//&#9;- ctor arguments&#10;&#9;&#9;//&#9;- multi-level inheritance + L/R conflict checks&#10;&#9;]&#10;);"/><chain type="call" parent="dojo.provide(&quot;tests._base.declare&quot;);&#10;&#10;tests.register(&quot;tests._base.declare&quot;,&#10;&#9;[&#10;&#9;&#9;function smokeTest(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp&quot;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp();&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo&quot;);&#10;&#9;&#9;&#9;var tmp = new testsFoo();&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTest2(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.foo&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.foo();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#10;&#9;&#9;&#9;dojo.declare(&quot;testsFoo2&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp2 = new testsFoo2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestCompactArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar2&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar2();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function smokeTestWithSwappedArgs(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.fooBar3&quot;, null, &#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}, function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;} &#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.fooBar3();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp3&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp4&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp3);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp4();&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function subclassWithCtor(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp5&quot;, null, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp6&quot;,&#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp5);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp6();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function mixinSubclass(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp7&quot;, null, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp8&quot;, null, function(){&#10;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp8();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp9&quot;,&#10;&#9;&#9;&#9;&#9;[&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp7, // prototypal&#10;&#9;&#9;&#9;&#9;&#9;tests._base.declare.tmp8  // mixin&#10;&#9;&#9;&#9;&#9;]);&#10;&#9;&#9;&#9;var tmp2 = new tests._base.declare.tmp9();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp2.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function superclassRef(t){&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp10&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp11&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp10, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp11();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;thonk&quot;, tests._base.declare.tmp11.superclass.foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp12&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp13&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp12, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp13();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, foo);&#10;&#9;&#9;},&#10;&#9;&#9;function inheritedExplicitCall(t){&#10;&#9;&#9;&#9;var foo = &quot;xyzzy&quot;;&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp14&quot;, null, {&#10;&#9;&#9;&#9;&#9;&#9;foo: &quot;thonk&quot;,&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg1){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;this.foo = arg1;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;foo = arg2;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;dojo.declare(&quot;tests._base.declare.tmp15&quot;, &#10;&#9;&#9;&#9;&#9;tests._base.declare.tmp14, &#10;&#9;&#9;&#9;&#9;function(){&#10;&#9;&#9;&#9;&#9;&#9;this.foo = &quot;blah&quot;;&#10;&#9;&#9;&#9;&#9;},{&#10;&#9;&#9;&#9;&#9;&#9;bar: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, [arg2, arg1], arguments.callee);&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;baz: function(arg1, arg2){&#10;&#9;&#9;&#9;&#9;&#9;&#9;//this.inherited(&quot;baz&quot;, arguments);&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.inherited(&quot;bar&quot;, arguments, tests._base.declare.tmp15.prototype.bar);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;var tmp = new tests._base.declare.tmp15();&#10;&#9;&#9;&#9;t.is(&quot;blah&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.baz(&quot;zot&quot;);&#10;&#9;&#9;&#9;t.is(&quot;zot&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;xyzzy&quot;, foo);&#10;&#9;&#9;&#9;tmp.bar(&quot;trousers&quot;, &quot;squiggle&quot;);&#10;&#9;&#9;&#9;t.is(&quot;squiggle&quot;, tmp.foo);&#10;&#9;&#9;&#9;t.is(&quot;trousers&quot;, foo);&#10;&#9;&#9;}&#10;&#9;&#9;// FIXME: there are still some permeutations to test like:&#10;&#9;&#9;//&#9;- ctor arguments&#10;&#9;&#9;//&#9;- multi-level inheritance + L/R conflict checks&#10;&#9;]&#10;);"/></chains></var><var name="tests._base.declare.foo" type="Function"/><var name="tests._base.declare.foo.foo" prototype="tests._base.declare.foo"/><var name="testsFoo2" type="Function"/><var name="testsFoo2.foo" prototype="testsFoo2"/><var name="tests._base.declare.fooBar" type="Function"/><var name="tests._base.declare.fooBar.foo" prototype="tests._base.declare.fooBar" instance="tests._base.declare.fooBar"/><var name="tests._base.declare.fooBar2" type="Function"/><var name="tests._base.declare.fooBar2.foo" prototype="tests._base.declare.fooBar2"/><var name="tests._base.declare.fooBar3" type="Function"/><var name="tests._base.declare.fooBar3.foo" prototype="tests._base.declare.fooBar3"/><var name="tests._base.declare.tmp3" type="Function"/><var name="tests._base.declare.tmp3.foo" prototype="tests._base.declare.tmp3"/><var name="tests._base.declare.tmp4" type="Function"><chains><chain type="prototype" parent="tests._base.declare.tmp3"/><chain type="call" parent="tests._base.declare.tmp3"/></chains></var><var name="tests._base.declare.tmp5" type="Function"/><var name="tests._base.declare.tmp5.foo" prototype="tests._base.declare.tmp5" instance="tests._base.declare.tmp5"/><var name="tests._base.declare.tmp6" type="Function"><chains><chain type="prototype" parent="tests._base.declare.tmp5"/><chain type="call" parent="tests._base.declare.tmp5"/></chains></var><var name="tests._base.declare.tmp7" type="Function"/><var name="tests._base.declare.tmp7.foo" prototype="tests._base.declare.tmp7"/><var name="tests._base.declare.tmp8" type="Function"/><var name="tests._base.declare.tmp8.foo" instance="tests._base.declare.tmp8"/><var name="tests._base.declare.tmp9" type="Function"/><var name="tests._base.declare.tmp10" type="Function"/><var name="tests._base.declare.tmp10.foo" prototype="tests._base.declare.tmp10"/><var name="tests._base.declare.tmp11" type="Function"><chains><chain type="prototype" parent="tests._base.declare.tmp10"/><chain type="call" parent="tests._base.declare.tmp10"/></chains></var><var name="tests._base.declare.tmp11.foo" instance="tests._base.declare.tmp11"/><var name="tests._base.declare.tmp12" type="Function"/><var name="tests._base.declare.tmp12.foo" prototype="tests._base.declare.tmp12" instance="tests._base.declare.tmp12"/><var name="tests._base.declare.tmp12.bar" type="Function" prototype="tests._base.declare.tmp12"/><var name="tests._base.declare.tmp13" type="Function"><chains><chain type="prototype" parent="tests._base.declare.tmp12"/><chain type="call" parent="tests._base.declare.tmp12"/></chains></var><var name="tests._base.declare.tmp13.foo" instance="tests._base.declare.tmp13"/><var name="tests._base.declare.tmp14" type="Function"/><var name="tests._base.declare.tmp14.foo" prototype="tests._base.declare.tmp14" instance="tests._base.declare.tmp14"/><var name="tests._base.declare.tmp14.bar" type="Function" prototype="tests._base.declare.tmp14"/><var name="tests._base.declare.tmp15" type="Function"><chains><chain type="prototype" parent="tests._base.declare.tmp14"/><chain type="call" parent="tests._base.declare.tmp14"/></chains></var><var name="tests._base.declare.tmp15.bar" type="Function" prototype="tests._base.declare.tmp15"/><var name="tests._base.declare.tmp15.baz" type="Function" prototype="tests._base.declare.tmp15"/><var name="tests._base.declare.tmp15.foo" instance="tests._base.declare.tmp15"/><var name="smokeTest" type="Function"/><var name="smokeTest2" type="Function"/><var name="smokeTestWithCtor" type="Function"/><var name="smokeTestWithCtor.foo" instance="smokeTestWithCtor"/><var name="smokeTestCompactArgs" type="Function"/><var name="smokeTestWithSwappedArgs" type="Function"/><var name="smokeTestWithSwappedArgs.foo" instance="smokeTestWithSwappedArgs"/><var name="subclass" type="Function"/><var name="subclassWithCtor" type="Function"/><var name="subclassWithCtor.foo" instance="subclassWithCtor"/><var name="mixinSubclass" type="Function"/><var name="mixinSubclass.foo" instance="mixinSubclass"/><var name="superclassRef" type="Function"/><var name="superclassRef.foo" instance="superclassRef"/><var name="inheritedCall" type="Function"/><var name="inheritedCall.foo" instance="inheritedCall"/><var name="inheritedExplicitCall" type="Function"/><var name="inheritedExplicitCall.foo" instance="inheritedExplicitCall"/><var name="dojo.tests._base.declare" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.fx" project="dojo" file="tests/_base/fx.js"><vars><var name="dojo.tests._base.fx" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.html" project="dojo" file="tests/_base/html.js"><vars><var name="dojo.tests._base.html" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.json" project="dojo" file="tests/_base/json.js"><vars><var name="toAndFromJson" type="Function"/><var name="dojo.tests._base.json" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.lang" project="dojo" file="tests/_base/lang.js"><vars><var name="mixin" type="Function"/><var name="extend" type="Function"/><var name="isObject" type="Function"/><var name="isArray" type="Function"/><var name="isArrayLike" type="Function"/><var name="isString" type="Function"/><var name="partial" type="Function"><chains><chain type="call" parent="st1"/></chains></var><var name="nestedPartial" type="Function"/><var name="hitch" type="Function"><chains><chain type="call" parent="st2"/></chains></var><var name="hitchWithArgs" type="Function"/><var name="hitchAsPartial" type="Function"><chains><chain type="call" parent="st1"/></chains></var><var name="_toArray" type="Function" private="1"><chains><chain type="call" parent="thinger"/></chains></var><var name="dojo.tests._base.lang" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.query" project="dojo" file="tests/_base/query.js"><vars><var name="dojo.tests._base.query" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base.xhr" project="dojo" file="tests/_base/xhr.js"><vars><var name="dojo.tests._base.xhr" type="Object"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests._base" project="dojo" file="tests/_base.js"><requires><require environment="common" resource="tests._base._loader.bootstrap"/><require environment="common" resource="tests._base._loader.loader"/><require environment="common" resource="tests._base.array"/><require environment="common" resource="tests._base.lang"/><require environment="common" resource="tests._base.declare"/><require environment="common" resource="tests._base.connect"/><require environment="common" resource="tests._base.Deferred"/><require environment="common" resource="tests._base.json"/></requires><vars><var name="sanityCheckHarness" type="Function"/><var name="dojoIsAvailable" type="Function"/><var name="dojo.tests._base" type="Object" private="1"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.back" project="dojo" file="tests/back.js"><vars><var name="dojo.tests.back" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.cldr" project="dojo" file="tests/cldr.js"><requires><require environment="common" resource="dojo.cldr.supplemental"/><require environment="common" resource="dojo.cldr.monetary"/></requires><vars><var name="test_date_getWeekend" type="Function"/><var name="dojo.tests.cldr" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.cookie" project="dojo" file="tests/cookie.js"><vars><var name="dojo.tests.cookie" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.currency" project="dojo" file="tests/currency.js"><requires><require environment="common" resource="dojo.currency"/></requires><vars><var name="dojo.tests.currency" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.data.JsonItemStore" project="dojo" file="tests/data/JsonItemStore.js"><requires><require environment="common" resource="dojo.data.JsonItemStore"/></requires><vars><var name="tests.data.JsonItemStore.getCountriesStore" type="Function"/><var name="tests.data.JsonItemStore.getCountriesAttrsStore" type="Function"/><var name="testIdentityAPI_getItemByIdentity" type="Function"><summary>Simple test of the getItemByIdentity function of the store.</summary><description>Simple test of the getItemByIdentity function of the store.</description></var><var name="testIdentityAPI_getIdentity" type="Function"><summary>Simple test of the getIdentity function of the store.</summary><description>Simple test of the getIdentity function of the store.</description></var><var name="testReadAPI_fetch_all" type="Function"><summary>Simple test of a basic fetch on JsonItemStore.</summary><description>Simple test of a basic fetch on JsonItemStore.</description></var><var name="testReadAPI_fetch_one" type="Function"><summary>Simple test of a basic fetch on JsonItemStore of a single item.</summary><description>Simple test of a basic fetch on JsonItemStore of a single item.</description></var><var name="testReadAPI_fetch_all_streaming" type="Function"><summary>Simple test of a basic fetch on JsonItemStore.</summary><description>Simple test of a basic fetch on JsonItemStore.</description></var><var name="testReadAPI_fetch_paging" type="Function"><summary>Test of multiple fetches on a single result. Paging, if you will.</summary><description>Test of multiple fetches on a single result. Paging, if you will.</description></var><var name="testReadAPI_getValue" type="Function"><summary>Simple test of the getValue function of the store.</summary><description>Simple test of the getValue function of the store.</description></var><var name="testReadAPI_getValue_byattributeItem" type="Function"><summary>Simple test of the getValue function passing in an item as the attribute identifier.</summary><description>Simple test of the getValue function passing in an item as the attribute identifier.</description></var><var name="testReadAPI_getValues" type="Function"><summary>Simple test of the getValues function of the store.</summary><description>Simple test of the getValues function of the store.</description></var><var name="testReadAPI_getValues_byattributeItem" type="Function"><summary>Simple test of the getValue function passing in an item as the attribute identifier.</summary><description>Simple test of the getValue function passing in an item as the attribute identifier.</description></var><var name="testReadAPI_isItem" type="Function"><summary>Simple test of the isItem function of the store</summary><description>Simple test of the isItem function of the store</description></var><var name="testReadAPI_isItem_multistore" type="Function"><summary>Simple test of the isItem function of the store to verify two different store instances do not accept items from each other.</summary><description>Simple test of the isItem function of the store to verify two different store instances do not accept items from each other.</description></var><var name="testReadAPI_hasAttribute" type="Function"><summary>Simple test of the hasAttribute function of the store</summary><description>Simple test of the hasAttribute function of the store</description></var><var name="testReadAPI_hasAttribute_byattributeItem" type="Function"><summary>Simple test of the hasAttribute passing in an item as the attribute identifier.</summary><description>Simple test of the hasAttribute passing in an item as the attribute identifier.</description></var><var name="testReadAPI_containsValue" type="Function"><summary>Simple test of the containsValue function of the store</summary><description>Simple test of the containsValue function of the store</description></var><var name="testReadAPI_containsValue_byattributeItem" type="Function"><summary>Simple test of the getAttributes function of the store</summary><description>Simple test of the containsValue function of the store using attribute lookup.</description></var><var name="testReadAPI_getAttributes" type="Function"><summary>Simple test of the getAttributes function of the store</summary><description>Simple test of the getAttributes function of the store</description></var><var name="testReadAPI_getFeatures" type="Function"><summary>Simple test of the getFeatures function of the store</summary><description>Simple test of the getFeatures function of the store</description></var><var name="testReadAPI_fetch_patternMatch0" type="Function"><summary>Function to test pattern matching of everything starting with lowercase e</summary><description>Function to test pattern matching of everything starting with lowercase e</description></var><var name="testReadAPI_fetch_patternMatch1" type="Function"><summary>Function to test pattern matching of everything with $ in it.</summary><description>Function to test pattern matching of everything with $ in it.</description></var><var name="testReadAPI_fetch_patternMatch2" type="Function"><summary>Function to test exact pattern match</summary><description>Function to test exact pattern match</description></var><var name="testReadAPI_fetch_patternMatch_caseSensitive" type="Function"><summary>Function to test pattern matching of a pattern case-sensitively</summary><description>Function to test pattern matching of a pattern case-sensitively</description></var><var name="testReadAPI_fetch_patternMatch_caseInsensitive" type="Function"><summary>Function to test pattern matching of a pattern case-insensitively</summary><description>Function to test pattern matching of a pattern case-insensitively</description></var><var name="testReadAPI_fetch_sortNumeric" type="Function"><summary>Function to test sorting numerically.</summary><description>Function to test sorting numerically.</description></var><var name="testReadAPI_fetch_sortNumericDescending" type="Function"><summary>Function to test sorting numerically.</summary><description>Function to test sorting numerically.</description></var><var name="testReadAPI_fetch_sortNumericWithCount" type="Function"><summary>Function to test sorting numerically in descending order, returning only a specified number of them.</summary><description>Function to test sorting numerically in descending order, returning only a specified number of them.</description></var><var name="testReadAPI_fetch_sortAlphabetic" type="Function"><summary>Function to test sorting alphabetic ordering.</summary><description>Function to test sorting alphabetic ordering.</description></var><var name="testReadAPI_fetch_sortAlphabeticDescending" type="Function"><summary>Function to test sorting alphabetic ordering in descending mode.</summary><description>Function to test sorting alphabetic ordering in descending mode.</description></var><var name="testReadAPI_fetch_sortDate" type="Function"><summary>Function to test sorting date.</summary><description>Function to test sorting date.</description></var><var name="testReadAPI_fetch_sortDateDescending" type="Function"><summary>Function to test sorting date in descending order.</summary><description>Function to test sorting date in descending order.</description></var><var name="testReadAPI_fetch_sortMultiple" type="Function"><summary>Function to test sorting on multiple attributes.</summary><description>Function to test sorting on multiple attributes.</description></var><var name="testReadAPI_fetch_sortMultipleSpecialComparator" type="Function"><summary>Function to test sorting on multiple attributes with a custom comparator.</summary><description>Function to test sorting on multiple attributes with a custom comparator.</description></var><var name="testReadAPI_fetch_sortAlphabeticWithUndefined" type="Function"><summary>Function to test sorting alphabetic ordering.</summary><description>Function to test sorting alphabetic ordering.</description></var><var name="testReadAPI_errorCondition_idCollision_inMemory" type="Function"><summary>Simple test of the errors thrown when there is an id collision in the data. Added because of tracker: #2546</summary><description>Simple test of the errors thrown when there is an id collision in the data. Added because of tracker: #2546</description></var><var name="testReadAPI_errorCondition_idCollision_xhr" type="Function"><summary>Simple test of the errors thrown when there is an id collision in the data. Added because of tracker: #2546</summary><description>Simple test of the errors thrown when there is an id collision in the data. Added because of tracker: #2546</description></var><var name="dojo.tests.data.JsonItemStore" type="Object"/><var name="dojo.tests.data" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.data.utils" project="dojo" file="tests/data/utils.js"><requires><require environment="common" resource="dojo.data.util.filter"/><require environment="common" resource="dojo.data.util.sorter"/></requires><vars><var name="testWildcardFilter_1" type="Function"/><var name="testWildcardFilter_2" type="Function"/><var name="testWildcardFilter_3" type="Function"/><var name="testWildcardFilter_4" type="Function"/><var name="testWildcardFilter_5" type="Function"/><var name="testWildcardFilter_caseInsensitive" type="Function"/><var name="testSingleChar_1" type="Function"/><var name="testSingleChar_2" type="Function"/><var name="testBracketChar" type="Function"/><var name="testBraceChar" type="Function"/><var name="testParenChar" type="Function"/><var name="testPlusChar" type="Function"/><var name="testPeriodChar" type="Function"/><var name="testBarChar" type="Function"/><var name="testDollarSignChar" type="Function"/><var name="testCarrotChar" type="Function"/><var name="testEscapeChar" type="Function"/><var name="testAbsoluteMatch" type="Function"/><var name="dojo.tests.data.utils" type="Object"/><var name="dojo.tests.data" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.data" project="dojo" file="tests/data.js"><requires><require environment="common" resource="tests.data.utils"/><require environment="common" resource="tests.data.JsonItemStore"/></requires><vars><var name="dojo.tests.data" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.date.locale" project="dojo" file="tests/date/locale.js"><requires><require environment="common" resource="dojo.date.locale"/></requires><vars><var name="dojo.tests.date.locale" type="Object"/><var name="dojo.tests.date" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.date.stamp" project="dojo" file="tests/date/stamp.js"><requires><require environment="common" resource="dojo.date.stamp"/></requires><vars><var name="test_date_rfc3339" type="Function"/><var name="test_date_fromIso8601" type="Function"/><var name="test_date_fromIso8601Date" type="Function"/><var name="test_date_fromIso8601Time" type="Function"/><var name="dojo.tests.date.stamp" type="Object"/><var name="dojo.tests.date" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.date" project="dojo" file="tests/date.js"><requires><require environment="common" resource="dojo.date"/><require environment="common" resource="tests.date.locale"/><require environment="common" resource="tests.date.stamp"/></requires><vars><var name="test_date_getDaysInMonth" type="Function"/><var name="test_date_isLeapYear" type="Function"/><var name="test_date_getTimezoneName" type="Function"/><var name="test_date_getTimezoneName.str" instance="test_date_getTimezoneName"/><var name="test_date_getTimezoneName.strLocale" instance="test_date_getTimezoneName"/><var name="test_date_getTimezoneName.toString" type="Function" instance="test_date_getTimezoneName"/><var name="test_date_getTimezoneName.toLocaleString" type="Function" instance="test_date_getTimezoneName"/><var name="test_date_compare" type="Function"/><var name="test_date_add" type="Function"/><var name="test_date_diff" type="Function"/><var name="dojo.tests.date" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.i18n" project="dojo" file="tests/i18n.js"><requires><require environment="common" resource="dojo.i18n"/></requires><vars><var name=".tearDown" type="Function"/><var name="dojo.tests.i18n" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.io.script" project="dojo" file="tests/io/script.js"><vars><var name="dojo.tests.io.script" type="Object"/><var name="dojo.tests.io" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.io.scriptJsonp" project="dojo" file="tests/io/scriptJsonp.js"><vars><var name="getJsonpCallback" type="Function"/><var name="findJsonpDone" type="Function"/><var name="getScriptUrls" type="Function"/><var name="doJsonpCallback" type="Function"/><var name="dojo.tests.io.scriptJsonp" type="Object"/><var name="dojo.tests.io" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.io.scriptSimple" project="dojo" file="tests/io/scriptSimple.js"><vars><var name="dojo.tests.io.scriptSimple" type="Object"/><var name="dojo.tests.io" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.module" project="dojo" file="tests/module.js"><requires><require environment="common" resource="tests._base"/><require environment="common" resource="tests.i18n"/><require environment="common" resource="tests.cldr"/><require environment="common" resource="tests.data"/><require environment="common" resource="tests.date"/><require environment="common" resource="tests.number"/><require environment="common" resource="tests.currency"/><require environment="common" resource="tests.AdapterRegistry"/><require environment="common" resource="tests.io.script"/><require environment="common" resource="tests.rpc"/><require environment="common" resource="tests.string"/></requires><vars><var name="dojo.tests.module" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.ar.salutations" project="dojo" file="tests/nls/ar/salutations.js"><vars><var name="dojo.tests.nls.ar.salutations" type="Object"/><var name="dojo.tests.nls.ar" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.cs.salutations" project="dojo" file="tests/nls/cs/salutations.js"><vars><var name="dojo.tests.nls.cs.salutations" type="Object"/><var name="dojo.tests.nls.cs" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.de.salutations" project="dojo" file="tests/nls/de/salutations.js"><vars><var name="dojo.tests.nls.de.salutations" type="Object"/><var name="dojo.tests.nls.de" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.el.salutations" project="dojo" file="tests/nls/el/salutations.js"><vars><var name="dojo.tests.nls.el.salutations" type="Object"/><var name="dojo.tests.nls.el" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.en-au.salutations" project="dojo" file="tests/nls/en-au/salutations.js"><vars><var name="dojo.tests.nls.en-au.salutations" type="Object"/><var name="dojo.tests.nls.en-au" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.en-us-hawaii.salutations" project="dojo" file="tests/nls/en-us-hawaii/salutations.js"><vars><var name="dojo.tests.nls.en-us-hawaii.salutations" type="Object"/><var name="dojo.tests.nls.en-us-hawaii" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.en-us-new_york-brooklyn.salutations" project="dojo" file="tests/nls/en-us-new_york-brooklyn/salutations.js"><vars><var name="dojo.tests.nls.en-us-new_york-brooklyn.salutations" type="Object"/><var name="dojo.tests.nls.en-us-new_york-brooklyn" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.en-us-texas.salutations" project="dojo" file="tests/nls/en-us-texas/salutations.js"><vars><var name="dojo.tests.nls.en-us-texas.salutations" type="Object"/><var name="dojo.tests.nls.en-us-texas" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.es.salutations" project="dojo" file="tests/nls/es/salutations.js"><vars><var name="dojo.tests.nls.es.salutations" type="Object"/><var name="dojo.tests.nls.es" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.fa.salutations" project="dojo" file="tests/nls/fa/salutations.js"><vars><var name="dojo.tests.nls.fa.salutations" type="Object"/><var name="dojo.tests.nls.fa" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.fr.salutations" project="dojo" file="tests/nls/fr/salutations.js"><vars><var name="dojo.tests.nls.fr.salutations" type="Object"/><var name="dojo.tests.nls.fr" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.he.salutations" project="dojo" file="tests/nls/he/salutations.js"><vars><var name="dojo.tests.nls.he.salutations" type="Object"/><var name="dojo.tests.nls.he" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.hi.salutations" project="dojo" file="tests/nls/hi/salutations.js"><vars><var name="dojo.tests.nls.hi.salutations" type="Object"/><var name="dojo.tests.nls.hi" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.it.salutations" project="dojo" file="tests/nls/it/salutations.js"><vars><var name="dojo.tests.nls.it.salutations" type="Object"/><var name="dojo.tests.nls.it" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.ja.salutations" project="dojo" file="tests/nls/ja/salutations.js"><vars><var name="dojo.tests.nls.ja.salutations" type="Object"/><var name="dojo.tests.nls.ja" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.ko.salutations" project="dojo" file="tests/nls/ko/salutations.js"><vars><var name="dojo.tests.nls.ko.salutations" type="Object"/><var name="dojo.tests.nls.ko" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.pl.salutations" project="dojo" file="tests/nls/pl/salutations.js"><vars><var name="dojo.tests.nls.pl.salutations" type="Object"/><var name="dojo.tests.nls.pl" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.pt.salutations" project="dojo" file="tests/nls/pt/salutations.js"><vars><var name="dojo.tests.nls.pt.salutations" type="Object"/><var name="dojo.tests.nls.pt" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.ru.salutations" project="dojo" file="tests/nls/ru/salutations.js"><vars><var name="dojo.tests.nls.ru.salutations" type="Object"/><var name="dojo.tests.nls.ru" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.salutations" project="dojo" file="tests/nls/salutations.js"><vars><var name="dojo.tests.nls.salutations" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.sw.salutations" project="dojo" file="tests/nls/sw/salutations.js"><vars><var name="dojo.tests.nls.sw.salutations" type="Object"/><var name="dojo.tests.nls.sw" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.th.salutations" project="dojo" file="tests/nls/th/salutations.js"><vars><var name="dojo.tests.nls.th.salutations" type="Object"/><var name="dojo.tests.nls.th" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.tr.salutations" project="dojo" file="tests/nls/tr/salutations.js"><vars><var name="dojo.tests.nls.tr.salutations" type="Object"/><var name="dojo.tests.nls.tr" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.yi.salutations" project="dojo" file="tests/nls/yi/salutations.js"><vars><var name="dojo.tests.nls.yi.salutations" type="Object"/><var name="dojo.tests.nls.yi" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.zh-cn.salutations" project="dojo" file="tests/nls/zh-cn/salutations.js"><vars><var name="dojo.tests.nls.zh-cn.salutations" type="Object"/><var name="dojo.tests.nls.zh-cn" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.nls.zh-tw.salutations" project="dojo" file="tests/nls/zh-tw/salutations.js"><vars><var name="dojo.tests.nls.zh-tw.salutations" type="Object"/><var name="dojo.tests.nls.zh-tw" type="Object"/><var name="dojo.tests.nls" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.number" project="dojo" file="tests/number.js"><requires><require environment="common" resource="dojo.number"/></requires><vars><var name="tests.number.check" type="Function"/><var name="tests.number.checkFormatParseCycle" type="Function"/><var name="tests.number.checkParse" type="Function"/><var name="tests.number.rounding" type="Function"/><var name="runBatchParse" type="Function"/><var name="tests.number._decimalNumberDiff" type="Function" private="1"/><var name="dojo.tests.number" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.resources.ApplicationState" project="dojo" file="tests/resources/ApplicationState.js"><vars><var name="ApplicationState" type="Function"/><var name="ApplicationState.stateData" instance="ApplicationState"/><var name="ApplicationState.outputDivId" instance="ApplicationState"/><var name="ApplicationState.backForwardOutputDivId" instance="ApplicationState"/><var name="ApplicationState.changeUrl" instance="ApplicationState"/><var name="ApplicationState.back" type="Function" prototype="ApplicationState"/><var name="ApplicationState.forward" type="Function" prototype="ApplicationState"/><var name="ApplicationState.showStateData" type="Function" prototype="ApplicationState"/><var name="ApplicationState.showBackForwardMessage" type="Function" prototype="ApplicationState"/><var name="dojo.tests.resources.ApplicationState" type="Object"/><var name="dojo.tests.resources" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.rpc" project="dojo" file="tests/rpc.js"><requires><require environment="common" resource="dojo.rpc.RpcService"/><require environment="common" resource="dojo.rpc.JsonService"/><require environment="common" resource="dojo.rpc.JsonPService"/></requires><vars><var name="dojo.tests.rpc" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests.string" project="dojo" file="tests/string.js"><requires><require environment="common" resource="dojo.string"/></requires><vars><var name="test_string_pad" type="Function"/><var name="test_string_substitute" type="Function"/><var name="dojo.tests.string" type="Object"/><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojo.tests" project="dojo" file="tests.js"><vars><var name="dojo.tests" type="Object"/><var name="dojo" type="Object"/></vars></resource><resource provides="dojox.data.CsvStore" project="dojox" file="data/CsvStore.js"><requires><require environment="common" resource="dojo.data.util.filter"/><require environment="common" resource="dojo.data.util.simpleFetch"/></requires><vars><var name="dojox.data.CsvStore" type="Function"><summary>initializer</summary></var><var name="dojox.data.CsvStore._assertIsItem" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>This function tests whether the item passed in is indeed an item in the store.</summary></var><var name="dojox.data.CsvStore._assertIsAttribute" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</summary></var><var name="dojox.data.CsvStore.getValue" returns="String" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.getValue() Note that for the CsvStore, an empty string value is the same as no value, so the defaultValue would be returned instead of an empty string.</summary></var><var name="dojox.data.CsvStore.getValues" returns="Array" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.getValues() CSV syntax does not support multi-valued attributes, so this is just a wrapper function for getValue().</summary></var><var name="dojox.data.CsvStore.getAttributes" returns="Array" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.getAttributes()</summary></var><var name="dojox.data.CsvStore.hasAttribute" returns="Boolean" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.hasAttribute() The hasAttribute test is true if attribute has an index number within the item's array length AND if the item has a value for that attribute. Note that for the CsvStore, an empty string value is the same as no value.</summary></var><var name="dojox.data.CsvStore.containsValue" returns="boolean" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.containsValue()</summary></var><var name="dojox.data.CsvStore._containsValue" returns="Boolean" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>Internal function for looking at the values contained by the item.</summary><description>Internal function for looking at the values contained by the item. This function allows for denoting if the comparison should be case sensitive for strings or not (for handling filtering cases where string case should not matter)</description></var><var name="dojox.data.CsvStore.isItem" returns="Boolean" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.isItem()</summary></var><var name="dojox.data.CsvStore.isItemLoaded" returns="Boolean" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.isItemLoaded() The CsvStore always loads all items, so if it's an item, then it's loaded.</summary></var><var name="dojox.data.CsvStore.loadItem" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.loadItem()</summary><description>The CsvStore always loads all items, so if it's an item, then it's loaded. From the dojo.data.api.Read.loadItem docs: If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers.</description></var><var name="dojox.data.CsvStore.getFeatures" returns="Object" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.getFeatures()</summary></var><var name="dojox.data.CsvStore._fetchItems" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>See dojo.data.util.simpleFetch.fetch()</summary></var><var name="dojox.data.CsvStore._csvData" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore.close" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Read.close()</summary></var><var name="dojox.data.CsvStore._getArrayOfArraysFromCsvFileContents" returns="null" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>example:</summary></var><var name="dojox.data.CsvStore._attributes" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._dataArray" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._processData" type="Function" prototype="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._loadFinished" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._arrayOfAllItems" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._createItemFromIdentity" returns="Object" type="Function" prototype="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore.getIdentity" returns="mixed" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Identity.getIdentity()</summary></var><var name="dojox.data.CsvStore.getItemByIdentity" returns="mixed" type="Function" prototype="dojox.data.CsvStore"><summary>See dojo.data.api.Identity.getItemByIdentity()</summary></var><var name="dojox.data.CsvStore._forceLoad" type="Function" prototype="dojox.data.CsvStore" private="1"><summary>Internal function to force a load of the store if it hasn't occurred yet. This is required for specific functions to work properly. See dojo.data.api.Identity.getItemByIdentity()</summary></var><var name="dojox.data.CsvStore._attributeIndexes" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._csvFileUrl" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._storeProp" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._idProp" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data.CsvStore._features" instance="dojox.data.CsvStore" private="1"/><var name="dojox.data" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.data.XmlStore" project="dojox" file="data/XmlStore.js"><requires><require environment="common" resource="dojo.data.util.simpleFetch"/><require environment="common" resource="dojo.data.util.filter"/><require environment="common" resource="dojox.data.dom"/></requires><vars><var name="dojox.data.XmlStore" type="Function"><summary>Initializer for the XML store.</summary><description>A data store for XML based services or documents</description></var><var name="dojox.data.XmlStore.getValue" returns="mixed" type="Function" prototype="dojox.data.XmlStore"><summary>Return an attribute value</summary><description>'item' must be an XML element. If 'attribute' specifies "tagName", the tag name of the element is returned. If 'attribute' specifies "childNodes", the first element child is returned. If 'attribute' specifies "text()", the value of the first text child is returned. For generic attributes, if '_attributeMap' is specified, an actual attribute name is looked up with the tag name of the element and 'attribute' (concatenated with '.'). Then, if 'attribute' starts with "@", the value of the XML</description></var><var name="dojox.data.XmlStore.getValues" returns="array" type="Function" prototype="dojox.data.XmlStore"><summary>Return an array of attribute values</summary><description>'item' must be an XML element. If 'attribute' specifies "tagName", the tag name of the element is returned. If 'attribute' specifies "childNodes", child elements are returned. If 'attribute' specifies "text()", the values of child text nodes are returned. For generic attributes, if '_attributeMap' is specified, an actual attribute name is looked up with the tag name of the element and 'attribute' (concatenated with '.'). Then, if 'attribute' starts with "@", the value of the XML</description></var><var name="dojox.data.XmlStore.getAttributes" returns="array" type="Function" prototype="dojox.data.XmlStore"><summary>Return an array of attribute names</summary><description>'item' must be an XML element. tag names of child elements and XML attribute names of attributes specified to the element are returned along with special attribute names applicable to the element including "tagName", "childNodes" if the element has child elements, "text()" if the element has child text nodes, and attribute names in '_attributeMap' that match the tag name of the element.</description></var><var name="dojox.data.XmlStore.hasAttribute" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Check whether an element has the attribute</summary></var><var name="dojox.data.XmlStore.containsValue" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Check whether the attribute values contain the value</summary></var><var name="dojox.data.XmlStore.isItem" returns="mixed" type="Function" prototype="dojox.data.XmlStore"><summary>Check whether the object is an item (XML element) item: An object to check</summary></var><var name="dojox.data.XmlStore.isItemLoaded" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Check whether the object is an item (XML element) and loaded item: An object to check</summary></var><var name="dojox.data.XmlStore.loadItem" type="Function" prototype="dojox.data.XmlStore"><summary>Load an item (XML element)</summary></var><var name="dojox.data.XmlStore.getFeatures" returns="array" type="Function" prototype="dojox.data.XmlStore"><summary>Return supported data APIs</summary></var><var name="dojox.data.XmlStore._fetchItems" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Fetch items (XML elements) that match to a query</summary><description>If '_fetchUrl' is specified, it is used to load an XML document with a query string. Otherwise and if '_url' is specified, the XML document is loaded and list XML elements that match to a query (set of element names and their text attribute values that the items to contain). A wildcard, "*" can be used to query values to match all occurrences. If '_rootItem' is specified, it is used to fetch items.</description></var><var name="dojox.data.XmlStore._getFetchUrl" returns="A fetch URL" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Generate a URL for fetch</summary><description>This default implementation generates a query string in the form of "?name1=value1&amp;name2=value2..." off properties of 'query' object specified in 'request' and appends it to '_fetchUrl'. Sub-classes may override this method for the custom URL generation.</description></var><var name="dojox.data.XmlStore._getItems" returns="An array of items" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Fetch items (XML elements) in an XML document based on a request</summary><description>This default implementation walks through child elements of the document element to see if all properties of 'query' object match corresponding attributes of the element (item). If 'request' is not specified, all child elements are returned. Sub-classes may override this method for the custom search in an XML document.</description></var><var name="dojox.data.XmlStore.newItem" returns="object" type="Function" prototype="dojox.data.XmlStore"><summary>Return a new XML element</summary><description>At least, 'keywordArgs' must contain "tagName" to be used for the new element. Other attributes in 'keywordArgs' are set to the new element, including "text()", but excluding "childNodes".</description></var><var name="dojox.data.XmlStore.deleteItem" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Delete an XML element</summary></var><var name="dojox.data.XmlStore.setValue" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Set an attribute value</summary><description>'item' must be an XML element. If 'attribute' specifies "tagName", nothing is set and false is returned. If 'attribute' specifies "childNodes", the value (XML element) is added to the element. If 'attribute' specifies "text()", a text node is created with the value and set it to the element as a child. For generic attributes, if '_attributeMap' is specified, an actual attribute name is looked up with the tag name of the element and 'attribute' (concatenated with '.'). Then, if 'attribute' starts with "@", the value is set to the XML</description></var><var name="dojox.data.XmlStore.setValues" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Set attribute values</summary><description>'item' must be an XML element. If 'attribute' specifies "childNodes", the value (array of XML elements) is set to the element's childNodes. Otherwise, nothing is set and false is returned.</description></var><var name="dojox.data.XmlStore.unsetAttribute" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Remove an attribute</summary><description>'item' must be an XML element. 'attribute' can be an XML attribute name of the element or one of special names described below. If 'attribute' specifies "tagName", nothing is removed and false is returned. If 'attribute' specifies "childNodes" or "text()", all child nodes are removed. For generic attributes, if '_attributeMap' is specified, an actual attribute name is looked up with the tag name of the element and 'attribute' (concatenated with '.'). Then, if 'attribute' starts with "@", the XML attribute is removed. Otherwise, child elements of the tag name specified with 'attribute' are removed.</description></var><var name="dojox.data.XmlStore.save" type="Function" prototype="dojox.data.XmlStore"><summary>Save new and/or modified items (XML elements)</summary><description>If '_saveUrl' is specified, it is used to save XML documents for new, modified and/or deleted XML elements.</description></var><var name="dojox.data.XmlStore.revert" returns="boolean" type="Function" prototype="dojox.data.XmlStore"><summary>Invalidate changes (new and/or modified elements)</summary></var><var name="dojox.data.XmlStore._newItems" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._deletedItems" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._modifiedItems" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore.isDirty" returns="True if an item or items are new, modified or deleted, otherwise false" type="Function" prototype="dojox.data.XmlStore"><summary>Check whether an item is new, modified or deleted</summary><description>If 'item' is specified, true is returned if the item is new, modified or deleted. Otherwise, true is returned if there are any new, modified or deleted items.</description></var><var name="dojox.data.XmlStore._saveItem" type="Function" prototype="dojox.data.XmlStore" private="1"><chains><chain type="call" parent="keywordArgs.onError"/><chain type="call" parent="keywordArgs.onComplete"/></chains></var><var name="dojox.data.XmlStore._getSaveUrl" returns="string" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Generate a URL for save</summary><description>This default implementation just returns '_saveUrl'. Sub-classes may override this method for the custom URL based on changes (new, deleted, or modified).</description></var><var name="dojox.data.XmlStore._getDeleteUrl" returns="string" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Generate a URL for delete</summary><description>This default implementation returns '_saveUrl' with '_keyAttribute' as a query string Sub-classes may override this method for the custom URL based on changes (new, deleted, or modified).</description></var><var name="dojox.data.XmlStore._getPostContent" returns="XML string" type="Function" prototype="dojox.data.XmlStore" private="1"><summary>Generate a content to post</summary><description>This default implementation generates an XML document for one (the first only) new or modified element. Sub-classes may override this method for the custom post content generation.</description></var><var name="dojox.data.XmlStore._getAttribute" returns="object" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._getItem" returns="object" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._getItemIndex" returns="int" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._backupItem" returns="new or already modified" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._restoreItems" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._forgetItem" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._getDocument" returns="DOMDocument" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._getRootElement" returns="DOMElement" type="Function" prototype="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._url" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._fetchUrl" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._saveUrl" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._rootItem" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._keyAttribute" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlStore._attributeMap" instance="dojox.data.XmlStore" private="1"/><var name="dojox.data.XmlItem" type="Function"><summary>Initialize with an XML element</summary><description>This class represents an item of 'XmlStore' holding an XML element. 'element' element: An XML element</description></var><var name="dojox.data.XmlItem.toString" returns="String" type="Function" prototype="dojox.data.XmlItem"><summary>Return a value of the first text child of the element</summary></var><var name="dojox.data.XmlItem.element" instance="dojox.data.XmlItem"/><var name="dojox.data.XmlItem.store" instance="dojox.data.XmlItem"/><var name="element" type="An"><summary>XML element</summary></var><var name="store" type="The"><summary>containing store, if any.</summary></var><var name="dojox.data" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.data.dom" project="dojox" file="data/dom.js"><vars><var name="dojox.data.dom.createDocument" returns="DOMDocument" type="Function"><summary>cross-browser implementation of creating an XML document object.</summary></var><var name="dojox.data.dom.textContent" returns="mixed" type="Function"><summary>Implementation of the DOM Level 3 attribute; scan node for text</summary><description>Implementation of the DOM Level 3 attribute; scan node for text This function can also update the text of a node by replacing all child content of the node.</description></var><var name="dojox.data.dom.replaceChildren" type="Function"><summary>Removes all children of node and appends newChild. All the existing children will be destroyed.</summary><description>Removes all children of node and appends newChild. All the existing children will be destroyed.</description></var><var name="dojox.data.dom.removeChildren" returns="int" type="Function"><summary>removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call destroyNode on them after they are not used anymore.</summary></var><var name="dojox.data.dom.destroyNode" type="Function"><summary>destroy a node (it can not be used any more). For IE, this is the right function to call to prevent memory leaks. While for other browsers, this is identical to node.parentNode.removeChild(node);</summary></var><var name="dojox.data.dom.innerXML" returns="string" type="Function"><summary>Implementation of MS's innerXML function.</summary></var><var name="dojox.data.dom.clean" type="Function"><summary>removes native event handlers so that destruction of the node will not leak memory. On most browsers this is a no-op, but it's critical for manual node removal on IE.</summary></var><var name="dojox.data.dom._ie_clobber" type="Function" initialized="1" private="1"><summary>Internal function for handling cleanup of properties, etc, on nodes for IE.</summary><description>Internal function for handling cleanup of properties, etc, on nodes for IE. This is needed to handle memory leaks in IE if cleanup isn't done manually.</description></var><var name="dojox.data.dom._ie_clobber.clobberNodes" instance="dojox.data.dom._ie_clobber"/><var name="dojox.data.dom._ie_clobber.clobber" type="Function" instance="dojox.data.dom._ie_clobber"/><var name="dojox.data.dom" type="Object"/><var name="dojox.data" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.date.posix" project="dojox" file="date/posix.js"><requires><require environment="common" resource="dojo.date"/><require environment="common" resource="dojo.date.locale"/><require environment="common" resource="dojo.string"/></requires><vars><var name="dojox.date.posix.strftime" returns="String" type="Function"><summary>Formats the date object using the specifications of the POSIX strftime function</summary><description>see &lt;http: // www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&gt;</description></var><var name="dojox.date.posix" type="Object"/><var name="dojox.date" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.filter.number" project="dojox" file="dtl/filter/number.js"><vars><var name="stitch.tpl.filter.number.add" type="Function"/><var name="dojox.dtl.filter.number" type="Object"/><var name="dojox.dtl.filter" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.filter.string" project="dojox" file="dtl/filter/string.js"><vars><var name="stitch.tpl.filter.string.addslashes" type="Function"/><var name="stitch.tpl.filter.string.capfirst" type="Function"/><var name="stitch.tpl.filter.string.center" type="Function"/><var name="stitch.tpl.filter.string.cut" type="Function"/><var name="stitch.tpl.filter.string.default_" type="Function"/><var name="stitch.tpl.filter.string.slugify" type="Function"><summary>Converts to lowercase, removes non-alpha chars and converts spaces to hyphens</summary></var><var name="dojox.dtl.filter.string" type="Object"/><var name="dojox.dtl.filter" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.html" project="dojox" file="dtl/html.js"><requires><require environment="common" resource="stitch.tpl"/><require environment="common" resource="stitch.lang"/><require environment="common" resource="dojo.string.Builder"/><require environment="common" resource="dojo.lang.common"/></requires><vars><var name="stitch.tpl.html.Template" type="Function"><summary>Use this object for HTML templating</summary></var><var name="stitch.tpl.html.Template.contents" instance="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.nodelist" instance="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Buffer" type="Function"><summary>Allows the manipulation of DOM</summary><description>Use this to append a child, change the parent, or change the attribute of the current node.</description></var><var name="stitch.tpl.html.Buffer._parent" instance="stitch.tpl.html.Buffer" private="1"/><var name="stitch.tpl.html.Buffer._cache" instance="stitch.tpl.html.Buffer" private="1"/><var name="stitch.tpl.html.Node" type="Function"><summary>Places a node into DOM</summary></var><var name="stitch.tpl.html.Node.contents" instance="stitch.tpl.html.Node"/><var name="stitch.tpl.html.NodeList" type="Function"><summary>A list of any HTML-specific node object</summary><description>Any object that's used in the constructor or added through the push function much implement the render, unrender, and clone functions.</description></var><var name="stitch.tpl.html.NodeList.contents" instance="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.VarNode" type="Function"><summary>A node to be processed as a variable</summary><description>Will render an object that supports the render function and the getRootNode function</description></var><var name="stitch.tpl.html.VarNode.contents" instance="stitch.tpl.html.VarNode"/><var name="stitch.tpl.html.VarNode._lists" instance="stitch.tpl.html.VarNode" private="1"/><var name="stitch.tpl.html.ChangeNode" type="Function"><summary>Changes the parent during render/unrender</summary></var><var name="stitch.tpl.html.ChangeNode.contents" instance="stitch.tpl.html.ChangeNode"/><var name="stitch.tpl.html.ChangeNode._up" instance="stitch.tpl.html.ChangeNode" private="1"/><var name="stitch.tpl.html.AttributeNode" type="Function"><summary>Works on attributes</summary></var><var name="stitch.tpl.html.AttributeNode._key" instance="stitch.tpl.html.AttributeNode" private="1"/><var name="stitch.tpl.html.AttributeNode._value" instance="stitch.tpl.html.AttributeNode" private="1"/><var name="stitch.tpl.html.AttributeNode._tpl" instance="stitch.tpl.html.AttributeNode" private="1"/><var name="stitch.tpl.html.AttributeNode.contents" instance="stitch.tpl.html.AttributeNode"/><var name="stitch.tpl.html.TextNode" type="Function"><summary>Adds a straight text node without any processing</summary></var><var name="stitch.tpl.html.TextNode.contents" instance="stitch.tpl.html.TextNode"/><var name="stitch.tpl.html.Parser" type="Function"><summary>Turn a simple array into a set of objects</summary><description>This is also used by all tags to move through the list of nodes.</description></var><var name="stitch.tpl.html.Parser.contents" instance="stitch.tpl.html.Parser"/><var name="stitch.tpl.html.Template._count" prototype="stitch.tpl.html.Template" private="1"/><var name="stitch.tpl.html.Template._re" prototype="stitch.tpl.html.Template" private="1"/><var name="stitch.tpl.html.Template.setClass" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.getRootNode" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.getBuffer" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.render" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.unrender" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Template.toString" type="Function" prototype="stitch.tpl.html.Template"/><var name="stitch.tpl.html.Buffer.concat" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.remove" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.getCache" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.setCache" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.setAttribute" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.setParent" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Buffer.setParent._parent" instance="stitch.tpl.html.Buffer.setParent" private="1"/><var name="stitch.tpl.html.Buffer.getParent" type="Function" prototype="stitch.tpl.html.Buffer"/><var name="stitch.tpl.html.Node.render" type="Function" prototype="stitch.tpl.html.Node"/><var name="stitch.tpl.html.Node.unrender" type="Function" prototype="stitch.tpl.html.Node"/><var name="stitch.tpl.html.Node.clone" type="Function" prototype="stitch.tpl.html.Node"/><var name="stitch.tpl.html.Node.toString" type="Function" prototype="stitch.tpl.html.Node"/><var name="stitch.tpl.html.NodeList.push" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.NodeList.unshift" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.NodeList.render" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.NodeList.unrender" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.NodeList.clone" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.NodeList.toString" type="Function" prototype="stitch.tpl.html.NodeList"/><var name="stitch.tpl.html.VarNode.render" type="Function" prototype="stitch.tpl.html.VarNode"/><var name="stitch.tpl.html.VarNode.render._rendered" instance="stitch.tpl.html.VarNode.render" private="1"/><var name="stitch.tpl.html.VarNode.render._curr" instance="stitch.tpl.html.VarNode.render" private="1"/><var name="stitch.tpl.html.VarNode.render._txt" instance="stitch.tpl.html.VarNode.render" private="1"/><var name="stitch.tpl.html.VarNode.render._txt.data" instance="stitch.tpl.html.VarNode.render"/><var name="stitch.tpl.html.VarNode.unrender" type="Function" prototype="stitch.tpl.html.VarNode"/><var name="stitch.tpl.html.VarNode.unrender._rendered" instance="stitch.tpl.html.VarNode.unrender" private="1"/><var name="stitch.tpl.html.VarNode.clone" type="Function" prototype="stitch.tpl.html.VarNode"/><var name="stitch.tpl.html.VarNode.toString" type="Function" prototype="stitch.tpl.html.VarNode"/><var name="stitch.tpl.html.ChangeNode.render" type="Function" prototype="stitch.tpl.html.ChangeNode"/><var name="stitch.tpl.html.ChangeNode.unrender" type="Function" prototype="stitch.tpl.html.ChangeNode"/><var name="stitch.tpl.html.ChangeNode.clone" type="Function" prototype="stitch.tpl.html.ChangeNode"/><var name="stitch.tpl.html.ChangeNode.toString" type="Function" prototype="stitch.tpl.html.ChangeNode"/><var name="stitch.tpl.html.AttributeNode.render" type="Function" prototype="stitch.tpl.html.AttributeNode"/><var name="stitch.tpl.html.AttributeNode.render.contents" instance="stitch.tpl.html.AttributeNode.render"/><var name="stitch.tpl.html.AttributeNode.render._rendered" instance="stitch.tpl.html.AttributeNode.render" private="1"/><var name="stitch.tpl.html.AttributeNode.unrender" type="Function" prototype="stitch.tpl.html.AttributeNode"/><var name="stitch.tpl.html.AttributeNode.unrender._rendered" instance="stitch.tpl.html.AttributeNode.unrender" private="1"/><var name="stitch.tpl.html.AttributeNode.unrender.contents" instance="stitch.tpl.html.AttributeNode.unrender"/><var name="stitch.tpl.html.AttributeNode.clone" type="Function" prototype="stitch.tpl.html.AttributeNode"/><var name="stitch.tpl.html.AttributeNode.toString" type="Function" prototype="stitch.tpl.html.AttributeNode"/><var name="stitch.tpl.html.TextNode.render" type="Function" prototype="stitch.tpl.html.TextNode"/><var name="stitch.tpl.html.TextNode.unrender" type="Function" prototype="stitch.tpl.html.TextNode"/><var name="stitch.tpl.html.TextNode.clone" type="Function" prototype="stitch.tpl.html.TextNode"/><var name="stitch.tpl.html.TextNode.toString" type="Function" prototype="stitch.tpl.html.TextNode"/><var name="stitch.tpl.html.Parser.parse" type="Function" prototype="stitch.tpl.html.Parser"/><var name="stitch.tpl.html.Parser.next" type="Function" prototype="stitch.tpl.html.Parser"><summary>Used by tags to discover what token was found</summary></var><var name="stitch.tpl.html.Parser.getTemplate" type="Function" prototype="stitch.tpl.html.Parser"/><var name="stitch.tpl.html.types"/><var name="stitch.tpl.html._re" private="1"/><var name="stitch.tpl.html._re2" private="1"/><var name="stitch.tpl.html._re3" private="1"/><var name="stitch.tpl.html._re4" private="1"/><var name="stitch.tpl.html._trim" type="Function" private="1"/><var name="stitch.tpl.html.getTemplate" type="Function"/><var name="stitch.tpl.html.getTemplate._commentable" instance="stitch.tpl.html.getTemplate" private="1"/><var name="stitch.tpl.html.tokenize" type="Function"/><var name="stitch.tpl.html._tokenize" type="Function" private="1"/><var name="dojox.dtl.html" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.tag.event" project="dojox" file="dtl/tag/event.js"><requires><require environment="common" resource="dojo.lang.common"/><require environment="common" resource="dojo.event.browser"/></requires><vars><var name="stitch.tpl.tag.event.EventNode" type="Function"/><var name="stitch.tpl.tag.event.EventNode._type" instance="stitch.tpl.tag.event.EventNode" private="1"/><var name="stitch.tpl.tag.event.EventNode.contents" instance="stitch.tpl.tag.event.EventNode"/><var name="stitch.tpl.tag.event.on" type="Function"><summary>Associates an event type to a function (on the current widget) by name</summary></var><var name="stitch.tpl.tag.event.EventNode.render" type="Function" prototype="stitch.tpl.tag.event.EventNode"/><var name="stitch.tpl.tag.event.EventNode.render._clear" instance="stitch.tpl.tag.event.EventNode.render" private="1"/><var name="stitch.tpl.tag.event.EventNode.render._rendered" instance="stitch.tpl.tag.event.EventNode.render" private="1"/><var name="stitch.tpl.tag.event.EventNode.unrender" type="Function" prototype="stitch.tpl.tag.event.EventNode"/><var name="stitch.tpl.tag.event.EventNode.unrender._rendered" instance="stitch.tpl.tag.event.EventNode.unrender" private="1"/><var name="stitch.tpl.tag.event.EventNode.clone" type="Function" prototype="stitch.tpl.tag.event.EventNode"/><var name="stitch.tpl.tag.event.EventNode.toString" type="Function" prototype="stitch.tpl.tag.event.EventNode"/><var name="dojox.dtl.tag.event" type="Object"/><var name="dojox.dtl.tag" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.tag.html" project="dojox" file="dtl/tag/html.js"><requires><require environment="common" resource="dojo.lang.common"/></requires><vars><var name="stitch.tpl.tag.html.HtmlNode" type="Function"/><var name="stitch.tpl.tag.html.HtmlNode.contents" instance="stitch.tpl.tag.html.HtmlNode"/><var name="stitch.tpl.tag.html.HtmlNode._div" instance="stitch.tpl.tag.html.HtmlNode" private="1"/><var name="stitch.tpl.tag.html.HtmlNode._lasts" instance="stitch.tpl.tag.html.HtmlNode" private="1"/><var name="stitch.tpl.tag.html.html" type="Function"/><var name="stitch.tpl.tag.html.HtmlNode.render" type="Function" prototype="stitch.tpl.tag.html.HtmlNode"/><var name="stitch.tpl.tag.html.HtmlNode.render._rendered" instance="stitch.tpl.tag.html.HtmlNode.render" private="1"/><var name="stitch.tpl.tag.html.HtmlNode.unrender" type="Function" prototype="stitch.tpl.tag.html.HtmlNode"/><var name="stitch.tpl.tag.html.HtmlNode.unrender._rendered" instance="stitch.tpl.tag.html.HtmlNode.unrender" private="1"/><var name="stitch.tpl.tag.html.HtmlNode.unrender._last" instance="stitch.tpl.tag.html.HtmlNode.unrender" private="1"/><var name="stitch.tpl.tag.html.HtmlNode.clone" type="Function" prototype="stitch.tpl.tag.html.HtmlNode"/><var name="dojox.dtl.tag.html" type="Object"/><var name="dojox.dtl.tag" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.tag.loader" project="dojox" file="dtl/tag/loader.js"><requires><require environment="common" resource="stitch.tpl"/><require environment="common" resource="dojo.lang.common"/></requires><vars><var name="stitch.tpl.tag.loader.BlockNode" type="Function"/><var name="stitch.tpl.tag.loader.BlockNode.name" instance="stitch.tpl.tag.loader.BlockNode"/><var name="stitch.tpl.tag.loader.BlockNode.nodelist" instance="stitch.tpl.tag.loader.BlockNode"/><var name="stitch.tpl.tag.loader.block" type="Function"/><var name="stitch.tpl.tag.loader.ExtendsNode" type="Function"/><var name="stitch.tpl.tag.loader.ExtendsNode.getTemplate" instance="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.nodelist" instance="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.shared" instance="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.parent" instance="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.key" instance="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.extends_" type="Function"/><var name="stitch.tpl.tag.loader.BlockNode.render" type="Function" prototype="stitch.tpl.tag.loader.BlockNode"/><var name="stitch.tpl.tag.loader.BlockNode.render.rendered" instance="stitch.tpl.tag.loader.BlockNode.render"/><var name="stitch.tpl.tag.loader.BlockNode.render.override" instance="stitch.tpl.tag.loader.BlockNode.render"/><var name="stitch.tpl.tag.loader.BlockNode.unrender" type="Function" prototype="stitch.tpl.tag.loader.BlockNode"/><var name="stitch.tpl.tag.loader.BlockNode.setOverride" type="Function" prototype="stitch.tpl.tag.loader.BlockNode"><summary>In a shared parent, we override, not overwrite</summary></var><var name="stitch.tpl.tag.loader.BlockNode.setOverride.override" instance="stitch.tpl.tag.loader.BlockNode.setOverride"/><var name="stitch.tpl.tag.loader.BlockNode.toString" type="Function" prototype="stitch.tpl.tag.loader.BlockNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.parents" prototype="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.getParent" type="Function" prototype="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.getParent.parent" instance="stitch.tpl.tag.loader.ExtendsNode.getParent"/><var name="stitch.tpl.tag.loader.ExtendsNode.render" type="Function" prototype="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.render.rendered" instance="stitch.tpl.tag.loader.ExtendsNode.render"/><var name="stitch.tpl.tag.loader.ExtendsNode.unrender" type="Function" prototype="stitch.tpl.tag.loader.ExtendsNode"/><var name="stitch.tpl.tag.loader.ExtendsNode.toString" type="Function" prototype="stitch.tpl.tag.loader.ExtendsNode"/><var name="dojox.dtl.tag.loader" type="Object"/><var name="dojox.dtl.tag" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.tag" project="dojox" file="dtl/tag.js"><requires><require environment="common" resource="stitch.tpl"/><require environment="common" resource="dojo.lang.common"/></requires><vars><var name="stitch.tpl.tag.IfNode" type="Function"/><var name="stitch.tpl.tag.IfNode.bools" instance="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.IfNode.trues" instance="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.IfNode.falses" instance="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.IfNode.type" instance="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.ForNode" type="Function"/><var name="stitch.tpl.tag.ForNode.assign" instance="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.loop" instance="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.reversed" instance="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.nodelist" instance="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.pool" instance="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.if_" type="Function"/><var name="stitch.tpl.tag.for_" type="Function"/><var name="stitch.tpl.tag.IfNode.render" type="Function" prototype="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.IfNode.render.type" instance="stitch.tpl.tag.IfNode.render"/><var name="stitch.tpl.tag.IfNode.unrender" type="Function" prototype="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.IfNode.toString" type="Function" prototype="stitch.tpl.tag.IfNode"/><var name="stitch.tpl.tag.ForNode.render" type="Function" prototype="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.unrender" type="Function" prototype="stitch.tpl.tag.ForNode"/><var name="stitch.tpl.tag.ForNode.toString" type="Function" prototype="stitch.tpl.tag.ForNode"/><var name="dojox.dtl.tag" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.dtl.text" project="dojox" file="dtl/text.js"><requires><require environment="common" resource="dojo.lang.common"/><require environment="common" resource="stitch.register"/><require environment="common" resource="stitch.lang"/><require environment="common" resource="dojo.string.Builder"/></requires><vars><var name="stitch.tpl.Template" type="Function"/><var name="stitch.tpl.Template.contents" instance="stitch.tpl.Template"/><var name="stitch.tpl.Filter" type="Function"><summary>Uses a string to find (and manipulate) a variable</summary></var><var name="stitch.tpl.Filter.key" instance="stitch.tpl.Filter"/><var name="stitch.tpl.Filter.filters" instance="stitch.tpl.Filter"/><var name="stitch.tpl.Node" type="Function"><summary>Basic catch-all node</summary></var><var name="stitch.tpl.Node.contents" instance="stitch.tpl.Node"/><var name="stitch.tpl.NodeList" type="Function"><summary>Allows us to render a group of nodes</summary></var><var name="stitch.tpl.NodeList.contents" instance="stitch.tpl.NodeList"/><var name="stitch.tpl.VarNode" type="Function"><summary>A node to be processed as a variable</summary></var><var name="stitch.tpl.VarNode.contents" instance="stitch.tpl.VarNode"/><var name="stitch.tpl.Parser" type="Function"><summary>Parser used during initialization and for tag groups.</summary></var><var name="stitch.tpl.Parser.contents" instance="stitch.tpl.Parser"/><var name="stitch.tpl.Template.render" type="Function" prototype="stitch.tpl.Template"/><var name="stitch.tpl.Filter._re" prototype="stitch.tpl.Filter" private="1"/><var name="stitch.tpl.Filter._exists" type="Function" prototype="stitch.tpl.Filter" private="1"/><var name="stitch.tpl.Filter.resolve" type="Function" prototype="stitch.tpl.Filter"/><var name="stitch.tpl.Filter.resolvePath" type="Function" prototype="stitch.tpl.Filter"/><var name="stitch.tpl.Node.render" type="Function" prototype="stitch.tpl.Node"><summary>Adds content onto the buffer</summary></var><var name="stitch.tpl.NodeList.push" type="Function" prototype="stitch.tpl.NodeList"><summary>Add a new node to the list</summary></var><var name="stitch.tpl.NodeList.render" type="Function" prototype="stitch.tpl.NodeList"><summary>Adds all content onto the buffer</summary></var><var name="stitch.tpl.NodeList.unrender" type="Function" prototype="stitch.tpl.NodeList"/><var name="stitch.tpl.NodeList.clone" type="Function" prototype="stitch.tpl.NodeList"/><var name="stitch.tpl.VarNode.render" type="Function" prototype="stitch.tpl.VarNode"/><var name="stitch.tpl.Parser.parse" returns="the node that matched." type="Function" prototype="stitch.tpl.Parser"><summary>Turns tokens into nodes</summary><description>Steps into tags are they're found. Blocks use the parse object to find their closing tag (the stop_at array). stop_at is inclusive, it</description></var><var name="stitch.tpl.Parser.next" type="Function" prototype="stitch.tpl.Parser"><summary>Returns the next token in the list.</summary></var><var name="stitch.tpl.types.tag"/><var name="stitch.tpl.types.varr"/><var name="stitch.tpl.types.text"/><var name="stitch.tpl._get" type="Function" private="1"><summary>Used to find both tags and filters</summary></var><var name="stitch.tpl.getBlock" type="Function"/><var name="stitch.tpl.getFilter" type="Function"/><var name="stitch.tpl.getTemplate" type="Function"/><var name="stitch.tpl.getTemplateString" type="Function"/><var name="stitch.tpl.tokenize" type="Function"/><var name="dojox.dtl.text" type="Object"/><var name="dojox.dtl" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.io.cometd" project="dojox" file="io/cometd.js"><requires><require environment="common" resource="dojo.AdapterRegistry"/><require environment="common" resource="dojo.io.script"/></requires><vars><var name="cometd" returns="return: boolean" type="Function" initialized="1"/><var name="cometd.initialized" instance="cometd"/><var name="cometd.connected" instance="cometd"/><var name="cometd.connectionTypes" instance="cometd"/><var name="cometd.version" instance="cometd"/><var name="cometd.minimumVersion" instance="cometd"/><var name="cometd.clientId" instance="cometd"/><var name="cometd._isXD" instance="cometd" private="1"/><var name="cometd.handshakeReturn" instance="cometd"/><var name="cometd.currentTransport" instance="cometd"/><var name="cometd.url" instance="cometd"/><var name="cometd.lastMessage" instance="cometd"/><var name="cometd.globalTopicChannels" instance="cometd"/><var name="cometd.backlog" instance="cometd"/><var name="cometd.tunnelInit" type="Function" instance="cometd"/><var name="cometd.tunnelCollapse" type="Function" instance="cometd"/><var name="cometd.init" type="Function" instance="cometd"/><var name="cometd.finishInit" type="Function" instance="cometd"/><var name="cometd.currentTransport.version" instance="cometd"/><var name="cometd._getRandStr" type="Function" instance="cometd" private="1"/><var name="cometd.deliver" type="Function" instance="cometd"/><var name="cometd._deliver" type="Function" instance="cometd" private="1"/><var name="cometd.disconnect" type="Function" instance="cometd"/><var name="cometd.publish" type="Function" instance="cometd"><summary>publishes the passed message to the cometd server for delivery on the specified topic</summary></var><var name="cometd.subscribe" type="Function" instance="cometd"><summary>return: boolean inform the server of this client's interest in channel</summary></var><var name="cometd.subscribed" type="Function" instance="cometd"/><var name="cometd.unsubscribe" type="Function" instance="cometd"><summary>return: boolean inform the server of this client's disinterest in channel</summary></var><var name="cometd.unsubscribed" type="Function" instance="cometd"/><var name="cometd.longPollTransport" type="Function" initialized="1"/><var name="cometd.longPollTransport.connected" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.connectionId" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.authToken" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.lastTimestamp" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.lastId" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.backlog" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.check" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.tunnelInit" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.tunnelCollapse" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.deliver" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.openTunnelWith" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.processBacklog" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.sendMessage" type="Function" instance="cometd.longPollTransport"/><var name="cometd.longPollTransport.startup" type="Function" instance="cometd.longPollTransport"/><var name="cometd.callbackPollTransport" type="Function" initialized="1"/><var name="cometd.callbackPollTransport.connected" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.connectionId" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.authToken" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.lastTimestamp" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.lastId" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.backlog" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.check" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.tunnelInit" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.tunnelCollapse" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.deliver" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.openTunnelWith" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.processBacklog" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.sendMessage" type="Function" instance="cometd.callbackPollTransport"/><var name="cometd.callbackPollTransport.startup" type="Function" instance="cometd.callbackPollTransport"/><var name="dojox.io.cometd" type="Object"/><var name="dojox.io" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.rpc.YahooService" project="dojox" file="rpc/YahooService.js"><requires><require environment="common" resource="dojo.rpc.RpcService"/><require environment="common" resource="dojo.rpc.JsonService"/><require environment="common" resource="dojo.json"/><require environment="common" resource="dojo.uri.*"/><require environment="common" resource="dojo.io.ScriptSrcIO"/></requires><vars><var name="dojo.rpc.YahooService" type="Function"><chains><chain type="prototype" parent="dojo.rpc.JsonService"/></chains></var><var name="dojo.rpc.YahooService.appId" instance="dojo.rpc.YahooService"/><var name="dojo.rpc.YahooService.strictArgChecks" instance="dojo.rpc.YahooService"/><var name="dojo.rpc.YahooService.bind" type="Function" prototype="dojo.rpc.YahooService"><summary>Yahoo RPC bind method. Takes remote method, parameters, deferred, and a url and sends of a ScriptSrcIO request to connect to Yahoo services crossplatform</summary></var><var name="dojox.rpc.YahooService" type="Object"/><var name="dojox.rpc" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.string" project="dojox" file="string.js"><vars><var name="dojox.string.Builder" type="Function"><summary>A fast buffer for creating large strings</summary></var><var name="dojox.string.Builder.b" instance="dojox.string.Builder"/><var name="dojox.string" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.data.CsvStore" project="dojox" file="tests/data/CsvStore.js"><requires><require environment="common" resource="dojox.data.CsvStore"/></requires><vars><var name="dojox.tests.data.CsvStore.getDatasource" returns="Object" type="Function"><summary>A simple helper function for getting the sample data used in each of the tests.</summary><description>A simple helper function for getting the sample data used in each of the tests.</description></var><var name="dojox.tests.data.CsvStore.verifyItems" returns="Boolean" type="Function"><summary>A helper function for validating that the items array is ordered the same as the compareArray</summary></var><var name="dojox.tests.data.CsvStore.error" type="Function"><summary>The error callback function to be used for all of the tests.</summary></var><var name="testReadAPI_fetch_all" returns="Object" type="Function"><summary>Simple test of a basic fetch on CsvStore.</summary><description>Simple test of a basic fetch on CsvStore.</description></var><var name="testReadAPI_fetch_one" returns="Object" type="Function"><summary>Simple test of a basic fetch on CsvStore of a single item.</summary><description>Simple test of a basic fetch on CsvStore of a single item.</description></var><var name="testReadAPI_fetch_all_streaming" returns="Object" type="Function"><summary>Simple test of a basic fetch on CsvStore.</summary><description>Simple test of a basic fetch on CsvStore.</description></var><var name="testReadAPI_fetch_paging" returns="Object" type="Function"><summary>Test of multiple fetches on a single result. Paging, if you will.</summary><description>Test of multiple fetches on a single result. Paging, if you will.</description></var><var name="testReadAPI_getValue" type="Function"><summary>Simple test of the getValue function of the store.</summary><description>Simple test of the getValue function of the store.</description></var><var name="testReadAPI_getValues" type="Function"><summary>Simple test of the getValues function of the store.</summary><description>Simple test of the getValues function of the store.</description></var><var name="testIdentityAPI_getItemByIdentity" type="Function"><summary>Simple test of the getItemByIdentity function of the store.</summary><description>Simple test of the getItemByIdentity function of the store.</description></var><var name="testIdentityAPI_getIdentity" returns="Object" type="Function"><summary>Simple test of the getItemByIdentity function of the store.</summary><description>Simple test of the getItemByIdentity function of the store.</description></var><var name="testReadAPI_isItem" type="Function"><summary>Simple test of the isItem function of the store</summary><description>Simple test of the isItem function of the store</description></var><var name="testReadAPI_hasAttribute" type="Function"><summary>Simple test of the hasAttribute function of the store</summary><description>Simple test of the hasAttribute function of the store</description></var><var name="testReadAPI_containsValue" type="Function"><summary>Simple test of the containsValue function of the store</summary><description>Simple test of the containsValue function of the store</description></var><var name="testReadAPI_getAttributes" type="Function"><summary>Simple test of the getAttributes function of the store</summary><description>Simple test of the getAttributes function of the store</description></var><var name="testReadAPI_getFeatures" type="Function"><summary>Simple test of the getFeatures function of the store</summary><description>Simple test of the getFeatures function of the store</description></var><var name="testReadAPI_fetch_patternMatch0" returns="Object" type="Function"><summary>Function to test pattern matching of everything starting with lowercase e</summary><description>Function to test pattern matching of everything starting with lowercase e</description></var><var name="testReadAPI_fetch_patternMatch1" returns="Object" type="Function"><summary>Function to test pattern matching of everything with $ in it.</summary><description>Function to test pattern matching of everything with $ in it.</description></var><var name="testReadAPI_fetch_patternMatch2" returns="Object" type="Function"><summary>Function to test exact pattern match</summary><description>Function to test exact pattern match</description></var><var name="testReadAPI_fetch_patternMatch_caseInsensitive" returns="Object" type="Function"><summary>Function to test exact pattern match with case insensitivity set.</summary><description>Function to test exact pattern match with case insensitivity set.</description></var><var name="testReadAPI_fetch_patternMatch_caseSensitive" returns="Object" type="Function"><summary>Function to test exact pattern match with case insensitivity set.</summary><description>Function to test exact pattern match with case insensitivity set.</description></var><var name="testReadAPI_fetch_sortNumeric" returns="Object" type="Function"><summary>Function to test sorting numerically.</summary><description>Function to test sorting numerically.</description></var><var name="testReadAPI_fetch_sortNumericDescending" returns="Object" type="Function"><summary>Function to test sorting numerically.</summary><description>Function to test sorting numerically.</description></var><var name="testReadAPI_fetch_sortNumericWithCount" returns="Object" type="Function"><summary>Function to test sorting numerically in descending order, returning only a specified number of them.</summary><description>Function to test sorting numerically in descending order, returning only a specified number of them.</description></var><var name="testReadAPI_fetch_sortAlphabetic" returns="Object" type="Function"><summary>Function to test sorting alphabetic ordering.</summary><description>Function to test sorting alphabetic ordering.</description></var><var name="testReadAPI_fetch_sortAlphabeticDescending" returns="Object" type="Function"><summary>Function to test sorting alphabetic ordering in descending mode.</summary><description>Function to test sorting alphabetic ordering in descending mode.</description></var><var name="testReadAPI_fetch_sortMultiple" returns="Object" type="Function"><summary>Function to test sorting on multiple attributes.</summary><description>Function to test sorting on multiple attributes.</description></var><var name="testReadAPI_fetch_sortMultipleSpecialComparator" returns="mixed" type="Function"><summary>Function to test sorting on multiple attributes with a custom comparator.</summary><description>Function to test sorting on multiple attributes with a custom comparator.</description></var><var name="dojox.tests.data.CsvStore" type="Object"/><var name="dojox.tests.data" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.data.XmlStore" project="dojox" file="tests/data/XmlStore.js"><requires><require environment="common" resource="dojox.data.XmlStore"/></requires><vars><var name="dojox.tests.data.XmlStore.getBooks2Store" type="Function"/><var name="dojox.tests.data.XmlStore.getBooksStore" type="Function"/><var name="testReadAPI_fetch_all" returns="Object" type="Function"><summary>Simple test of fetching all xml items through an XML element called isbn</summary><description>Simple test of fetching all xml items through an XML element called isbn</description></var><var name="testReadAPI_fetch_one" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn</summary><description>Simple test of fetching one xml items through an XML element called isbn</description></var><var name="testReadAPI_fetch_paging" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn</summary><description>Simple test of fetching one xml items through an XML element called isbn</description></var><var name="testReadAPI_fetch_pattern0" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</description></var><var name="testReadAPI_fetch_pattern1" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</description></var><var name="testReadAPI_fetch_pattern2" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with * pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with * pattern match</description></var><var name="testReadAPI_fetch_pattern_caseInsensitive" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match and in case insensitive mode.</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match and in case insensitive mode.</description></var><var name="testReadAPI_fetch_pattern_caseSensitive" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match and in case sensitive mode.</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match and in case sensitive mode.</description></var><var name="testReadAPI_fetch_all_rootItem" returns="Object" type="Function"><summary>Simple test of fetching all xml items through an XML element called isbn</summary><description>Simple test of fetching all xml items through an XML element called isbn</description></var><var name="testReadAPI_fetch_withAttrMap_all" returns="Object" type="Function"/><var name="testReadAPI_fetch_withAttrMap_one" returns="Object" type="Function"/><var name="testReadAPI_fetch_withAttrMap_pattern0" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</description></var><var name="testReadAPI_fetch_withAttrMap_pattern1" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</description></var><var name="testReadAPI_fetch_withAttrMap_pattern2" returns="Object" type="Function"><summary>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</summary><description>Simple test of fetching one xml items through an XML element called isbn with ? pattern match</description></var><var name="testReadAPI_getValue" returns="Object" type="Function"><summary>Simple test of the getValue API</summary><description>Simple test of the getValue API</description></var><var name="testReadAPI_getValues" returns="Object" type="Function"><summary>Simple test of the getValues API</summary><description>Simple test of the getValues API</description></var><var name="testReadAPI_isItem" returns="Object" type="Function"><summary>Simple test of the isItem API</summary><description>Simple test of the isItem API</description></var><var name="testReadAPI_isItem_multistore" returns="Object" type="Function"><summary>Simple test of the isItem API across multiple store instances.</summary><description>Simple test of the isItem API across multiple store instances.</description></var><var name="testReadAPI_hasAttribute" returns="Object" type="Function"><summary>Simple test of the hasAttribute API</summary><description>Simple test of the hasAttribute API</description></var><var name="testReadAPI_containsValue" returns="Object" type="Function"><summary>Simple test of the containsValue API</summary><description>Simple test of the containsValue API</description></var><var name="testReadAPI_sortDescending" returns="Object" type="Function"><summary>Simple test of the sorting API in descending order.</summary><description>Simple test of the sorting API in descending order.</description></var><var name="testReadAPI_sortAscending" returns="Object" type="Function"><summary>Simple test of the sorting API in ascending order.</summary><description>Simple test of the sorting API in ascending order.</description></var><var name="testReadAPI_sortDescendingNumeric" returns="mixed" type="Function"><summary>Simple test of the sorting API in descending order using a numeric comparator.</summary><description>Simple test of the sorting API in descending order using a numeric comparator.</description></var><var name="testReadAPI_sortAscendingNumeric" returns="mixed" type="Function"><summary>Simple test of the sorting API in ascending order using a numeric comparator.</summary><description>Simple test of the sorting API in ascending order using a numeric comparator.</description></var><var name="testReadAPI_isItemLoaded" returns="Object" type="Function"><summary>Simple test of the isItemLoaded API</summary><description>Simple test of the isItemLoaded API</description></var><var name="testReadAPI_getFeatures" type="Function"><summary>Simple test of the getFeatures function of the store</summary><description>Simple test of the getFeatures function of the store</description></var><var name="testReadAPI_getAttributes" returns="Object" type="Function"><summary>Simple test of the getAttributes API</summary><description>Simple test of the getAttributes API</description></var><var name="testWriteAPI_setValue" returns="Object" type="Function"><summary>Simple test of the setValue API</summary><description>Simple test of the setValue API</description></var><var name="testWriteAPI_unsetAttribute" returns="Object" type="Function"><summary>Simple test of the unsetAttribute API</summary><description>Simple test of the unsetAttribute API</description></var><var name="testWriteAPI_isDirty" returns="Object" type="Function"><summary>Simple test of the isDirty API</summary><description>Simple test of the isDirty API</description></var><var name="testWriteAPI_revert" returns="Object" type="Function"><summary>Simple test of the isDirty API</summary><description>Simple test of the isDirty API</description></var><var name="dojox.tests.data.XmlStore" type="Object"/><var name="dojox.tests.data" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.data.dom" project="dojox" file="tests/data/dom.js"><requires><require environment="common" resource="dojox.data.dom"/></requires><vars><var name="testCreateDocument" type="Function"/><var name="testCreateDocumentFromText" type="Function"/><var name="testDestroyNode" type="Function"/><var name="testReadTextContent" type="Function"/><var name="testSetTextContent" type="Function"/><var name="testReplaceChildrenArray" type="Function"/><var name="testReplaceChildrenSingle" type="Function"/><var name="testRemoveChildren" type="Function"/><var name="testInnerXML" type="Function"/><var name="dojox.tests.data.dom" type="Object"/><var name="dojox.tests.data" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.date.posix" project="dojox" file="tests/date/posix.js"><requires><require environment="common" resource="dojox.date.posix"/></requires><vars><var name="test_date_strftime" type="Function"/><var name="dojox.tests.date.posix" type="Object"/><var name="dojox.tests.date" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.module" project="dojox" file="tests/module.js"><requires><require environment="common" resource="dojox.tests.date.posix"/><require environment="common" resource="dojox.tests.data.CsvStore"/><require environment="common" resource="dojox.tests.wire"/></requires><vars><var name="dojox.tests.module" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.string" project="dojox" file="tests/string.js"><requires><require environment="common" resource="dojox.string"/></requires><vars><var name="dojox.tests.string" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.CompositeWire" project="dojox" file="tests/wire/CompositeWire.js"><requires><require environment="common" resource="dojox.wire.CompositeWire"/></requires><vars><var name="test_CompositeWire_children" type="Function"/><var name="dojox.tests.wire.CompositeWire" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.DataWire" project="dojox" file="tests/wire/DataWire.js"><requires><require environment="common" resource="dojox.wire.DataWire"/><require environment="common" resource="dojox.data.XmlStore"/></requires><vars><var name="test_DataWire_attribute" type="Function"/><var name="dojox.tests.wire.DataWire" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.TableAdapter" project="dojox" file="tests/wire/TableAdapter.js"><requires><require environment="common" resource="dojox.wire.TableAdapter"/></requires><vars><var name="test_TableAdapter_columns" type="Function"/><var name="dojox.tests.wire.TableAdapter" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.TextAdapter" project="dojox" file="tests/wire/TextAdapter.js"><requires><require environment="common" resource="dojox.wire.TextAdapter"/></requires><vars><var name="test_TextAdapter_segments" type="Function"/><var name="test_TextAdapter_delimiter" type="Function"/><var name="dojox.tests.wire.TextAdapter" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.TreeAdapter" project="dojox" file="tests/wire/TreeAdapter.js"><requires><require environment="common" resource="dojox.wire.TreeAdapter"/></requires><vars><var name="test_TreeAdapter_nodes" type="Function"/><var name="dojox.tests.wire.TreeAdapter" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.Wire" project="dojox" file="tests/wire/Wire.js"><requires><require environment="common" resource="dojox.wire.Wire"/></requires><vars><var name="test_Wire_property" type="Function"/><var name="test_Wire_property._a" instance="test_Wire_property" private="1"/><var name="test_Wire_type" type="Function"/><var name="test_Wire_converter" type="Function"/><var name="dojox.tests.wire.Wire" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.XmlWire" project="dojox" file="tests/wire/XmlWire.js"><requires><require environment="common" resource="dojox.wire.XmlWire"/></requires><vars><var name="test_XmlWire_path" type="Function"/><var name="dojox.tests.wire.XmlWire" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire.common" project="dojox" file="tests/wire/common.js"><requires><require environment="common" resource="dojox.wire.common"/></requires><vars><var name="test_create" type="Function"/><var name="test_transfer" type="Function"/><var name="test_connect" type="Function"/><var name="test_disconnect" type="Function"/><var name="dojox.tests.wire.common" type="Object"/><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.tests.wire" project="dojox" file="tests/wire.js"><requires><require environment="common" resource="dojox.tests.wire.common"/><require environment="common" resource="dojox.tests.wire.Wire"/><require environment="common" resource="dojox.tests.wire.DataWire"/><require environment="common" resource="dojox.tests.wire.XmlWire"/><require environment="common" resource="dojox.tests.wire.CompositeWire"/><require environment="common" resource="dojox.tests.wire.TableAdapter"/><require environment="common" resource="dojox.tests.wire.TreeAdapter"/><require environment="common" resource="dojox.tests.wire.TextAdapter"/></requires><vars><var name="dojox.tests.wire" type="Object"/><var name="dojox.tests" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.widget.Toaster" project="dojox" file="widget/Toaster.js"><requires><require environment="common" resource="dojo.fx"/><require environment="common" resource="dijit.base.Widget"/><require environment="common" resource="dijit.base.TemplatedWidget"/><require environment="common" resource="dijit.util.BackgroundIframe"/><require environment="common" resource="dijit.util.place"/></requires><vars><var name="dojox.widget.Toaster" type="Function"><summary>Message that slides in from the corner of the screen, used for notifications like "new email". messageTypes: Enumeration Possible message types.</summary></var><var name="dojox.widget.Toaster.templateString" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.messageTopic" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.defaultType" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.positionDirection" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.positionDirectionTypes" type="Array" prototype="dojox.widget.Toaster"><summary>Possible values for positionDirection parameter</summary></var><var name="dojox.widget.Toaster.duration" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.separator" prototype="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.messageTypes.MESSAGE"/><var name="dojox.widget.Toaster.messageTypes.WARNING"/><var name="dojox.widget.Toaster.messageTypes.ERROR"/><var name="dojox.widget.Toaster.messageTypes.FATAL"/><var name="dojox.widget.Toaster.postCreate" type="Function" prototype="dojox.widget.Toaster"><chains><chain type="call" parent="dojox.widget.Toaster.superclass.postCreate"/></chains></var><var name="dojox.widget.Toaster.clipNode.className" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.contentNode.className" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster._handleMessage" type="Function" prototype="dojox.widget.Toaster" private="1"/><var name="dojox.widget.Toaster.setContent" type="Function" prototype="dojox.widget.Toaster"><summary>sets and displays the given message and show duration</summary></var><var name="dojox.widget.Toaster.contentNode.innerHTML" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.slideAnim" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.fadeAnim" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.isVisible" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster._placeClip" type="Function" prototype="dojox.widget.Toaster" private="1"/><var name="dojox.widget.Toaster.bgIframe" instance="dojox.widget.Toaster"/><var name="dojox.widget.Toaster.onSelect" type="Function" prototype="dojox.widget.Toaster"><summary>callback for when user clicks the message</summary></var><var name="dojox.widget.Toaster.show" type="Function" prototype="dojox.widget.Toaster"><summary>show the Toaster</summary></var><var name="dojox.widget.Toaster._scrollConnected" instance="dojox.widget.Toaster" private="1"/><var name="dojox.widget.Toaster.hide" type="Function" prototype="dojox.widget.Toaster"><summary>hide the Toaster</summary></var><var name="dojox.widget" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.CompositeWire" project="dojox" file="wire/CompositeWire.js"><requires><require environment="common" resource="dojox.wire.common"/><require environment="common" resource="dojox.wire.Wire"/></requires><vars><var name="dojox.wire.CompositeWire" type="Function"><summary>Initialize properties</summary><description>If object properties or array elements specified in 'children' property are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance.</description><chains><chain type="prototype" parent="dojox.wire.Wire"/><chain type="call" parent="dojox.wire.Wire"/></chains></var><var name="dojox.wire.CompositeWire._wireClass" prototype="dojox.wire.CompositeWire" private="1"/><var name="dojox.wire.CompositeWire._getValue" returns="Object||Array" type="Function" prototype="dojox.wire.CompositeWire" private="1"><summary>Return an object with property values or an array with element values</summary><description>This method calls getValue() method of the child Wires with 'object' argument and returns an object with the values as properties or an arary of the values as elements.</description></var><var name="dojox.wire.CompositeWire._setValue" returns="Object||Array" type="Function" prototype="dojox.wire.CompositeWire" private="1"><summary>Set an object properties or an array elements to an object desription: This method calls setValues() method of the child Wires with a corresponding property or element in 'value' argument and 'object' argument.</summary></var><var name="dojox.wire.CompositeWire._initializeChildren" returns="undefined" type="Function" prototype="dojox.wire.CompositeWire" private="1"><summary>Initialize child Wires</summary><description>If object properties or array elements specified in 'children' argument are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance.</description></var><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.DataWire" project="dojox" file="wire/DataWire.js"><requires><require environment="common" resource="dojox.wire.Wire"/></requires><vars><var name="dojox.wire.DataWire" type="Function"><summary>Initialize properties</summary><description>If 'dataStore' property is not specified, but 'parent' property is specified, 'dataStore' property is copied from the parent.</description><chains><chain type="prototype" parent="dojox.wire.Wire"/><chain type="call" parent="dojox.wire.Wire"/></chains></var><var name="dojox.wire.DataWire._wireClass" prototype="dojox.wire.DataWire" private="1"/><var name="dojox.wire.DataWire._getValue" returns="mixed" type="Function" prototype="dojox.wire.DataWire" private="1"><summary>Return an attribute value of an item</summary><description>This method uses a root item passed in 'object' argument and 'attribute' property to call getValue() method of 'dataStore'. If an attribute name have an array suffix ("[]"), getValues() method is called, instead. If an index is specified in the array suffix, an array element for the index is returned, instead of the array itself.</description></var><var name="dojox.wire.DataWire._setValue" returns="mixed" type="Function" prototype="dojox.wire.DataWire" private="1"><summary>Set an attribute value to an item</summary><description>This method uses a root item passed in 'object' argument and 'attribute' property to identify an item. Then, setValue() method of 'dataStore' is called with a leaf attribute name and 'value' argument. If an attribute name have an array suffix ("[]"), setValues() method is called, instead. If an index is specified in the array suffix, an array element for the index is set to 'value', instead of the array itself.</description></var><var name="dojox.wire.DataWire._getAttributeValue" returns="mixed" type="Function" prototype="dojox.wire.DataWire" private="1"><summary>Return an attribute value of an item</summary><description>This method uses an item passed in 'item' argument and 'attribute' argument to call getValue() method of 'dataStore'. If an attribute name have an array suffix ("[]"), getValues() method is called, instead. If an index is specified in the array suffix, an array element for the index is returned, instead of the array itself.</description></var><var name="dojox.wire.DataWire._setAttributeValue" type="Function" prototype="dojox.wire.DataWire" private="1"><summary>Set an attribute value to an item</summary><description>This method uses an item passed in 'item' argument and 'attribute' argument to call setValue() method of 'dataStore' with 'value' argument. If an attribute name have an array suffix ("[]"), setValues() method is called, instead. If an index is specified in the array suffix, an array element for the index is set to 'value', instead of the array itself.</description></var><var name="dojox.wire.DataWire.dataStore" instance="dojox.wire.DataWire"/><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.TableAdapter" project="dojox" file="wire/TableAdapter.js"><requires><require environment="common" resource="dojox.wire.CompositeWire"/></requires><vars><var name="dojox.wire.TableAdapter" type="Function"><summary>Initialize properties</summary><description>If object properties or array elements specified in 'columns' property are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance.</description><chains><chain type="prototype" parent="dojox.wire.CompositeWire"/><chain type="call" parent="dojox.wire.CompositeWire"/></chains></var><var name="dojox.wire.TableAdapter._wireClass" prototype="dojox.wire.TableAdapter" private="1"/><var name="dojox.wire.TableAdapter._getValue" returns="Array" type="Function" prototype="dojox.wire.TableAdapter" private="1"><summary>Return an array of table row value (object or array)</summary><description>This method iterates over an array specified to 'object' argument and calls getValue() method of the child Wires with each element of the array to get a row object or array. Finally, an array with the row objects or arrays are retuned.</description></var><var name="dojox.wire.TableAdapter._setValue" type="Function" prototype="dojox.wire.TableAdapter" private="1"><summary>Not supported</summary></var><var name="dojox.wire.TableAdapter._getRow" returns="Array||Object" type="Function" prototype="dojox.wire.TableAdapter" private="1"><summary>Return an array or object for a table row</summary><description>This method calls getValue() method of the child Wires to create a row object or array.</description></var><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.TextAdapter" project="dojox" file="wire/TextAdapter.js"><requires><require environment="common" resource="dojox.wire.CompositeWire"/></requires><vars><var name="dojox.wire.TextAdapter" type="Function"><summary>Initialize properties</summary><description>If array elements specified in 'segments' are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance.</description><chains><chain type="prototype" parent="dojox.wire.CompositeWire"/><chain type="call" parent="dojox.wire.CompositeWire"/></chains></var><var name="dojox.wire.TextAdapter._wireClass" prototype="dojox.wire.TextAdapter" private="1"/><var name="dojox.wire.TextAdapter._getValue" returns="mixed" type="Function" prototype="dojox.wire.TextAdapter" private="1"><summary>Return a concatenated text</summary><description>This method calls getValue() method of the child Wires wuth 'object' argument and concatenate the values with 'delimiter' property to return. arg: A root object</description></var><var name="dojox.wire.TextAdapter._setValue" type="Function" prototype="dojox.wire.TextAdapter" private="1"><summary>Not supported</summary></var><var name="dojox.wire.TextAdapter._addSegment" returns="String" type="Function" prototype="dojox.wire.TextAdapter" private="1"><summary>Return a concatenated text</summary><description>This method add a text segment specified to 'segment' argument to a base text specified to 'text', with 'delimiter' property.</description></var><var name="dojox.wire.TextAdapter.delimiter" instance="dojox.wire.TextAdapter"/><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.TreeAdapter" project="dojox" file="wire/TreeAdapter.js"><requires><require environment="common" resource="dojox.wire.CompositeWire"/></requires><vars><var name="dojox.wire.TreeAdapter" type="Function"><summary>Initialize properties</summary><description>If object properties ('node', 'title' and 'children') of array elements specified in 'nodes' property are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance.</description><chains><chain type="prototype" parent="dojox.wire.CompositeWire"/><chain type="call" parent="dojox.wire.CompositeWire"/></chains></var><var name="dojox.wire.TreeAdapter._wireClass" prototype="dojox.wire.TreeAdapter" private="1"/><var name="dojox.wire.TreeAdapter._getValue" returns="Array" type="Function" prototype="dojox.wire.TreeAdapter" private="1"><summary>Return an array of tree node values</summary><description>This method iterates over an array specified to 'object' argument and calls getValue() method of 'node' Wires with each element of the array to get object(s) that represetns nodes. (If 'node' Wires are omitted, the array element is used for further processing.) Then, getValue() method of 'title' Wires are called to get title strings for nodes. (If 'title' Wires are omitted, the objects representing nodes are used as title strings.) And if an array of objects with 'node' and 'title' Wires is specified to 'children', it is used to gather child nodes and their title strings in the same way recursively. Finally, an array of the top-level node objects are retuned.</description></var><var name="dojox.wire.TreeAdapter._setValue" type="Function" prototype="dojox.wire.TreeAdapter" private="1"><summary>Not supported</summary></var><var name="dojox.wire.TreeAdapter._initializeChildren" returns="undefined" type="Function" prototype="dojox.wire.TreeAdapter" private="1"><summary>Initialize child Wires</summary><description>If 'node' or 'title' properties of array elements specified in 'children' argument are not Wires, Wires are created from them as arguments, with 'parent' property set to this Wire instance. If an array element has 'children' property, this method is called recursively with it.</description></var><var name="dojox.wire.TreeAdapter._getNodes" returns="Array" type="Function" prototype="dojox.wire.TreeAdapter" private="1"><summary>Return an array of tree node values</summary><description>This method calls getValue() method of 'node' Wires with 'object' argument to get object(s) that represents nodes. (If 'node' Wires are omitted, 'object' is used for further processing.) Then, getValue() method of 'title' Wires are called to get title strings for nodes. (If 'title' Wires are omitted, the objects representing nodes are used as title strings.) And if an array of objects with 'node' and 'title' Wires is specified to 'children', it is used to gather child nodes and their title strings in the same way recursively. Finally, an array of node objects are returned.</description></var><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.Wire" project="dojox" file="wire/Wire.js"><requires><require environment="common" resource="dojox.wire.common"/></requires><vars><var name="dojox.wire.Wire" type="Function"><summary>Initialize properties</summary><description>If 'converter' property is specified and is a string for a converter class, an instanceof the converter class is created.</description></var><var name="dojox.wire.Wire._wireClass" prototype="dojox.wire.Wire" private="1"/><var name="dojox.wire.Wire.getValue" returns="anything" type="Function" prototype="dojox.wire.Wire"><summary>Return a value of an object</summary><description>This method first determins a root object as follows: 1. If 'object' property specified, 1.1 If 'object' is a Wire, its getValue() method is called to obtain a root object. 1.2 Otherwise, use 'object' as a root object. 2. Otherwise, use 'defaultObject' argument. 3. If 'property' is specified, it is used to get a property value. Then, if a sub-class implements _getValue() method, it is called with the root object to get the return value. Otherwise, the root object (typically, a property valye) is used for the return value. Finally, if 'type' property is specified, the return value is converted to the specified primitive type ("string", "number", "boolean" and "array"). If 'converter' property is specified, its convert() method is called to convert the value.</description></var><var name="dojox.wire.Wire.type" instance="dojox.wire.Wire"/><var name="dojox.wire.Wire.setValue" type="Function" prototype="dojox.wire.Wire"><summary>Set a value to an object</summary><description>This method first determins a root object as follows: 1. If 'object' property specified, 1.1 If 'object' is a Wire, its getValue() method is called to obtain a root object. 1.2 Otherwise, use 'object' as a root object. 2. Otherwise, use 'defaultObject' argument. 3. If 'property' is specified, it is used to get a property</description></var><var name="dojox.wire.Wire._getPropertyValue" returns="anything" type="Function" prototype="dojox.wire.Wire" private="1"><summary>Return a property value of an object</summary><description>A value for 'property' of 'object' is returned. If 'property' ends with an array index, it is used to indentify an element of an array property. If 'object' implements getPropertyValue(), it is called with 'property' to obtain the property value. If 'object' implements a getter for the property, it is called to obtain the property value.</description></var><var name="dojox.wire.Wire._setPropertyValue" type="Function" prototype="dojox.wire.Wire" private="1"><summary>Set a property value to an object</summary><description>'value' is set to 'property' of 'object'. If 'property' ends with an array index, it is used to indentify an element of an array property to set the value. If 'object' implements setPropertyValue(), it is called with 'property' and 'value' to set the property value. If 'object' implements a setter for the property, it is called with 'value' to set the property value.</description></var><var name="dojox.wire.Wire.converter" instance="dojox.wire.Wire"/><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.XmlWire" project="dojox" file="wire/XmlWire.js"><requires><require environment="common" resource="dojox.data.dom"/><require environment="common" resource="dojox.wire.Wire"/></requires><vars><var name="dojox.wire.XmlWire" type="Function"><summary>Initialize properties</summary><description>'args' is just mixed in with no further processing.</description><chains><chain type="prototype" parent="dojox.wire.Wire"/><chain type="call" parent="dojox.wire.Wire"/></chains></var><var name="dojox.wire.XmlWire._wireClass" prototype="dojox.wire.XmlWire" private="1"/><var name="dojox.wire.XmlWire._getValue" returns="mixed" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Return an attribute value, a text value or an array of elements</summary><description>This method first uses a root node passed in 'object' argument and 'path' property to identify an attribute, a text or elements. If 'path' starts with a slash (absolute), the first path segment is ignored assuming it point to the root node. (That is, "/a/b/@c" and "b/@c" against a root node access the same attribute value, assuming the root node is an element with a tag name, "a".)</description></var><var name="dojox.wire.XmlWire._setValue" returns="mixed" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Set an attribute value or a child text value to an element</summary><description>This method first uses a root node passed in 'object' argument and 'path' property to identify an attribute, a text or elements. If an intermediate element does not exist, it creates an element of the tag name in the 'path' segment as a child node of the current node. Finally, 'value' argument is set to an attribute or a text (a child node) of the leaf element.</description></var><var name="dojox.wire.XmlWire._getNodeValue" returns="String||Array" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Return an attribute value, a text value or an array of elements</summary><description>If 'exp' starts with '@', an attribute value of the specified attribute is returned. If 'exp' is "text()", a child text value is returned. Otherwise, an array of child elements, the tag name of which match 'exp', is returned.</description></var><var name="dojox.wire.XmlWire._setNodeValue" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Set an attribute value or a child text value to an element</summary><description>If 'exp' starts with '@', 'value' is set to the specified attribute.. If 'exp' is "text()", 'value' is set to a child text.</description></var><var name="dojox.wire.XmlWire._getChildNode" returns="mixed" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Return a child node</summary><description>A child element of the tag name specified with 'name' is returned. If 'name' ends with an array index, it is used to pick up the corresponding element from multiple child elements.</description></var><var name="dojox.wire.XmlWire._getDocument" returns="Document" type="Function" prototype="dojox.wire.XmlWire" private="1"><summary>Return a DOM document</summary><description>If 'node' is specified, a DOM document of the node is returned. Otherwise, a DOM document is created.</description></var><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource><resource provides="dojox.wire.common" project="dojox" file="wire/common.js"><vars><var name="dojox.wire.register" returns="mixed" type="Function"><summary>Register a Wire class desription: The specified Wire class or a class name is registered with a key property of arguments to create a Wire</summary></var><var name="dojox.wire._getClass" returns="Function" type="Function" private="1"><summary>Returns a class</summary><description>The class is loaded by dojo.require() and returned by dojo.getObject().</description></var><var name="dojox.wire.create" returns="Object" type="Function"><summary>Create a Wire from arguments</summary><description>If 'args' specifies 'wireClass', it is used as a class or full qualified class name to create a Wire with 'args' as arguments. Otherwise, a Wire class is determined by other proeprties of 'args' checking if 'args' specifies a key property for a Wire class. If no key property found, the default Wire class is used.</description></var><var name="dojox.wire.isWire" returns="Boolean" type="Function"><summary>Check if an object is a Wire</summary><description>If the specified object is a Wire, true is returned. Otherwise, false is returned.</description></var><var name="dojox.wire.transfer" returns="undefined" type="Function"><summary>Transfer a source value to a target value</summary><description>If 'source' and/or 'target' are not Wires, Wires are created with them as arguments. A value is got through the source Wire and set through the target Wire. 'defaultObject' is passed to Wires as a default root object. If 'defaultTargetObject' is specified, it is passed to the target Wire as a default root object, instead of 'defaultObject'.</description></var><var name="dojox.wire.connect" returns="mixed" type="Function"><summary>Transfer a source value to a target value on a trigger event or topic</summary><description>If 'trigger' specifies 'topic', the topic is subscribed to transer a value on the topic. Otherwise, the event specified to 'event' of 'trigger' is listened to transfer a value. On the specified event or topic, transfer() is called with 'source', 'target' and the arguments of the event or topic (as default root objects).</description></var><var name="dojox.wire.disconnect" returns="undefined" type="Function"><summary>Remove a connection or subscription for transfer</summary><description>If 'handle' has 'topic', the topic is unsubscribed. Otherwise, the listener to an event is removed.</description></var><var name="dojox.wire._wireClasses.attribute"/><var name="dojox.wire._wireClasses.path"/><var name="dojox.wire._wireClasses.children"/><var name="dojox.wire._wireClasses.columns"/><var name="dojox.wire._wireClasses.nodes"/><var name="dojox.wire._wireClasses.segments"/><var name="dojox.wire.common" type="Object"/><var name="dojox.wire" type="Object"/><var name="dojox" type="Object"/></vars></resource></api>
